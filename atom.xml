<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SwiftGG]]></title>
  <subtitle><![CDATA[走心的 Swift 翻译组]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://swiftggteam.github.io/"/>
  <updated>2015-11-18T02:20:26.402Z</updated>
  <id>http://swiftggteam.github.io/</id>
  
  <author>
    <name><![CDATA[SwiftGG]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Swift 中的函数式编程]]></title>
    <link href="http://swiftggteam.github.io/2015/11/17/functional-programming-in-swift/"/>
    <id>http://swiftggteam.github.io/2015/11/17/functional-programming-in-swift/</id>
    <published>2015-11-17T04:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/functional-programming-in-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015/11/13<br>译者：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 一个强有力的语言特性就是能够用多样的函数式风格去编写代码。这在社区看来非常激动人心。</p>
<p>我在去年年底花费了一些时间学习函数式编程，所以我可以写更好的 Swift 代码。因此，我非常推荐你们也花时间去学习一下！</p>
<p>另外，我非常推荐推荐你们去看 <a href="http://2014.funswiftconf.com/" target="_blank" rel="external">Functional Swift conference</a>上的每一个视频。</p>
<p>所以在花了这么多时间后，我想要总结一下个人有关于函数式编程在 Swift 应用的一些思考。</p>
<a id="more"></a>
<h2 id="跟着概念走">跟着概念走</h2><p>函数式编程是令人生畏的，这要归咎于单子（monads）和 函数子（functors）！然而，一旦你领悟了它的核心概念，那么函数式编程的思想会超级简单：</p>
<blockquote>
<p>“函数式编程是一个编程范例…它把计算作为数学函数的评估，并避免改变状态和可变数据。”— <a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>所以核心就是你应该用数学的方式去编写代码。你的函数应该有清晰的输入和输出，并且不会像可变对象一样有全局副作用。这就是了！</p>
<h2 id="避免可变状态">避免可变状态</h2><p>这和上述的注意点类似。函数式编程要编写的是没有副作用的数学代码。</p>
<p>在 Swift 中使用结构体和协议帮助你避免可变状态。</p>
<p>我极度推荐观看 <a href="https://twitter.com/andy_matuschak" target="_blank" rel="external">@andy_matuschak</a>的  <a href="https://realm.io/news/andy-matuschak-controlling-complexity/" target="_blank" rel="external">Controlling Complexity in Swift</a>，这可以让你理解如何去实现以及最终的代码会如何地强大。</p>
<h2 id="可读性第一">可读性第一</h2><p>我发现很多高级的函数式代码，通常由于五个以上的习惯性编程而变得特别难以阅读。如果你遵从函数式编程的概念，有很多方法让你的代码变得更清楚。</p>
<p>但是在今天结束之前，还要多说一句，如果你在一个团队中工作，最重要的事就是让代码可读性更强。如果一个内部或者一个新的开发者加入你们的团队，他们会不会完全迷失了？如果你专注于编写易读的代码（取代好玩和花哨的写法），他们可能会很快就有产出。</p>
<p>记住一点，可读性的优先级永远比花哨的代码高（除非你的目标就是用一个好玩的副作用去实现好玩和花哨的程序）。</p>
<h2 id="不要和_framework_作对">不要和 framework 作对</h2><p>当然，在 iOS 编程中，由于 Cocoa framework 的建立和用户的输入输出，没有副作用显然是不可能的（在纯粹的数学世界，确实存在完全没有外部副作用，但那不是我们生活的世界！）。</p>
<p>例如，如果你创建了一个通用的转换器（formatter）（例如货币转换器），并用在代码中的一些地方，用单例是一个很好的方法。你还必须为UI Layer 使用 <code>UIViewControllers</code> 以及 <code>UIViews</code>。总有办法去脱离你的逻辑，进而让很好的不可变组件去帮助你可变化这些东西，但是不要过火地把 freamwork 改变为面目全非（可读，不可读）的状态。</p>
<h2 id="深入学习函数式编程">深入学习函数式编程</h2><p>再次强调，你不应该执着于在你的 Swift 代码中使用花哨的技巧（除非你只是为了试验、或者好玩）。我非常推荐深入学习函数式编程的思想，从而理解那些高级概念，并且更好地应用在你的代码中。</p>
<p>推荐阅读 <a href="https://www.objc.io/books/fpinswift/" target="_blank" rel="external">Functional Programming in Swift</a> ！这里有<a href="http://natashatherobot.com/reading-functional-programming/" target="_blank" rel="external">更多的资源</a>去帮助你开始学习！</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/functional-programming-in-swift/">原文链接</a>，原文日期：2015/11/13<br>译者：<a href="http://daizi.me">小袋子</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 一个强有力的语言特性就是能够用多样的函数式风格去编写代码。这在社区看来非常激动人心。</p>
<p>我在去年年底花费了一些时间学习函数式编程，所以我可以写更好的 Swift 代码。因此，我非常推荐你们也花时间去学习一下！</p>
<p>另外，我非常推荐推荐你们去看 <a href="http://2014.funswiftconf.com/">Functional Swift conference</a>上的每一个视频。</p>
<p>所以在花了这么多时间后，我想要总结一下个人有关于函数式编程在 Swift 应用的一些思考。</p>]]>
    
    </summary>
    
      <category term="Natasha The Robot" scheme="http://swiftggteam.github.io/tags/Natasha-The-Robot/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[捕获上下文信息]]></title>
    <link href="http://swiftggteam.github.io/2015/11/16/capturing-context-swiftlang/"/>
    <id>http://swiftggteam.github.io/2015/11/16/capturing-context-swiftlang/</id>
    <published>2015-11-16T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/08/27/capturing-context-swiftlang/" target="_blank" rel="external">原文链接</a>，原文日期：2015-08-27<br>译者：<a href="https://github.com/chenmingbiao" target="_blank" rel="external">CMB</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>假设你正在使用一个类型，当有错误时发生时你想要输出异常发生时的上下文。通常你会使用一些内置的编译器关键字：<code>__FUNCTION__</code> ， <code>__LINE__</code> 和 <code>__FILE__</code> ，这些关键词提供了有关函数调用详细的文本插值：</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> source: <span class="type">String</span>; <span class="keyword">let</span> reason: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> reason: <span class="type">String</span>, source: <span class="type">String</span> = <span class="keyword">__FUNCTION__</span>,</span><br><span class="line">        file: <span class="type">String</span> = <span class="keyword">__FILE__</span>, line: <span class="type">Int</span> = <span class="keyword">__LINE__</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.reason = reason; <span class="keyword">self</span>.source = <span class="string">"<span class="subst">\(source)</span>:<span class="subst">\(file)</span>:<span class="subst">\(line)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一行典型的 <code>Error</code> 输出如下所示:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Error</span>(source: <span class="string">"myFunction():&lt;EXPR&gt;:14"</span>, reason: <span class="string">"An important reason"</span>)</span><br></pre></td></tr></table></figure>
<p>虽然这种结构能够让你捕获出现异常的函数、文件和行号，但你无法捕捉没有类型参数的原始父类型。为了捕获该类型，需要在 <code>Error</code> 结构体构造器中包含“原始类型”，并向构造器中传递 <code>self.dynamicType</code> 参数。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> source: <span class="type">String</span>; <span class="keyword">let</span> reason: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> reason: <span class="type">String</span>, type: <span class="type">Any</span> = <span class="string">""</span>, </span><br><span class="line">        source: <span class="type">String</span> = <span class="keyword">__FUNCTION__</span>,</span><br><span class="line">        file: <span class="type">String</span> = <span class="keyword">__FILE__</span>, </span><br><span class="line">        line: <span class="type">Int</span> = <span class="keyword">__LINE__</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.reason = reason; <span class="keyword">self</span>.source = <span class="string">"<span class="subst">\(source)</span>:<span class="subst">\(file)</span>:<span class="subst">\(line)</span>:<span class="subst">\(type)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我很不喜欢这种额外添加类型参数的方式，它唯一的作用就是简化错误生成。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">Error</span>(<span class="string">"An important reason"</span>, type: <span class="keyword">self</span>.<span class="keyword">dynamicType</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;<span class="keyword">try</span> <span class="type">Parent</span>().myFunction()&#125; <span class="keyword">catch</span>&#123;<span class="built_in">print</span>(error)&#125;</span><br><span class="line"><span class="comment">// Error(source: "myFunction():&lt;EXPR&gt;:14:Parent", reason: "An important reason")</span></span><br></pre></td></tr></table></figure>
<p>我更喜欢扩展 <code>Contextualizable</code> 来实现自动捕获类型上下文。注意，默认实现的协议方法中用到了 <code>self.dynamicType</code>，它不能被用在方法签名中（译者注：也就是说不能当做函数参数或者返回值）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Contextualizable</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Contextualizable</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">currentContext</span><span class="params">(file : String = <span class="keyword">__FILE__</span>, function : String = <span class="keyword">__FUNCTION__</span>, line : Int = <span class="keyword">__LINE__</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">\(file)</span>:<span class="subst">\(function)</span>:<span class="subst">\(line)</span>:<span class="subst">\(<span class="keyword">self</span>.<span class="keyword">dynamicType</span>)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结合上述两种方法可以简化整个过程轻松实现我们的目标。共享 <code>Error</code> 类型之后就可以把变量改成常量，并且把上下文相关代码从 <code>Error</code> 构造器移动到遵循协议的类型中，这样就可以自动继承 <code>currentContext</code> 方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> source: <span class="type">String</span>; <span class="keyword">let</span> reason: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> source: <span class="type">String</span> = <span class="keyword">__FILE__</span>, <span class="number">_</span> reason: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.reason = reason; <span class="keyword">self</span>.source = source</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Parent</span>: <span class="title">Contextualizable</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">Error</span>(currentContext(), <span class="string">"An important reason"</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>更新之后，错误输出中会包含原始类型。</p>
<p>正如读者 <code>Kametrixom</code> 所指出的，你还可以扩展 <code>Contextualizable</code> 协议并创建你自己的错误。（他还写了一个<a href="https://gist.github.com/Kametrixom/21da650bd7c7006a70e3" target="_blank" rel="external">非常棒的错误类型</a>，可以选择是否添加上下文。）</p>
<p>本文的所有代码可以在 <a href="https://gist.github.com/erica/b6f4884ed5d70c269107" target="_blank" rel="external">这个 Gist</a> 中找到（译者注：Gist 已经被墙，需要翻墙查看）。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/08/27/capturing-context-swiftlang/">原文链接</a>，原文日期：2015-08-27<br>译者：<a href="https://github.com/chenmingbiao">CMB</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>假设你正在使用一个类型，当有错误时发生时你想要输出异常发生时的上下文。通常你会使用一些内置的编译器关键字：<code>__FUNCTION__</code> ， <code>__LINE__</code> 和 <code>__FILE__</code> ，这些关键词提供了有关函数调用详细的文本插值：</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写给初学者的 Swift 教程 Part 1]]></title>
    <link href="http://swiftggteam.github.io/2015/11/13/swift-tutorial-for-beginners-part-1/"/>
    <id>http://swiftggteam.github.io/2015/11/13/swift-tutorial-for-beginners-part-1/</id>
    <published>2015-11-13T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-tutorial-for-beginners-part-1/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-29<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 是苹果官方新推出的编程语言，它可以为 iOS、 watchOS、 tvOS 和 Mac OS 开发应用。在本教程中，你将会学到所有的基础操作。</p>
<a id="more"></a>
<h2 id="你将在这个“Swift_初学者教程”中学到些什么呢？">你将在这个“Swift 初学者教程”中学到些什么呢？</h2><p>本教程包含了以下这些话题：</p>
<ul>
<li>下载 Xcode</li>
<li>Playgrounds</li>
<li>Hello World!</li>
<li>变量</li>
<li>常量</li>
<li>类型标注</li>
<li>条件语句</li>
<li>循环语句</li>
<li>可选类型</li>
<li>函数</li>
</ul>
<p>将会有更多内容出现在“写给初学者的 Swift 教程”系列中。</p>
<p>本教程源码下载: <a href="https://github.com/kevin833752/MyTranslationPlaygrounds/tree/master/Swift_Tutorial_For_Beginners_Part_1.playground" target="_blank" rel="external">来自小铁匠的代码</a></p>
<h2 id="下载_Xcode">下载 Xcode</h2><p>成为 Swift 大牛的第一步当然是下载 Xcode 啦。你可以直接从 App Store 里下载。Xcode 是苹果官方的 IDE 工具，它可以为 iOS、 watchOS、 tvOS 和 Mac OS 这些平台开发应用。</p>
<h2 id="Playgrounds">Playgrounds</h2><p>你会把大部分编程的时间花在具体项目上。但是，Xcode 有一个非常有趣的特性，可以给初学者和大牛带来巨大帮助，它就是 Playgrounds。你可以在 Playground 里写 Swift 代码，写完就直接能看到执行的结果。因此，如果你想要学一些新特性或试验一些新功能，可以打开 Playground 直接编写，不用像在工程里那样先编译再执行。</p>
<p>如果你正在写一个项目，那也可以同时打开一个 Playground，你可以在 Playground 里快速试验一些小功能。</p>
<p>言归正传，讲讲如何使用 Playground。第一步打开 Xcode，接着在欢迎界面点击“Get started with a playground”。如果你没有看到这个欢迎界面，可以按 File -&gt; New -&gt; Playground 这样的路径打开 Playground。指定 Playground 的文件名和保存位置之后，你就可以开始写代码啦。</p>
<h2 id="Hello_World!">Hello World!</h2><p>在大多数的编程书籍中，都把打印“Hello World!”作为第一个项目。我们也不会打破这个传统的，哈哈。</p>
<p>因此，我们在 playground 里写下如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure>
<p>输完这行代码，你就可以在 playground 的右边看到输出的结果。</p>
<p><img src="/img/articles/swift-tutorial-for-beginners-part-1/Screen-Shot-2015-10-03-at-18.26.55-1024x636.png1447379896.6408916" alt=""></p>
<p>恭喜，你已经成功编写了第一个 Swift 程序！</p>
<h2 id="变量">变量</h2><p>在打印出第一句代码后，我们可以开始真正的编程啦。你需要从变量开始。变量可以存储一个值，比如数字或字符串。可以使用<code>var</code>关键字来定义变量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aNumber = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>这样，我们就有了一个叫<code>aNumber</code>的变量，它的值为 5。接着，我们可以尝试着改变这个变量的值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">aNumber = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>我们也可以把一个数学表示式的结果存到这个变量里：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">aNumber = <span class="number">5</span> + <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>当然也可以把变量的值打印出来，这需要用到特殊的术语，如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"The number is equal <span class="subst">\(aNumber)</span>"</span>)</span><br></pre></td></tr></table></figure>
<p>变量可以有不同的类型。你可以为变量指定类型，比如字符串、浮点数或者布尔值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aString = <span class="string">"A String"</span></span><br><span class="line"><span class="keyword">var</span> aDoble = <span class="number">13.3</span></span><br><span class="line"><span class="keyword">var</span> aBool = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>但是，一旦你给变量赋了某一类型的值之后，就只能为变量赋相同类型的值了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">aBool = <span class="string">"A String"</span> <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>
<p>编译器是一段可以把你写的代码翻译成机器码的程序。如果你写了一段编译器不能理解或者违反编程规则的代码，编译器就会报错。</p>
<h2 id="常量">常量</h2><p>顾名思义，变量的值是可以改变的，而常量的值在第一次赋值后就不能修改了。对于常量，你可以使用关键字<code>let</code>来定义：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aConstantNumber = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>如果你尝试修改一个常量的值，就会报错：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">aConstantNumber = <span class="number">10</span> <span class="comment">//编译出错</span></span><br></pre></td></tr></table></figure>
<p>那为什么还要有常量呢？因为，有时候并不希望一个值在第一次赋值后被修改，比如，在指定一个人的姓名后，就不希望这个值被再次修改。</p>
<h2 id="类型标注">类型标注</h2><p>我们已经知道，变量在第一次赋值之后会确定类型。当然，我们也可以在赋值时直接指定变量或常量的类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aNumber: <span class="type">Int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>这个代码的结果和之前的是一样的，但是现在这段代码更加容易读懂。第一眼就知道这个变量的类型是<code>Int</code>。当然， 除了<code>Int</code>，还有许多其他的类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aString: <span class="type">String</span> = <span class="string">"A String"</span></span><br><span class="line"><span class="keyword">var</span> aDouble: <span class="type">Double</span> = <span class="number">13.3</span></span><br><span class="line"><span class="keyword">var</span> aBool: <span class="type">Bool</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="条件语句">条件语句</h2><p>一个程序如果总是做相同的事情，这很无聊。因此，出现了所谓的条件语句来控制程序的流向。比如，你想要根据计算的结果有不同的输出。能控制程序流向的，也是最普遍的条件语句是<code>if</code>条件语句，举例如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> number2 = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> number1 &lt; number2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number1 is smaller than number2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段示例代码中，我们通过<code>if</code>条件语句来判断<code>number1</code>是否小于<code>number2</code>。如果满足这个条件的话，程序就会执行到大括号括起来的 if 代码块里。你也可以在代码块里添加你想要执行的代码。</p>
<p>另外，你还可以在<code>if</code>条件判断返回<code>false</code>的代码块里写相应代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> number2 = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> number1 &lt; number2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number1 is smaller than number2"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number1 is not smaller than number2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，你可以写多个<code>if</code>条件语句：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> number1 &lt; number2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number1 is smaller than number2"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number2 &lt; number1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number2 is than number2"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"number1 is equal number2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swift 里另外一种条件语句是<code>switch</code>条件语句。<code>switch</code>语句的形式就是把某个值与一个或若干个值作比较，例子如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Mick"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The name is Mick"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"John"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The name is John"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The name is neither Mick nor John"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>switch</code>关键字后写上需要匹配的值<code>name</code>。然后，每个<code>case</code>后跟上可能匹配的值。如果<code>name</code>匹配了某一个值，对应<code>case</code>里的代码将被执行；否则，继续进行匹配。假如没有一个值能够匹配，就会执行<code>default</code>后的代码。对于初学者来说，知道<code>switch</code>条件语句有很多可能匹配的值就足够了。</p>
<h2 id="循环">循环</h2><p>除了条件语句意外，还有一个控制程序流的重要结构：循环。循环的作用主要是能多次执行代码块里的代码。Swift 有三种循环的类型：while 循环, repeat-while 循环和 for 循环.</p>
<h3 id="while_循环">while 循环</h3><p>下面的例子使用了 while 循环：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while 循环以<code>while</code>关键字开始，在<code>while</code>关键字后跟上判断条件。如果条件为 true，会重复运行代码块里的一系列代码，比如本例子里的循环打印”Hello World”十次。如果没有修改变量<code>i</code>的值，循环将一直进行下去。</p>
<h3 id="repeat-while_循环">repeat-while 循环</h3><p>repeat-while 循环和 while 循环很相似。但是，不再像 while 循环那样先判断循环条件，例子如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>为什么要使用repeat-while 循环而不是 while 循环？repeat-while 循环和 while 循环的主要区别是在判断循环条件之前，先执行一次循环的代码块。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">11</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>上面这个例子中，尽管判断条件永远是 false，但是还是会打印一次“Hello World”。因此，有时候需要先判断，而有时候不想要先判断，这就要根据具体的情况决定到底使用哪种循环。</p>
<h3 id="for_循环">for 循环</h3><p>for 循环很好用，它可以对一个集合里面的每个元素执行一系列语句。同时，也有好几种遍历的方式，先来看一个例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This iteration number <span class="subst">\(i)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果像上面的例子一样使用三个点号（闭区间操作符）的话，最后一个数字（10）也会被包含。此外，也可以像下面的例子一样使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This iteration number <span class="subst">\(i)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面这个例子中，最后一个数字（10）不会被包含进去。另外，还有一种方式可以写 for 循环，就是标准 C 样式的 for 循环：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This iteration number <span class="subst">\(i)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个循环会执行十次。分号将循环的定义分为 3 个部分：首先，循环首次启动时，变量会被初始化，并赋一个起始值；其次，条件判断表达式被调用，如果表达式调用结果为true，则会执行大括号内部的代码；最后，执行所有语句之后，执行递增表达式，在本例中，变量<code>i</code>每次增加 1。其中，<code>i++</code>等同于<code>i = i + 1</code>。</p>
<h2 id="可选类型">可选类型</h2><p>可选类型是 Swift 里很特殊的新特性，它非常重要，因此我们在一开始就要介绍它。试想一下，一个变量有可能没有值，比如，一个变量用来存储一个人的 middle name，那某人没有 middle name 的话该怎么表示呢？我们很自然的能想到赋值一个空字符串：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> middleName: <span class="type">String</span> = <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>然而，如果我们让<code>middleName</code>成为可选类型，我们就可以为变量指定表示“这里没有值”的<code>nil</code>。可选类型的定义是在类型后面跟上问号：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> middleName: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>可选类型的变量可以有非空的值。但是，如果你像普通变量那样访问可选类型的变量，就会编译出错：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherName: <span class="type">String</span> = middleName <span class="comment">//编译出错</span></span><br></pre></td></tr></table></figure>
<p>你可以通过解包来访问，使用感叹号进行解包：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherName: <span class="type">String</span> = middleName!</span><br></pre></td></tr></table></figure>
<p>值得注意的是，如果你对一个非<code>nil</code>的值进行解包，可以得到具体的值；否则，就会在运行时报错，因为不能对<code>nil</code>进行解包。</p>
<p>因此，最好在使用可选类型变量前先判断是否是<code>nil</code>，使用所谓的可选绑定（optional binding）就可以搞定了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> middleName: <span class="type">String</span>? = <span class="string">"John"</span></span><br><span class="line"><span class="keyword">var</span> anotherName: <span class="type">String</span> = <span class="string">"Michael"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = middleName &#123;</span><br><span class="line">    anotherName = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始，这段代码可能看起来会有点奇怪，实际上很简单，意思也很明确：如果<code>middleName</code>等于<code>nil</code>的话，对应的代码块就不会执行。如果<code>middleName</code>不等于<code>nil</code>的话，变量<code>name</code>就会获得<code>middleName</code>的值，对应的代码块就会被执行。在代码块里，<code>name</code>就不再是可选变量了，因此可以给其他变量赋值。</p>
<h2 id="函数">函数</h2><p>你可能经常会遇到，一些代码可以应用于许多不同的情况。而函数就是用来完成特定任务的独立的代码块，并且当函数需要执行的时候，这个名字会被用于“调用”函数。先从简单打印“Hello World”的函数开始吧：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printHelloWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上，你把上面那段代码写到 playground 里，界面右边是没有输出的。如果你通过下面的方式调用这个函数的话，就会有对应的输出了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printHelloWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printHelloWorld()</span><br></pre></td></tr></table></figure>
<p>如果你调用这个函数两次的话，你会看到界面右边会出现两次输出：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printHelloWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printHelloWorld()</span><br><span class="line">printHelloWorld()</span><br></pre></td></tr></table></figure>
<p>你也可以给函数传递额外的信息，即传递参数。每个参数都需要指定参数名和类型，然后你就可以在函数里访问这些参数的值了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printANumber</span><span class="params">(number:Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The number is <span class="subst">\(number)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，你就可以像下面的方式调用有参数的函数了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printANumber</span><span class="params">(number:Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The number is <span class="subst">\(number)</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printANumber(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>本例中，对应的输出就是：“The number is 5”。</p>
<p>你甚至可以指定多个参数。然后，你在调用函数时，除了不需要写第一个参数的参数名之外，其他参数都需要写参数名：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">printNumbers</span><span class="params">(number1:Int, number2:Int, number3:Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The number are <span class="subst">\(number1)</span>, <span class="subst">\(number2)</span>, <span class="subst">\(number3)</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printNumbers(<span class="number">5</span>, number2:<span class="number">10</span>, number3:<span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>另外，函数最重要的一点就是返回值。如果需要函数有返回值，你就要指定返回值的类型，同时，返回值由<code>return</code>关键字返回。</p>
<p>举个例子：你需要写一个函数，实现返回两个数字中更大者的功能。大体代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">maxOfNumbers</span><span class="params">(number1: Int, number2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> number1 &lt; number2 &#123;</span><br><span class="line">        <span class="keyword">return</span> number2</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">maxOfNumbers(<span class="number">5</span>, number2: <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为 10。</p>
<h2 id="接下来该干什么">接下来该干什么</h2><p>现在已经基本熟悉 Swift 中大部分的基本语法了。这对之后的学习是个很重要的基础。接下来可以自己动手在 Playground 里试着写一些小功能，也可以看看关于本文知识点的其他文章：</p>
<ul>
<li><a href="http://www.thomashanning.com/should-you-use-objective-c-or-swift/" target="_blank" rel="external">该使用 Objective-C 还是 Swift？</a></li>
<li><a href="http://www.thomashanning.com/constants-in-swift/" target="_blank" rel="external">Swift 中的常量</a></li>
<li><a href="http://www.thomashanning.com/optionals-in-swift/" target="_blank" rel="external">Swift 中的可选类型</a></li>
</ul>
<p>在本系列的后续部分，我们会讨论更多关于 Swift 的新特性。请继续关注!</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-tutorial-for-beginners-part-1/">原文链接</a>，原文日期：2015-10-29<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 是苹果官方新推出的编程语言，它可以为 iOS、 watchOS、 tvOS 和 Mac OS 开发应用。在本教程中，你将会学到所有的基础操作。</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[函数和方法命名规范]]></title>
    <link href="http://swiftggteam.github.io/2015/11/12/naming-methods-and-functions/"/>
    <id>http://swiftggteam.github.io/2015/11/12/naming-methods-and-functions/</id>
    <published>2015-11-12T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/08/31/naming-methods-and-functions/" target="_blank" rel="external">原文链接</a>，原文日期：2015-08-31<br>译者：<a href="http://weibo.com/u/2916092907" target="_blank" rel="external">天才175</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<p>请各位随意批判。同时请看<a href="https://realm.io/news/swift-summit-swifty-methods-clarity-brevity/" target="_blank" rel="external">这里</a>和<a href="http://radex.io/swift/methods/" target="_blank" rel="external">这里</a>。</p>
<p><strong>简单明了</strong>。根据上下文给动词和介词加上名词。请使用<code>removeObject(object, atIndex: index)</code>，而不是<code>remove(object, at: index)</code>。不要为了过度的简洁而影响清晰准确性。</p>
<a id="more"></a>
<p><strong>避免缩写</strong>。使用<code>printError(myError)</code>而不是<code>printErr(myErr)</code>以及<code>setBackgroundImage(myImage)</code>而不是<code>setBGImage(myImg)</code>。虽然苹果提供了一系列“可接受”的缩写，但是请不要在 Swift 中使用像 max 和 min 这样的缩写。</p>
<p><strong>避免歧义</strong>。考虑一下函数或者方法的命名是否存在多种解释。举个栗子，在<code>displayName</code>中，display 是名词还是动词呢？如果命名不清晰的话，请重新命名来消除混淆。</p>
<p><strong>保持一致性</strong>。在你的应用和库中使用相同的术语来描述概念。避免在一个方法里使用<code>fetchBezierElements()</code>，却在另外一个里使用<code>listPathComponents()</code>。</p>
<p><strong>不要引用类型关键字</strong>。避免命名中出现 struct、enum、class、instance 以及 object。请使用<code>buildDeckofCards()</code>而不是<code>buildDeckofCardsStruct()</code>。</p>
<p><strong>方法命名使用小写</strong>。虽然大多数开发者使用小写命名全局函数，但你可以大写，这并不是什么罪过。虽然这种函数命名过时了，但大写的函数名却能立刻将函数与方法区别开来。有一段时间我也改变过想法，但是最终还是决定奋起抗争，使用小写。这种做法曾经和命名空间一样普及，但是突然间就销声匿迹了。就像一百万个喊着大写的人突然沉默。</p>
<p><strong>省略”get”</strong>。获取状态信息的函数应该描述他们要返回的东西。请使用<code>extendedExecutionIsEnabled()</code>或<code>isExtendedExecutionEnabled()</code>而不是<code>getExtendedExecutionIsEnabled()</code>。通过参数返回数据的函数例外。</p>
<p><strong>使用标签描述参数</strong>。建议结合函数名和标签来描述函数本身，这样创建出来的会是包括介词（with、of、between 等等）的描述符。你会”construct color with red, green, and blue”（译者注：使用红绿蓝构建颜色），测试”length of string”（译者注：字符串的长度），或者”test equality between x and y”（译者注：判断 x 和 y 是否相等）。</p>
<p>好的函数名和标签可以告诉人们如何使用函数。结果会是自文档化，不用依靠记忆或查找来确定需要传入的参数。请使用<code>withTag:</code>而不是<code>tag:</code>。</p>
<p><strong>使用介词，避免”and”</strong>。<code>And</code> 是 Apple 特别声称要避免的一个词。避免使用”view and position”，使用”view, position”。 </p>
<p>如果你必须使用<code>and</code>，请确保一组参数有语义联系，如使用”red, green and blue”构建颜色。哪怕之后调整了关键字，也显然不可能中断这些项的联系。在这种情况下，即使是代码洁癖患者也不会认为你的代码有问题。</p>
<p>Apple 支持使用 and 的一个例子是在一个方法中描述两种截然不同的动作，比如<code>openFile(withApplication:, andDeactivate:)</code>。</p>
<p><strong>在基于类型的名字后面加上<code>value</code> </strong>。请使用<code>toIntValue</code>而不是<code>toInt</code>，以及<code>withCGRectValue</code>而不是<code>withCGRect</code>。</p>
<p><strong>使用美国标准短语</strong>。由于这些词是由 Apple 提供的，请使用 initialize 而不是 initialise 以及 color 而不是 colour。</p>
<p><strong>有疑惑，找 Apple</strong>。使用相似的概念搜索 Apple API 接口并模仿其方法签名。尽量参考 Objective-C  命名，因为 Swift 中的 Apple API 并没有全部通过人工审查。自动转换过来的 API 可能并不是一个好例子。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/08/31/naming-methods-and-functions/">原文链接</a>，原文日期：2015-08-31<br>译者：<a href="http://weibo.com/u/2916092907">天才175</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<p>请各位随意批判。同时请看<a href="https://realm.io/news/swift-summit-swifty-methods-clarity-brevity/">这里</a>和<a href="http://radex.io/swift/methods/">这里</a>。</p>
<p><strong>简单明了</strong>。根据上下文给动词和介词加上名词。请使用<code>removeObject(object, atIndex: index)</code>，而不是<code>remove(object, at: index)</code>。不要为了过度的简洁而影响清晰准确性。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 Swift 2.0 当中使用 C 语言回调]]></title>
    <link href="http://swiftggteam.github.io/2015/11/11/c-callbacks-in-swift/"/>
    <id>http://swiftggteam.github.io/2015/11/11/c-callbacks-in-swift/</id>
    <published>2015-11-11T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Ole Begemann，<a href="http://oleb.net/blog/2015/06/c-callbacks-in-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015-06-22<br>译者：<a href="http://www.swiftyper.com/" target="_blank" rel="external">小锅</a>；校对：<a href="http://codebuild.me/" target="_blank" rel="external">shanks</a>；定稿：<a href="http://codebuild.me/" target="_blank" rel="external">shanks</a></p>
</blockquote>
<!--此处开始正文-->
<blockquote>
<p>更新:</p>
</blockquote>
<ul>
<li><p>2015-06-25<br>增加关于传递另一个（可以捕获外部变量的）闭包到 <code>userInfo</code> 参数的备注。</p>
</li>
<li><p>2015-07-01<br>针对 Xcode 7 beta 2 更新从 <code>CGPathElement</code> 创建一个 <code>PathElement</code> 类型的代码。</p>
</li>
</ul>
<p>几年前，我曾经写过一篇关于如何获取 <code>CGPath</code> 和 <code>UIBezierPath</code> 中元素的<a href="http://oleb.net/blog/2012/12/accessing-pretty-printing-cgpath-elements/" target="_blank" rel="external">文章</a>。可以通过调用 <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGPath/index.html#//apple_ref/c/func/CGPathApply" target="_blank" rel="external">CGPathApply</a> 函数，并给这个函数传入一个回调的函数指针来达到这个目的。 随后 <code>CGPathApply</code> 会对 path(CGPath 或 UIBezierPath) 中的每一个元素调用这个回调函数。  </p>
<a id="more"></a>
<p>很不幸，我们无法在 Swift 1.x 中做到这件事，因为我们没办法将 Swift 函数桥接到 C 语言函数。我们需要使用 C 或者 Objective-C 写一个小小的包装层来对这个回调函数进行封装。</p>
<p>而在 Swift 2 当中，可以直接使用原生的 Swift 来完成这件事。Swift 将 C 语言的函数指针<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html" target="_blank" rel="external">作为闭包来导入</a>。在任何需要传入 C 语言函数指针的地方，我们都可以传入与该函数指针参数相匹配的 Swift 闭包或者函数 —— 除了一个特殊情况：与闭包不同的是，C 语言的函数指针没有捕获状态(capturing state)的概念。因此，编译器只允许传入不捕获任何外部变量的 Swift 闭包来对C语言函数指针进行桥接。Swift 使用了新的 <code>@convention(c)</code> 注解来标识这一约定。</p>
<blockquote>
<p>下载本篇文章的<a href="http://oleb.net/media/c-callbacks-in-swift.playground.zip" target="_blank" rel="external">playground</a>，要求 Swift 2/Xcode 7。</p>
</blockquote>
<h2 id="获取_UIBezierPath_中的元素">获取 UIBezierPath 中的元素</h2><p>让我们使用迭代一个 path 中元素这个熟悉的任务来作为例子。</p>
<h3 id="一个_Swift_化后的数据结构">一个 Swift 化后的数据结构</h3><p>首先，考虑一下我们必须处理的数据结构。<code>CGPathApply</code> 会将一个 <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGPath/index.html#//apple_ref/c/tdef/CGPathElement" target="_blank" rel="external">CGPathElement</a> 的指针传递给回调函数（或者闭包）。<code>CGPathElement</code> 是一个结构体，这个结构体包含了一个标识 path 元素类型的的常量，以及一个 <code>CGPoint</code> 类型的C语言数组。这个数组中的点(point)的个数将在 0 到 3 之间，取决于元素的类型。</p>
<p>在 Swift 当中直接使用 <code>CGPathElement</code> 很不方便。C语言数组在 Swift 中是被当作 <code>UnsafeMutablePointer&lt;CGPoint&gt;</code> 来导入的，并且它的生命周期被限制在该回调函数中，因此，如果想在别的地方使用这个数组，我们就得将它的内容复制并保存。更进一步地，如果有一个更安全的方式来获取每个元素中点(point)的个数就更好了。</p>
<p>一个关联了点(point)个数的 Swift 枚举，会是达到这个目的的理想类型。我们同时还要定义一个从 <code>CGPathElement</code> 转换的自定义构造器。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// A Swiftified representation of a `CGPathElement`</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Simpler and safer than `CGPathElement` because it doesn’t use a</span></span><br><span class="line"><span class="comment">/// C array for the associated points.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">PathElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">MoveToPoint</span>(<span class="type">CGPoint</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">AddLineToPoint</span>(<span class="type">CGPoint</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">AddQuadCurveToPoint</span>(<span class="type">CGPoint</span>, <span class="type">CGPoint</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">AddCurveToPoint</span>(<span class="type">CGPoint</span>, <span class="type">CGPoint</span>, <span class="type">CGPoint</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">CloseSubpath</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(element: <span class="type">CGPathElement</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> element.type &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">MoveToPoint</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">MoveToPoint</span>(element.points[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">AddLineToPoint</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">AddLineToPoint</span>(element.points[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">AddQuadCurveToPoint</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">AddQuadCurveToPoint</span>(element.points[<span class="number">0</span>], element.points[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">AddCurveToPoint</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">AddCurveToPoint</span>(element.points[<span class="number">0</span>], element.points[<span class="number">1</span>], element.points[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">CloseSubpath</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">CloseSubpath</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，为我们的新数据类型定义一个格式化的输出，这将使我们调试时更加方便：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PathElement</span> : <span class="title">CustomDebugStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> debugDescription: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">MoveToPoint</span>(point):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(point.x)</span> <span class="subst">\(point.y)</span> moveto"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">AddLineToPoint</span>(point):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(point.x)</span> <span class="subst">\(point.y)</span> lineto"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">AddQuadCurveToPoint</span>(point1, point2):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(point1.x)</span> <span class="subst">\(point1.y)</span> <span class="subst">\(point2.x)</span> <span class="subst">\(point2.y)</span> quadcurveto"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">AddCurveToPoint</span>(point1, point2, point3):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(point1.x)</span> <span class="subst">\(point1.y)</span> <span class="subst">\(point2.x)</span> <span class="subst">\(point2.y)</span> <span class="subst">\(point3.x)</span> <span class="subst">\(point3.y)</span> curveto"</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="type">CloseSubpath</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"closepath"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再接再厉，来将 <code>PathElement</code> 实现为可比较的(Equatable)（因为我们<a href="https://developer.apple.com/videos/wwdc/2015/?id=414" target="_blank" rel="external">始终应该这样做</a>）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PathElement</span> : <span class="title">Equatable</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="func"><span class="keyword">func</span> ==<span class="params">(lhs: PathElement, rhs: PathElement)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(lhs, rhs) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (.<span class="type">MoveToPoint</span>(l), .<span class="type">MoveToPoint</span>(r)):</span><br><span class="line">        <span class="keyword">return</span> l == r</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (.<span class="type">AddLineToPoint</span>(l), .<span class="type">AddLineToPoint</span>(r)):</span><br><span class="line">        <span class="keyword">return</span> l == r</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (.<span class="type">AddQuadCurveToPoint</span>(l1, l2), .<span class="type">AddQuadCurveToPoint</span>(r1, r2)):</span><br><span class="line">        <span class="keyword">return</span> l1 == r1 &amp;&amp; l2 == r2</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (.<span class="type">AddCurveToPoint</span>(l1, l2, l3), .<span class="type">AddCurveToPoint</span>(r1, r2, r3)):</span><br><span class="line">        <span class="keyword">return</span> l1 == r1 &amp;&amp; l2 == r2 &amp;&amp; l3 == r3</span><br><span class="line">    <span class="keyword">case</span> (.<span class="type">CloseSubpath</span>, .<span class="type">CloseSubpath</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">_</span>, <span class="number">_</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="枚举_Path_元素">枚举 Path 元素</h3><p>现在到了有趣的部分了。我们要对 <code>UIBezierPath</code> 增加一个名为 <code>elements</code> 的计算属性，它会迭代 path 并且返回一个 <code>PathElement</code> 类型的数组。我们需要调用 <code>CGPathApply()</code> 并传递给它一个闭包参数，它会对每个元素都调用这个闭包。在这个闭包内部，我们需要将 <code>CGPathElement</code> 转化为 <code>PathElement</code> 并将它存储在一个数组当中。 最后一部分的实现并不像听起来的那么简单，因为 C 函数指针的调用约定不允许我们对外部上下文中的变量进行捕获。</p>
<p>这个 API 的纯 C 实现也面临着同样的问题，因此 <code>CGPathApply</code> 接收了一个额外的 <code>void *</code> 类型的参数并将这个指针传递给回调函数。这使得调用者可以传递一个任意类型的数据（比如一个指向数组的指针）给回调函数 —— 这正是我们所需要的。</p>
<p><code>void *</code> 类型在 Swift 当中是被作为 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_UnsafeMutablePointer_Structure/" target="_blank" rel="external">UnsafeMutablePointer<void></void></a> 引入的。我们先创建一个 Swift 数组用于存储 <code>PathElement</code> 的值，然后使用 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_StandardLibrary_Functions/index.html#//apple_ref/swift/func/s:FSs24withUnsafeMutablePointeru0_rFTRq_FGVSs20UnsafeMutablePointerq__q0__q0_" target="_blank" rel="external">withUnsafeMutablePointer()</a> 来获得指向这个数组的指针，这个指针会作为参数传递到该函数的闭包中。在该闭包当中，我们就可以开始调用 <code>CGPathApply</code>。在 <code>CGPathApply</code> 的内部闭包中最后一步是要将 void 指针转型回 <code>UnsafeMutablePointer&lt;[PathElement]&gt;</code>，并通过 <code>memory</code> 属性来直接获取底层的数组。（注：我不是很确定这是不是将一个数组传递到闭包中的最好方法，如果你知道有更好的方法，请让我知道）</p>
<p>完整的实现看起来是这样子的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIBezierPath</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements: [<span class="type">PathElement</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> pathElements = [<span class="type">PathElement</span>]()</span><br><span class="line">        <span class="built_in">withUnsafeMutablePointer</span>(&amp;pathElements) &#123; elementsPointer <span class="keyword">in</span></span><br><span class="line">            <span class="type">CGPathApply</span>(<span class="type">CGPath</span>, elementsPointer) &#123; (userInfo, nextElementPointer) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> nextElement = <span class="type">PathElement</span>(element: nextElementPointer.memory)</span><br><span class="line">                <span class="keyword">let</span> elementsPointer = <span class="type">UnsafeMutablePointer</span>&lt;[<span class="type">PathElement</span>]&gt;(userInfo)</span><br><span class="line">                elementsPointer.memory.append(nextElement)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pathElements</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新：在<a href="https://forums.developer.apple.com/message/15725#15725" target="_blank" rel="external">苹果开发者论坛中的一个帖子</a>里，苹果员工 Quinn “The Eskimo!” 提出了一个稍微不同的方法：我们可以传递指向另一个闭包的指针给 <code>userInfo</code> 参数，而非我们想要操作的数组的指针。因为这个闭包没有被C调用约定所限制，因此它是可以捕获外部变量的。</p>
<p>创建一个闭包的指针会涉及到丑陋的 <code>@convention(block)</code> 注解和 <code>unsafeBitCast</code> 魔法（或者是将闭包包装到一个包装类型中），我不太确定我是否会喜欢这种形式。不过使用这种方法确实是相当方便的。</p>
<h2 id="收尾">收尾</h2><p>现在，我们有了一个包含 path 元素的数组，很自然地，我们会想要将 UIBezierPath 转化成一个序列。这使得用户可以使用 <code>for-in</code> 循环来对 path 进行迭代，或者直接对它调用 <code>map</code> 或 <code>filter</code> 方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIBezierPath</span> : <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">generate</span><span class="params">()</span></span> -&gt; <span class="type">AnyGenerator</span>&lt;<span class="type">PathElement</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">anyGenerator</span>(elements.generate())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，这是一个便于 UIBezierPath 调试的格式化输出的实现，这个实现参考了 OS X 上的 NSBezierPath 的输出格式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIBezierPath</span> : <span class="title">CustomDebugStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">var</span> debugDescription: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cgPath = <span class="keyword">self</span>.<span class="type">CGPath</span>;</span><br><span class="line">        <span class="keyword">let</span> bounds = <span class="type">CGPathGetPathBoundingBox</span>(cgPath);</span><br><span class="line">        <span class="keyword">let</span> controlPointBounds = <span class="type">CGPathGetBoundingBox</span>(cgPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> description = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.<span class="keyword">dynamicType</span>)</span>\n"</span></span><br><span class="line">            + <span class="string">"    Bounds: <span class="subst">\(bounds)</span>\n"</span></span><br><span class="line">            + <span class="string">"    Control Point Bounds: <span class="subst">\(controlPointBounds)</span>"</span></span><br><span class="line">            + elements.<span class="built_in">reduce</span>(<span class="string">""</span>, combine: &#123; (acc, element) <span class="keyword">in</span></span><br><span class="line">                acc + <span class="string">"\n    <span class="subst">\(String(reflecting: element)</span>)"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> description</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在用一个示例 path 来进行一下试验：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</span><br><span class="line">path.moveToPoint(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>))</span><br><span class="line">path.addLineToPoint(<span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">0</span>))</span><br><span class="line">path.addLineToPoint(<span class="type">CGPoint</span>(x: <span class="number">50</span>, y: <span class="number">100</span>))</span><br><span class="line">path.closePath()</span><br><span class="line">path.moveToPoint(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">100</span>))</span><br><span class="line">path.addQuadCurveToPoint(<span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">100</span>),</span><br><span class="line">    controlPoint: <span class="type">CGPoint</span>(x: <span class="number">50</span>, y: <span class="number">200</span>))</span><br><span class="line">path.closePath()</span><br><span class="line">path.moveToPoint(<span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">0</span>))</span><br><span class="line">path.addCurveToPoint(<span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">0</span>),</span><br><span class="line">    controlPoint1: <span class="type">CGPoint</span>(x: <span class="number">125</span>, y: <span class="number">100</span>),</span><br><span class="line">    controlPoint2: <span class="type">CGPoint</span>(x: <span class="number">175</span>, y: -<span class="number">100</span>))</span><br><span class="line">path.closePath()</span><br></pre></td></tr></table></figure>
<p><img src="/img/articles/c-callbacks-in-swift/uibezierpath-example.png1447203254.48282" alt="The example path"></p>
<p>也可以迭代 path 中的每一个元素，然后打印出每个元素的描述(description)字符串：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> path &#123;</span><br><span class="line">    <span class="built_in">debugPrint</span>(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span><br><span class="line">0.0 0.0 moveto</span><br><span class="line">100.0 0.0 lineto</span><br><span class="line">50.0 100.0 lineto</span><br><span class="line">closepath</span><br><span class="line">0.0 100.0 moveto</span><br><span class="line">50.0 200.0 100.0 100.0 quadcurveto</span><br><span class="line">closepath</span><br><span class="line">100.0 0.0 moveto</span><br><span class="line">125.0 100.0 175.0 -100.0 200.0 0.0 curveto</span><br><span class="line">closepath</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p>或者，我们也可以计算 path 中的闭合路径(closepath)的个数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> closePathCount = path.<span class="built_in">filter</span> &#123;</span><br><span class="line">        element <span class="keyword">in</span> element == <span class="type">PathElement</span>.<span class="type">CloseSubpath</span></span><br><span class="line">    &#125;.<span class="built_in">count</span></span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>Swift 2 中自动地将 C 语言函数指针桥接到为闭包。这使得对大量的接收函数指针的 C 语言API 进行操作成为可能（并且相当方便）。因为 C 语言的调用约定，这种类型的闭包无法捕获外部的状态，所以我们经常需要将回调闭包中需要用到的数据通过一个外部的 <code>void</code> 类型的指针传入，而这正是很多基于C语言的 API 的做法。在 Swift 当中进行这样的操作会有点绕，不过却是完全可能的。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Ole Begemann，<a href="http://oleb.net/blog/2015/06/c-callbacks-in-swift/">原文链接</a>，原文日期：2015-06-22<br>译者：<a href="http://www.swiftyper.com/">小锅</a>；校对：<a href="http://codebuild.me/">shanks</a>；定稿：<a href="http://codebuild.me/">shanks</a></p>
</blockquote>
<!--此处开始正文-->
<blockquote>
<p>更新:</p>
</blockquote>
<ul>
<li><p>2015-06-25<br>增加关于传递另一个（可以捕获外部变量的）闭包到 <code>userInfo</code> 参数的备注。</p>
</li>
<li><p>2015-07-01<br>针对 Xcode 7 beta 2 更新从 <code>CGPathElement</code> 创建一个 <code>PathElement</code> 类型的代码。</p>
</li>
</ul>
<p>几年前，我曾经写过一篇关于如何获取 <code>CGPath</code> 和 <code>UIBezierPath</code> 中元素的<a href="http://oleb.net/blog/2012/12/accessing-pretty-printing-cgpath-elements/">文章</a>。可以通过调用 <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGPath/index.html#//apple_ref/c/func/CGPathApply">CGPathApply</a> 函数，并给这个函数传入一个回调的函数指针来达到这个目的。 随后 <code>CGPathApply</code> 会对 path(CGPath 或 UIBezierPath) 中的每一个元素调用这个回调函数。  </p>]]>
    
    </summary>
    
      <category term="Ole Begemann" scheme="http://swiftggteam.github.io/tags/Ole-Begemann/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 NSUndoManager 来进行撤销和重做]]></title>
    <link href="http://swiftggteam.github.io/2015/11/10/ios-undo-and-redo-with-nsundomanager/"/>
    <id>http://swiftggteam.github.io/2015/11/10/ios-undo-and-redo-with-nsundomanager/</id>
    <published>2015-11-10T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/ios-undo-and-redo-with-nsundomanager/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-13<br>译者：<a href="http://blog.csdn.net/yake_099" target="_blank" rel="external">Yake</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="undefined"></a></p>
</blockquote>
<p>在相当长的一段时间内 NSUndoManager 对我来说都是一个很神秘的东西。我想学习使用它，但是一直没有时间。一直到今天，我写了一个简单的应用，这个应用创建了一个可以移动的矩形，并且还可以修改矩形的属性，例如背景色或者圆角。</p>
<a id="more"></a>
<p>你可以在<a href="https://github.com/tomkowz/undo-manager-practice" target="_blank" rel="external">这儿</a>获取到示例应用<br><a href="https://youtu.be/3Pk85X8bugk" target="_blank" rel="external">这儿</a>是一段小视频，你可以看看这个示例应用是怎么工作的。</p>
<p><img src="/img/articles/ios-undo-and-redo-with-nsundomanager/Screen-Shot-2015-09-13-at-17.24.19.png1447290433.4454885" alt="Screen-Shot-2015-09-13-at-17.24.19.png"></p>
<h2 id="NSUndoManager">NSUndoManager</h2><p><code>NSUndoManager</code>允许记录用户执行的操作并且反转这类操作。</p>
<p>当你调用一个可以改变一些东西的方法或者是执行一个改变属性值的动作（例如 setter 方法）时，你可以注册这个操作来进行撤销。</p>
<p>一个撤销操作包含了接收消息的对象，发送消息以及参数 - 通常你会传入原始值。</p>
<p><code>NSUndoManager</code>实例支持重做操作，所以才能逆转操作。你可以认为这个管理器拥有两个栈。实际上，它管理两个栈，<code>undo</code>(撤销)栈和<code>redo</code>（重做）栈 - 对应<code>NSUndoManager</code>的私有属性<code>_undoStack</code>和<code>_redoStack</code>，里面存储着一些操作。</p>
<p>注册<code>undo</code>操作时，它会被添加到<code>undo</code>栈中。当调用<code>undo()</code>方法时管理器就会进行撤销，执行栈中的操作并把这个操作移动到<code>redo</code>栈中，这样你就可以重做它。当你拥有多个<code>undo</code>操作时，按照逆序来撤销和重做这些操作。你肯定不会将操作直接注册到<code>redo</code>栈中，实际上这根本无法实现。</p>
<p>你可以为<code>undo</code>操作设置一个级别，这指的是一个管理器可以在它的栈中存储多少<code>undo</code>操作。如果添加的<code>undo</code>操作数量超过了这个级别，最早加入的那个操作将会从栈中移除。</p>
<p>你可以通过<code>canUndo</code>和<code>canRedo</code>来检查<code>undo</code>和<code>redo</code>栈的状态。这些状态很重要，你可能会基于这些栈的状态来更新 UI。</p>
<p>假设你已经设置了<code>undo</code>操作的级别并且<code>redo</code>栈中还有一个操作，如果<code>undo</code>操作超过了这个级别，那你就需要使用<code>canUndo</code>和<code>canRedo</code>来检测可用性。之所以要这样做，是因为在这种情况下<code>NSUndoManager</code>将会移除<code>redo</code>操作，因为它是历史操作中最新的<code>undo</code>操作。（校对注：这里确实很绕，大家可以类比一下编辑器的撤销和重做操作，如果你在撤销之后进行了新的改动，那之前撤销过的操作其实已经无法再被重做了，因此可以被直接删掉，从而把更多的空间留给<code>undo</code>操作。）</p>
<h2 id="注册undo操作">注册<code>undo</code>操作</h2><p>API提供了两种注册操作的方法。</p>
<p>第一种是使用<code>registerUndoWithTarget(_:selector:object:)</code>方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">registerUndoAddFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    undoManager.registerUndoWithTarget(<span class="keyword">self</span>, selector: <span class="type">Selector</span>(“removeFigure:”), object: figure)</span><br><span class="line">    undoManager.setActionName(“<span class="type">Add</span> <span class="type">Figure</span>”)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二种撤销方法是基于<code>NSInvocation</code>。你可以使用<code>prepareWithInvocationTarget(_:)</code>方法来注册此类操作。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">registerUndoAddFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    undoManager.prepareWithInvocationTarget(<span class="keyword">self</span>).removeFigure(figure)</span><br><span class="line">    undoManager.setActionName(<span class="string">"Add Figure"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你将会得到一个<code>NSUndoManagerProxy</code>类型对象，可以用它调用任何方法（但是只能调用目标对象遵守的那些协议方法，否则应用会抛出运行时异常）。注册之后代理对象将会在内部创建<code>NSInvocation</code>对象来记录你的操作，这个对象会在传入的目标对象执行<code>undo</code>操作时被调用。</p>
<p>值得强调的是，在注册过程中目标对象没有被持有，需要你去管理它。如果<code>undo</code>操作被调用而目标对象已经被销毁，就会产生运行时异常。</p>
<p>当对象将要被销毁时你需要调用<code>removeAllActionsWithTarget(_:)</code>来移除与目标对象相关联的一些操作，或者调用<code>removeAllActions()</code>来移除<code>undo</code>和<code>redo</code>栈中所有的操作</p>
<h2 id="将操作分组">将操作分组</h2><p>分组操作是一件很有用的事情。默认情况下操作是通过事件进行分组的。这就意味着操作将会通过每一轮运行时循环来分组。你可以关闭自动分组，调用<code>beginUndoGrouping()</code>和<code>endUndoGrouping()</code>方法来手动操作分组。</p>
<h2 id="命名并显示操作">命名并显示操作</h2><p><code>NSUndoManager</code>支持存储操作的名称。你可以调用<code>setActionName(_:)</code>方法来为操作命名。管理器已经包含<code>Undo</code>和<code>Redo</code>这两个单词的多语言版本，可以使用 API 直接获取对应语言的<code>Undo/Redo</code>字符串。</p>
<p>下面这个方法来自示例应用，每一个新的<code>undo</code>操作被注册或者<code>undo``redo</code>操作被执行之后，将会更新<code>undo</code>和<code>redo</code>按钮。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">updateUndoAndRedoButtons</span><span class="params">()</span></span> &#123;</span><br><span class="line">    undoButton.enabled = undoManager.canUndo == <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> undoManager.canUndo &#123;</span><br><span class="line">        undoButton.setTitle(undoManager.undoMenuTitleForUndoActionName(undoManager.undoActionName), forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        undoButton.setTitle(undoManager.undoMenuItemTitle, forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    redoButton.enabled = undoManager.canRedo == <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> undoManager.canRedo &#123;</span><br><span class="line">        redoButton.setTitle(undoManager.redoMenuTitleForUndoActionName(undoManager.redoActionName), forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redoButton.setTitle(undoManager.redoMenuItemTitle, forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通知">通知</h2><p>管理器有几个你可以观察的通知类型。在示例应用中我关注的是<code>NSUndoManagerDidUndoChangeNotification</code>和<code>NSUndoManagerDidRedoChangeNotification</code>。为了让应用完美运行，我可能需要观察所有<code>will</code>或者<code>did</code>类型的通知，因为操作可能要执行一段时间，并且一部分代码可能是异步的。在这些情况下应用要正确展示 UI 就需要使用这些通知来刷新<code>Undo</code>和<code>Redo</code>按钮。</p>
<h2 id="上下文">上下文</h2><p>应用在不同的上下文中可能有不同的管理器。示例应用在不同的上下文中用了两个管理器。</p>
<p>第一个上下文是块展板，展板用来展示矩形并且可以在上面移动这个矩形。在这个展板上下文中可能发生的操作就是添加、移动或者移除一个矩形。</p>
<p>第二个上下文是这个矩形自己。你可以改变它的颜色和圆角。我决定追踪展板的背景色以及圆角，忽略掉它在展板中的位置。</p>
<p>这样你就可以添加一个矩形，移动它，改变它的颜色和圆角，使用<code>undo</code>来撤销移动操作但是不会撤销掉背景色和圆角的改变。你所使用的上下文数量取决于你的应用是怎么样的。</p>
<h2 id="响应链">响应链</h2><p>每一个<code>UIView</code>对象继承自<code>UIResponder</code>类型，这个类定义了响应对象的接口并且处理事件。</p>
<p><code>UIResponder</code>类声明了<code>undoManager</code>属性。当应用接收到<code>undo</code>事件，<code>UIResponder</code>搭建起响应者链并通过<code>undoManager</code>返回一个<code>NSUndoManager</code>类型的对象来找到这个响应者。找到的第一个响应者将被用来处理<code>undo</code>或者<code>redo</code>操作。</p>
<p>为了使用响应者链你需要重载<code>canBecomeFirstResponder()</code>属性并且设置返回值为<code>true</code>，然后通过调用<code>becomeFirstResponder()</code>方法使持有<code>undoManager</code>的对象成为第一响应者。如果你已经正确设置好了一切，可以执行一个摇晃手势，应用会出现一个警告框询问你是否要执行<code>undo</code>操作。</p>
<p><img src="/img/articles/ios-undo-and-redo-with-nsundomanager/undo-event.png1447290437.6564598" alt="图片二.png"></p>
<h2 id="示例代码">示例代码</h2><p>当我写这个示例代码的时候我注意自己花费了很多时间去考虑“具有唯一目的”的方法。当你需要支持撤销和重做操作时这其实很重要，因为你调用那些方法就是出于特定的目的。</p>
<p>下面的示例代码来自那个示例应用，它展示了在展板中的添加，移除以及移动操作都是怎么实现的。下面是所有与<code>undo manager</code>相关的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// MARK: Actions on Figures</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">addFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    registerUndoAddFigure(figure)</span><br><span class="line">    </span><br><span class="line">    boardView.addSubview(figure)</span><br><span class="line">    figures.append(figure)</span><br><span class="line">    </span><br><span class="line">    updateUndoAndRedoButtons()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">removeFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    registerUndoRemoveFigure(figure)</span><br><span class="line">    </span><br><span class="line">    figure.removeFromSuperview()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> index = figures.indexOf(figure) &#123;</span><br><span class="line">        figures.removeAtIndex(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">moveFigure</span><span class="params">(figure: FigureView, center: CGPoint)</span></span> &#123;</span><br><span class="line">    registerUndoMoveFigure(figure)</span><br><span class="line">    figure.center = center</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// MARK: Undo Manager</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">canBecomeFirstResponder</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _undoManager = <span class="type">NSUndoManager</span>()</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> undoManager: <span class="type">NSUndoManager</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _undoManager</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">observeUndoManager</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">NSNotificationCenter</span>.defaultCenter().addObserver(<span class="keyword">self</span>, selector: <span class="type">Selector</span>(<span class="string">"updateUndoAndRedoButtons"</span>), name: <span class="type">NSUndoManagerDidUndoChangeNotification</span>, object: undoManager)</span><br><span class="line">    <span class="type">NSNotificationCenter</span>.defaultCenter().addObserver(<span class="keyword">self</span>, selector: <span class="type">Selector</span>(<span class="string">"updateUndoAndRedoButtons"</span>), name: <span class="type">NSUndoManagerDidRedoChangeNotification</span>, object: undoManager)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">@objc</span> <span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">updateUndoAndRedoButtons</span><span class="params">()</span></span> &#123;</span><br><span class="line">    undoButton.enabled = undoManager.canUndo == <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> undoManager.canUndo &#123;</span><br><span class="line">        undoButton.setTitle(undoManager.undoMenuTitleForUndoActionName(undoManager.undoActionName), forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        undoButton.setTitle(undoManager.undoMenuItemTitle, forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    redoButton.enabled = undoManager.canRedo == <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> undoManager.canRedo &#123;</span><br><span class="line">        redoButton.setTitle(undoManager.redoMenuTitleForUndoActionName(undoManager.redoActionName), forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        redoButton.setTitle(undoManager.redoMenuItemTitle, forState: .<span class="type">Normal</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// MARK: Undo Manager Actions</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">registerUndoAddFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    undoManager.prepareWithInvocationTarget(<span class="keyword">self</span>).removeFigure(figure)</span><br><span class="line">    undoManager.setActionName(<span class="string">"Add Figure"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">registerUndoRemoveFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    undoManager.prepareWithInvocationTarget(<span class="keyword">self</span>).addFigure(figure)</span><br><span class="line">    undoManager.setActionName(<span class="string">"Remove Figure"</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">registerUndoMoveFigure</span><span class="params">(figure: FigureView)</span></span> &#123;</span><br><span class="line">    undoManager.prepareWithInvocationTarget(<span class="keyword">self</span>).moveFigure(figure, center: figure.center)</span><br><span class="line">    undoManager.setActionName(<span class="string">"Move to <span class="subst">\(figure.center)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我创建了一些<code>undo</code>相关的简单方法。这样做效果很好，注册<code>undo</code>操作的逻辑和操作本身的逻辑相分离，代码精简为一句函数调用。</p>
<p>我决定放弃使用<code>registerUndoWithTarget(_:selector:object:)</code>方法，因为<code>Selector</code>是一个字符串，这样做很危险。而<code>prepareWithInvocationTarget(_:)</code>看起来更好一些，既安全又便于使用。</p>
<p>不过，当你需要设置属性时可能要用带<code>Selector</code>的方法。</p>
<p>你需要直接调用想要记录的方法，但是这样做不能设置属性（因为只能调用方法）。有两种解决方法：第一种是添加类似<code>setPropertyName(_:)</code>的方法，第二种是使用<code>registerUndoWithTarget(_:selector:object:)</code>方法并将<code>Selector</code>设置为<code>setPropertyName:</code>，作为参数传入。</p>
<h2 id="结论">结论</h2><p><code>NSUndoManager</code>是一种强大的机制，我们可以简单地向应用中加入<code>undo</code>和<code>redo</code>方法。它需要你谨慎地设计应用的结构，因为你需要使用“具有唯一目的性”的方法来将用户的操作设置为<code>undo</code>或者是<code>redo</code>。但是总体来说这是个好事，不是吗？这会改善代码设计。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/ios-undo-and-redo-with-nsundomanager/">原文链接</a>，原文日期：2015-09-13<br>译者：<a href="http://blog.csdn.net/yake_099">Yake</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="undefined"></a></p>
</blockquote>
<p>在相当长的一段时间内 NSUndoManager 对我来说都是一个很神秘的东西。我想学习使用它，但是一直没有时间。一直到今天，我写了一个简单的应用，这个应用创建了一个可以移动的矩形，并且还可以修改矩形的属性，例如背景色或者圆角。</p>]]>
    
    </summary>
    
      <category term="Tomasz Szulc" scheme="http://swiftggteam.github.io/tags/Tomasz-Szulc/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[好代码是怎样炼成的]]></title>
    <link href="http://swiftggteam.github.io/2015/11/09/what-makes-good-code/"/>
    <id>http://swiftggteam.github.io/2015/11/09/what-makes-good-code/</id>
    <published>2015-11-09T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/10/28/what-makes-good-code/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-28<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>最近有个人发 Email 问我：“好代码是怎样炼成的”。之前，我身体有点不舒服，所以我漫无边际的说了下。现在好多了，所以我想分享一下以下这些想法，因为我觉得这些对于这次重要的讨论来说是一个有趣的起点。</p>
<a id="more"></a>
<p>当时，我写道：</p>
<ul>
<li><p>好代码并不只是可以编译而已，它还会沟通。它会和现在的你交谈，也会和以后维护代码的你交谈。它对于你的团队和任何外部来查看的人来说都是可以被理解的。</p>
</li>
<li><p>好代码对可靠性和可测试性的要求胜过聪明的小技巧。如果需要清晰的表明自己的意图和结果，好代码会更倾向于使用一个或多个额外的步骤来表达。</p>
</li>
<li><p>好代码也考虑其使用程度，一段代码一次跑一百万遍和只跑一遍的要求是不同的，就好比在树林里的一棵树和孤零零的一棵树那样。</p>
</li>
<li><p>好代码即使被分解了也可以成为合理的单元，而不是大规模的单一的实现。</p>
</li>
<li><p>好代码不仅仅是实现一次或两次，而且还要审查和重构。这才有可能让它成为最好的和最健壮的实现。</p>
</li>
<li><p>好代码会考虑到全球化，并提供给不同文化的潜在用户。添加国际化以及相关的可访问性，这些真的是代码层面的事情，而不是嘴上说说的马后炮而已。</p>
</li>
<li><p>好代码不仅仅考虑今天具体运行在什么环境上，也考虑如何适应这些可能随时间变化的环境。</p>
</li>
</ul>
<p>以上是我想到的，你对我关于这个“好代码是怎样炼成的”话题列出的清单有什么想添加、删除、修改的？期待看到你们的想法。</p>
<p><strong>更新</strong></p>
<p>Seivan Heidari 建议添加：好代码会在作为 API 为外面调用时，不提供内部的实现细节。</p>
<p>Anonymous 建议添加：好代码是浑然天成的。好代码可以照你需要的样子执行，且能被按时交付，其余的都是扯蛋哈哈。</p>
<p>Dave DeLong 建议添加：好代码会让读的人产生敬畏，并使读的人受到启发从而也去写自己的好代码。</p>
<p>Paul Cantrell 建议添加：好代码会注意权衡。它会根据工程来权衡,而不是按照绝对的教条。它也不会让工具或技术成为组内状态标记(in-group status markers)。</p>
<p>Rainer Brockerhoff 建议添加：好代码可以被很轻松的重用（即使是在几年之后），也能只用几行代码来进行扩展或改编。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/10/28/what-makes-good-code/">原文链接</a>，原文日期：2015-10-28<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>最近有个人发 Email 问我：“好代码是怎样炼成的”。之前，我身体有点不舒服，所以我漫无边际的说了下。现在好多了，所以我想分享一下以下这些想法，因为我觉得这些对于这次重要的讨论来说是一个有趣的起点。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[If-Let 赋值运算符]]></title>
    <link href="http://swiftggteam.github.io/2015/11/06/if-let-assignment/"/>
    <id>http://swiftggteam.github.io/2015/11/06/if-let-assignment/</id>
    <published>2015-11-06T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Weston Hanners，<a href="http://www.alloc-init.com/2015/10/if-let-assignment/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-29<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>(AKA：你希望使用一个自定义操作符)</p>
<p>有多少次你是以这种匹配模式实现的呢？</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> value = someOptionalValue <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">self</span>.value = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我一直使用这种方式进行JSON数据解析或者NSCoding的实现。但我觉得这对于Swift来说有点啰嗦，坚信肯定存在某种更好的方式。</p>
<p><a href="http://nshipster.com/swift-operators/" target="_blank" rel="external">NSHipster</a>提出自定义逻辑或赋值运算符(<code>||=</code>)，这看起来很不错。不管怎样，它似乎还未为泛型实现(作者:如果这里我理解错了，请告诉我).我想我可以先试一试…</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ||= &#123; <span class="keyword">associativity</span> <span class="keyword">right</span> <span class="keyword">precedence</span> <span class="number">90</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 译者注: 测试只有加上&lt;T&gt;才能正常运行</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> ||= <span class="generics">&lt;T&gt;</span><span class="params">(<span class="keyword">inout</span> <span class="keyword">left</span>: T, <span class="keyword">right</span>: T?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = <span class="keyword">right</span> &#123;</span><br><span class="line">        <span class="keyword">left</span> = <span class="keyword">right</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上它能够很好地工作，我将原代码简化如下:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.value ||= someOptionalValue <span class="keyword">as</span>? <span class="type">String</span></span><br></pre></td></tr></table></figure>
<p>或许这有点微不足道，但是当你需要连续处理一系列任务时，这节省了大量代码，变得更具可读性。</p>
<p>还有件事…我依然尝试去弄清楚这是怎么回事，但我最终定义了第二个方法用于可选类型赋值。而唯一的不同是现在左侧参数类型为<code>T?</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> ||= <span class="generics">&lt;T&gt;</span><span class="params">(<span class="keyword">inout</span> <span class="keyword">left</span>: T?, <span class="keyword">right</span>: T?)</span></span> &#123; <span class="comment">// The left param is now Optional</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = <span class="keyword">right</span> &#123;</span><br><span class="line">        <span class="keyword">left</span> = <span class="keyword">right</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someOptionalString: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">someOptionalString ||= newValue <span class="comment">// Will assign when newValue is not optional</span></span><br></pre></td></tr></table></figure>
<p>如果你有兴趣看看这个，请点击<a href="http://www.alloc-init.com/wp-content/uploads/2015/10/if-let-operator.playground.zip" target="_blank" rel="external">Playground</a>下载。</p>
<p>温馨提示: 文章测试环境是Swift2.0。</p>
<p><strong>更新日志 11/01/2015:</strong></p>
<p>twitter上有人提醒我: ruby中<code>||=</code>等价于<code>left = left || right</code>，与我想要实现的<code>left = right || left</code>不同。我对这种用法不是很了解，为了避免混淆，我可能使用另外一个操作符<code>?=</code>替代。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ?= &#123; <span class="keyword">associativity</span> <span class="keyword">right</span> <span class="keyword">precedence</span> <span class="number">90</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> ?=<span class="generics">&lt;T&gt;</span><span class="params">(<span class="keyword">inout</span> <span class="keyword">left</span>: T, <span class="keyword">right</span>: T?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">right</span> &#123;</span><br><span class="line">        <span class="keyword">left</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> ?=<span class="generics">&lt;T&gt;</span><span class="params">(<span class="keyword">inout</span> <span class="keyword">left</span>: T?, <span class="keyword">right</span>: T?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> value = <span class="keyword">right</span> &#123;</span><br><span class="line">        <span class="keyword">left</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Weston Hanners，<a href="http://www.alloc-init.com/2015/10/if-let-assignment/">原文链接</a>，原文日期：2015-10-29<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>(AKA：你希望使用一个自定义操作符)</p>
<p>有多少次你是以这种匹配模式实现的呢？</p>]]>
    
    </summary>
    
      <category term="Weston Hanners" scheme="http://swiftggteam.github.io/tags/Weston-Hanners/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift Playground: 三门问题的解法]]></title>
    <link href="http://swiftggteam.github.io/2015/11/05/swift-playground-the-monty-hall-problem/"/>
    <id>http://swiftggteam.github.io/2015/11/05/swift-playground-the-monty-hall-problem/</id>
    <published>2015-11-05T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-playground-the-monty-hall-problem/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-27<br>译者：<a href="https://github.com/SergioChan" target="_blank" rel="external">SergioChan</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<p>三门问题是一个超级让人摸不着头脑的概率问题。我们会在 Swift Playground 里来演示它的解法，而不是通过枯燥的数学解释。</p>
<a id="more"></a>
<h2 id="三门问题">三门问题</h2><p>这个问题的核心很简单。在 1990 年的<a href="https://en.wikipedia.org/wiki/Parade_(magazine" target="_blank" rel="external">Parade</a>)杂志中是这么解释的：</p>
<blockquote>
<p>假设你正在参加一个游戏节目，需要在三扇门中选择一扇。其中一扇后面有一辆车，其余两扇后面则是羊。你选择了一扇门，假设是 1 号门，主持人知道门后面是什么，他开启了另一扇后面有羊的门，假设是3号门。然后他问你：“你想选择 2 号门吗？”这时候你改变决策是有利的吗？</p>
</blockquote>
<p>实际上，结果是有利的。如果你选择另外一扇门，你就有2/3的概率赢得汽车。相反，如果你不改变你的选择，赢得汽车的概率就只有 1/3。当然你可以从数学的角度去证明，但是这里我们希望验证一下。</p>
<h2 id="算法">算法</h2><p>算法很简单。首先，你选择一扇门。然后主持人打开一扇后面有羊的门。如果你的第一次选择就选中了有车的门，他就要在剩下两扇门中随机选择一扇开启。如果你的第一次选择选中的是有羊的门，他就要把剩下一扇也是羊的门打开。最后，你是否改变选择取决于你采取的策略。</p>
<h2 id="Playground">Playground</h2><p>我们来编写一个简单的 Playground 程序。我们会对每种选择策略执行 100000 次测试来得出大致的概率。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Change</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Stay</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">play</span><span class="params">(strategy:Strategy,repeats:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wins = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;repeats &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> car = <span class="type">Int</span>(arc4random_uniform(<span class="number">3</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> playerChoice = <span class="type">Int</span>(arc4random_uniform(<span class="number">3</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> strategy == <span class="type">Strategy</span>.<span class="type">Change</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> playerChoice == car &#123;</span><br><span class="line">                <span class="keyword">var</span> remainingDoors = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">                remainingDoors.removeAtIndex(playerChoice)</span><br><span class="line">                playerChoice = remainingDoors[<span class="type">Int</span>(arc4random_uniform(<span class="number">2</span>))]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                playerChoice = car</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> car == playerChoice &#123;</span><br><span class="line">            wins++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> wins</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> repeats = <span class="number">100000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> winsStrategyChange = play(.<span class="type">Change</span>, repeats: repeats)</span><br><span class="line"><span class="keyword">var</span> winsStrategyStay = play(.<span class="type">Stay</span>, repeats: repeats)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">var</span> quoteStrategyChange = <span class="type">Double</span>(winsStrategyChange) / <span class="type">Double</span>(repeats)</span><br><span class="line"><span class="keyword">var</span> quoteStrategyStay = <span class="type">Double</span>(winsStrategyStay) / <span class="type">Double</span>(repeats)</span><br></pre></td></tr></table></figure>
<h2 id="结果">结果</h2><p>每次运行这个 Playground 得到的结果都不完全相同，但是都很接近的。例如，其中一次结果是：</p>
<ul>
<li>改变选择且赢得汽车的次数: 66,461</li>
<li>不改变选择且赢得汽车的次数: 33,509</li>
<li>改变选择且赢得汽车的概率: 0,66461</li>
<li>不改变选择且赢得汽车的概率: 0,33509</li>
</ul>
<p>结果正如理论所预计的那样。如果你不改变你的选择，你就只有百分之 33 的概率赢得汽车。如果你改变了你的选择，这个概率就上升到了百分之 66。</p>
<h2 id="结论">结论</h2><p>在 Playground 中做实验是十分有趣的。在这种情况下，我们可以验证那些乍一看摸不着头脑的理论。</p>
<h2 id="引用">引用</h2><p>图片: @ Lim ChewHow / shutterstock.com</p>
<p>维基百科: <a href="https://en.wikipedia.org/wiki/Monty_Hall_problem" target="_blank" rel="external">Monty Hall Problem</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-playground-the-monty-hall-problem/">原文链接</a>，原文日期：2015-09-27<br>译者：<a href="https://github.com/SergioChan">SergioChan</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<p>三门问题是一个超级让人摸不着头脑的概率问题。我们会在 Swift Playground 里来演示它的解法，而不是通过枯燥的数学解释。</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift：使用本地闭包]]></title>
    <link href="http://swiftggteam.github.io/2015/11/04/swift-using-local-closures/"/>
    <id>http://swiftggteam.github.io/2015/11/04/swift-using-local-closures/</id>
    <published>2015-11-04T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-using-local-closures/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-22<br>译者：<a href="http://www.swiftyper.com/" target="_blank" rel="external">小锅</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>闭包一般是用来作为函数的参数。不过某些情况下，使用本地闭包也是十分方便的。</p>
<p>假设有一个 <code>ViewController</code>，里面包含了两种 GUI 模式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">GUIMode</span> </span>&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Mode1</span></span><br><span class="line">	<span class="keyword">case</span> <span class="type">Mode2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对于每一种 GUI 模式，我们都需要对三个 label 设置某些属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> guiMode: <span class="type">GUIMode</span> = .<span class="type">Mode1</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;              </span><br><span class="line">        <span class="keyword">switch</span> guiMode &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Mode1</span>:</span><br><span class="line">            label1.text = <span class="string">"1"</span></span><br><span class="line">            label1.textColor = <span class="type">UIColor</span>.redColor()</span><br><span class="line">            label1.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size: <span class="number">10</span>)</span><br><span class="line">                </span><br><span class="line">            label2.text = <span class="string">"2"</span></span><br><span class="line">            label2.textColor = <span class="type">UIColor</span>.blueColor()</span><br><span class="line">            label2.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size: <span class="number">12</span>)</span><br><span class="line">                </span><br><span class="line">            label3.text = <span class="string">"3"</span></span><br><span class="line">            label3.textColor = <span class="type">UIColor</span>.yellowColor()</span><br><span class="line">            label3.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size: <span class="number">11</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Mode2</span>:</span><br><span class="line">            label1.text = <span class="string">"4"</span></span><br><span class="line">            label1.textColor = <span class="type">UIColor</span>.yellowColor()</span><br><span class="line">            label1.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size: <span class="number">11</span>)</span><br><span class="line">                </span><br><span class="line">            label2.text = <span class="string">"5"</span></span><br><span class="line">            label2.textColor = <span class="type">UIColor</span>.blueColor()</span><br><span class="line">            label2.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size: <span class="number">9</span>)</span><br><span class="line">                </span><br><span class="line">            label3.text = <span class="string">"6"</span></span><br><span class="line">            label3.textColor = <span class="type">UIColor</span>.brownColor()</span><br><span class="line">            label3.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size: <span class="number">10</span>)</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有很多重复的代码。你可以创建一个函数，在函数里对一个 label 的属性进行设置，但是这个函数我们基本不会在别的地方再次使用。因此，在这种情况下使用闭包就是一个相当不错的解决方案：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> guiMode: <span class="type">GUIMode</span> = .<span class="type">Mode1</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;      </span><br><span class="line">        <span class="keyword">let</span> styleLabel: (label:<span class="type">UILabel</span>,text:<span class="type">String</span>,color:<span class="type">UIColor</span>,size:<span class="type">CGFloat</span>) -&gt; () = &#123; (label,text,color,size) <span class="keyword">in</span></span><br><span class="line">            label.text = text</span><br><span class="line">            label.textColor = color</span><br><span class="line">            label.font = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue"</span>, size:size)</span><br><span class="line">        &#125;</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">switch</span> guiMode &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Mode1</span>:</span><br><span class="line">            styleLabel(label: label1, text: <span class="string">"1"</span>, color: <span class="type">UIColor</span>.redColor(), size:<span class="number">10</span>)</span><br><span class="line">            styleLabel(label: label2, text: <span class="string">"2"</span>, color: <span class="type">UIColor</span>.blueColor(), size:<span class="number">12</span>)</span><br><span class="line">            styleLabel(label: label3, text: <span class="string">"3"</span>, color: <span class="type">UIColor</span>.yellowColor(), size:<span class="number">11</span>)</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Mode2</span>:</span><br><span class="line">            styleLabel(label: label1, text: <span class="string">"4"</span>, color: <span class="type">UIColor</span>.yellowColor(), size:<span class="number">11</span>)</span><br><span class="line">            styleLabel(label: label2, text: <span class="string">"5"</span>, color: <span class="type">UIColor</span>.blackColor(), size:<span class="number">9</span>)</span><br><span class="line">            styleLabel(label: label3, text: <span class="string">"6"</span>, color: <span class="type">UIColor</span>.brownColor(), size:<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来，代码就少了很多，看起来也更加简洁了。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-using-local-closures/">原文链接</a>，原文日期：2015-10-22<br>译者：<a href="http://www.swiftyper.com/">小锅</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>闭包一般是用来作为函数的参数。不过某些情况下，使用本地闭包也是十分方便的。</p>
<p>假设有一个 <code>ViewController</code>，里面包含了两种 GUI 模式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">GUIMode</span> </span>&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Mode1</span></span><br><span class="line">	<span class="keyword">case</span> <span class="type">Mode2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WatchConnectivity 介绍：告别加载等待]]></title>
    <link href="http://swiftggteam.github.io/2015/11/03/watchconnectivity-introduction-say-goodbye-to-the-spinner/"/>
    <id>http://swiftggteam.github.io/2015/11/03/watchconnectivity-introduction-say-goodbye-to-the-spinner/</id>
    <published>2015-11-03T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/watchconnectivity-introduction-say-goodbye-to-the-spinner/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-21<br>译者：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在 WatchOS 2 上最有价值的新特性就是<code>WatchConnectivity</code>，虽然用户可能看不到，但是这个特性能让你的 WatchOS 应用更加好用。</p>
<a id="more"></a>
<p><code>WatchConnectivity</code>是 WatchOS 2 中的新框架，用于 Watch 应用和 iOS 设备传输数据的。<code>WatchConnectivity</code> 关键的部分是，它使你的应用程序在用户<strong>查看之前</strong>就拿到必要的数据。这意味着用户想要看你的应用时，他们希望马上看到想要的数据，而不是愚蠢的加载等待。</p>
<p>毕竟， Apple Watch 是一个移动中使用的设备。用户们可能想要看一两秒在 iOS 应用上超级可爱的刷新动画，但显然他们不会忍受在手表上看到这样的动画。设想一下，如果用户每次在他们常规的手表上查看时间，引入眼帘的是一个加载等待界面，那将会非常愚蠢，同理，你的应用如果这么做也一样愚蠢。</p>
<p>现在你不必再担心了，<code>WatchConnectivity</code>完全可以解决这个难题，它可以毫无压力地传输你应用上的数据到 Watch 应用上。整个过程都是无缝透明的，以至于你的用户都察觉不到发生了什么。</p>
<p>那么就让我们一探究竟吧！<code>WatchConnectivity</code>有两个部分-后台传输（<code>background transfers</code>）和交互式消息（<code>interactive messaging</code>）。我将会在未来的教程里探究它的每一个部分的更多细节，但是这里只是一个概述，思考传输时应该使用哪一种传输模型：</p>
<h2 id="后台传输">后台传输</h2><p>在你的 iOS 或者 Watch 应用不需要马上获得信息时使用后台传输。当然，在你的用户抬起他们的手腕时查看应用里面的最新数据时，它会显示数据，但是此前他们不需要任何数据。</p>
<p>因为后台传输用于传输不是立刻使用数据， Apple 认为使用后台传输的最佳时机是当你需要根据电池容量、网络连接、使用模式传输数据等的时候。</p>
<p>在你的 iOS 和 Watch 应用之间的后台传输数据有三种方式：</p>
<h3 id="应用上下文">应用上下文</h3><p>当你的 Watch 应用只需要展示最新的信息时，使用应用上下文。例如，当你的<code>Glance</code>显示比分时，用户不会在意两分钟以前的比分是 4-2 ，他们只在乎现在的比分是 4-4 。另一个例子是交通运输应用，用户不关心末班车五分钟前离开了车站，他们只关心下一辆公交车什么时候到。</p>
<p>所以应用上下文的工作方式是把数据块排成队列，并且如果在传输之前有一个新的可用数据块，原始的数据将会被新数据取代，然后再传输这个数据，除非它又被其它更新的数据块代替。</p>
<p><a href="http://natashatherobot.com/watchconnectivity-application-context/" target="_blank" rel="external">Tutorial: Sharing The Latest Data via Application Context</a> </p>
<h3 id="用户信息">用户信息</h3><p>用户信息是用于当你需要确认你的所有数据是被传输过的（不像应用上下文）。用户信息的数据是在一个先进先出（<code>FIFO (first-in-first-out)</code>） 队列中顺序传输，所以没有东西被覆盖。</p>
<p>一个例子是你可能想要在一个文本消息的应用中使用它-对于一个完整的会话和上下文环境来说，最后一条信息和第一条信息是同等重要的。如果用户更新了他们简介信息中的一小部分，Watch 简介中也应该同步这些更新。</p>
<h3 id="文件传输">文件传输</h3><p>顾名思义，在你的 iOS 和 Watch 应用之间使用文件传输去传输文件，例如图片或者<code>plists</code>。文件传输的优点是你可以包含一个<code>meta-data</code>字典，其中包含你的文件名和数据，比如说这样你就可以排序你的图片。</p>
<h2 id="交互式消息">交互式消息</h2><p>使用交互式消息能够实时地在你的 iOS 和 Watch 应用之间传输数据！一个绝佳的示例就是<a href="https://github.com/NilStack/WappyBird" target="_blank" rel="external">《像素鸟 Flappy Bird》应用的 Watch 版本和 iPhone 版本</a>-用户点击 Watch，但是小鸟在手机上飞。按钮点击通过交互式消息被传输到手机上了。</p>
<p><img src="/img/articles/watchconnectivity-introduction-say-goodbye-to-the-spinner/flappybirdwatch.gif1447732453.5579317" alt="Flappy Bird"></p>
<p>一个需要注意的地方是，交互式消息需要 iPhone 开启<code>&quot;reachable&quot;</code>状态。根据 Apple 文档的解释是：</p>
<blockquote>
<p>Watch 应用的可达性需要配对的 iOS 设备在重启之后至少解锁一次。</p>
</blockquote>
<h2 id="总结">总结</h2><p>我爱死<a href="http://www.kristinathai.com/watchos-2-how-to-communicate-between-devices-using-watch-connectivity/" target="_blank" rel="external">Kristina Thai’s WatchConnectivity post</a> 里面区别传输的图解了：</p>
<p><img src="/img/articles/watchconnectivity-introduction-say-goodbye-to-the-spinner/Screen-Shot-2015-09-21-at-8.17.29-AM.png1447732460.5724132" alt="这里写图片描述"></p>
<p>同时，本文参考了 Curtis Herbert 的文章 <a href="http://blog.curtisherbert.com/data-synchronization-with-watchos/" target="_blank" rel="external">Getting Data to Your WatchOS 2 App</a> 中最后的 Watch OS 2 observations 部分。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/watchconnectivity-introduction-say-goodbye-to-the-spinner/">原文链接</a>，原文日期：2015-09-21<br>译者：<a href="http://daizi.me">小袋子</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在 WatchOS 2 上最有价值的新特性就是<code>WatchConnectivity</code>，虽然用户可能看不到，但是这个特性能让你的 WatchOS 应用更加好用。</p>]]>
    
    </summary>
    
      <category term="Natasha The Robot" scheme="http://swiftggteam.github.io/tags/Natasha-The-Robot/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
      <category term="WatchOS 2" scheme="http://swiftggteam.github.io/categories/WatchOS-2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WatchConnectivity：学习 WCSession]]></title>
    <link href="http://swiftggteam.github.io/2015/11/02/watchconnectivity-say-hello-to-wcsession/"/>
    <id>http://swiftggteam.github.io/2015/11/02/watchconnectivity-say-hello-to-wcsession/</id>
    <published>2015-11-01T16:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/watchconnectivity-say-hello-to-wcsession/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-21<br>译者：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在读这篇文章之前，请检查一下你是否已经学习了之前两篇关于<code>WatchOS 2</code>的文章：</p>
<ul>
<li><a href="http://natashatherobot.com/watchos-2-hello-world/" target="_blank" rel="external">WatchOS 2: Hello, World</a></li>
<li><a href="http://natashatherobot.com/watchconnectivity-introduction-say-goodbye-to-the-spinner/" target="_blank" rel="external">WatchConnectivity Introduction: Say Goodbye To The Spinner</a></li>
</ul>
<p><code>WCSession</code>就是<code>WatchConnectivity</code>的魔力源泉，所以让我们赶紧深挖它吧！</p>
<a id="more"></a>
<p><code>WCSession.defaultSession()</code>会返回<code>WCSession</code>的单例，用于在 iOS 和 Watch 应用之间传输数据。但是，在使用<code>WCSession</code>时仍有一些值得注意的地方。</p>
<p>首先，你必须给<code>session</code>设置一个<code>delegate</code>并启动它。</p>
<blockquote>
<p>“默认的<code>session</code>用于两个对应应用的通信（例如 iOS 应用和它的原生 WatchKit 扩展）。这个<code>session</code>提供发送、接收和追踪状态的方法。</p>
<p>启动一个应用时，应该在默认的<code>session</code>上设置一个<code>delegate</code>并启动它。这将允许系统填充状态属性和提供任何优秀的背景传输。”—— Apple 文档说明。</p>
</blockquote>
<p>所以你的代码应该写成这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> session = <span class="type">WCSession</span>.defaultSession()</span><br><span class="line">session.delegate = <span class="keyword">self</span></span><br><span class="line">session.activateSession()</span><br></pre></td></tr></table></figure>
<p>在这里，我推荐将你的<code>WCSession</code>作为一个单例，这样就可以在应用中随意使用它：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> WatchConnectivity</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note that the WCSessionDelegate must be an NSObject </span></span><br><span class="line"><span class="comment">// So no, you cannot use the nice Swift struct here!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchSessionManager</span>: <span class="title">NSObject</span>, <span class="title">WCSessionDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Instantiate the Singleton</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedManager = <span class="type">WatchSessionManager</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Keep a reference for the session, </span></span><br><span class="line">    <span class="comment">// which will be used later for sending / receiving data</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> session = <span class="type">WCSession</span>.defaultSession()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Activate Session</span></span><br><span class="line">    <span class="comment">// This needs to be called to activate the session before first use!</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">startSession</span><span class="params">()</span></span> &#123;</span><br><span class="line">        session.delegate = <span class="keyword">self</span></span><br><span class="line">        session.activateSession()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在你可以在<code>AppDelegate</code>的<code>application:didFinishLaunchingWithOptions</code>方法中启动你的<code>session</code>，并且可以在应用的任意位置使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// truncated...</span></span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication,</span><br><span class="line">        didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Set up and activate your session early here!</span></span><br><span class="line">        <span class="type">WatchSessionManager</span>.sharedManager.startSession()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// truncated...</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是启动<code>session</code>是远远不够的。你需要通过<code>WCSession</code>的多重检查，这样你的应用就不需要做额外的格式化传输数据工作。</p>
<h1 id="检查设备是否支持">检查设备是否支持</h1><blockquote>
<p>检查 iOS 设备是否支持 session，WatchOS 也是支持 session 的。</p>
</blockquote>
<p>如果你有一个通用应用，那就需要注意，例如iPad 不支持<code>WCSession</code>（因为 iPad 不能和 Watch 配对）。因此确保在 iOS 项目中做<code>isSupported()</code>检查：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="type">WCSession</span>.isSupported() &#123;</span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">WCSession</span>.defaultSession()</span><br><span class="line">    session.delegate = <span class="keyword">self</span></span><br><span class="line">    session.activateSession()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这意味着你的<code>WatchSessionManager</code>单例需要适应不支持<code>WCSession</code>的场景（使用可选值）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Modification to the WatchSessionManager in the iOS app only</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchSessionManager</span>: <span class="title">NSObject</span>, <span class="title">WCSessionDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// truncated ... see above section</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// the session is now an optional, since it might not be supported</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> session: <span class="type">WCSession</span>? = <span class="type">WCSession</span>.isSupported() ? <span class="type">WCSession</span>.defaultSession() : <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// starting a session has to now deal with it being an optional</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">startSession</span><span class="params">()</span></span> &#123;</span><br><span class="line">        session?.delegate = <span class="keyword">self</span></span><br><span class="line">        session?.activateSession()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Watch_相关的_iOS_App_状态">Watch 相关的 iOS App 状态</h1><p>如果你从 iOS 应用发送数据到 Watch，你需要做一些额外的检查，这样当 Watch 处于无法接受数据的状态时，你就不会浪费 CPU 资源去处理用于传输的数据。</p>
<p><strong>是否配对</strong></p>
<p>显然，为了从 iOS 设备传输数据到 Watch，用户必须有一个 Watch 并且和 iOS 设备配对。</p>
<p><strong>是否安装 Watch 应用</strong></p>
<p>一个用户可能有一对设备，当然可以选择删除手表中的应用，所以为了数据传输，你需要检查你的应用确实有安装在所配对的 Apple Watch 上面。</p>
<p>如果用户有一对设备但是没有对应的应用，那你就可以在合适的时机向用户推荐你的应用，他很可能会安装你的应用。</p>
<p>为了让这些检查更加简单，并且能够在应用中随意使用，我喜欢在 iOS 应用中创建一个<code>validSession</code>变量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Modification to the WatchSessionManager in the iOS app only</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchSessionManager</span>: <span class="title">NSObject</span>, <span class="title">WCSessionDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// truncated... see above</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> session: <span class="type">WCSession</span>? = <span class="type">WCSession</span>.isSupported() ? <span class="type">WCSession</span>.defaultSession() : <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Add a validSession variable to check that the Watch is paired</span></span><br><span class="line">    <span class="comment">// and the Watch App installed to prevent extra computation </span></span><br><span class="line">    <span class="comment">// if these conditions are not met.</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">// This is a computed property, since the user can pair their device and / or</span></span><br><span class="line">    <span class="comment">// install your app while using your iOS app, so this can become valid  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> validSession: <span class="type">WCSession</span>? &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// paired - the user has to have their device paired to the watch</span></span><br><span class="line">        <span class="comment">// watchAppInstalled - the user must have your watch app installed</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Note: if the device is paired, but your watch app is not installed</span></span><br><span class="line">        <span class="comment">// consider prompting the user to install it for a better experience</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> session = session <span class="keyword">where</span> session.paired &amp;&amp; session.watchAppInstalled &#123;</span><br><span class="line">            <span class="keyword">return</span> session</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// truncated... see above</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>并发是否可用</strong></p>
<p>最后，如果你在应用中有使用并发，你必须检查并发是否可用。我不会在<code>WatchConnectivity</code>教程中介绍过多并发的细节，但是如果你想要知道更多，可以观看超级有用和全面的 <a href="https://developer.apple.com/videos/wwdc/2015/?id=209" target="_blank" rel="external">WWDC 2015 Creating Complications with ClockKit session</a>。</p>
<p><strong>sessionWatchStateDidChange</strong></p>
<p>注意，如果你的 iOS 应用需要<code>WCSession</code>状态变化的信息，这里有一个 delegate 方法，专门用于通知<code>WCSession</code>的状态变化：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Called when any of the Watch state properties change */</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">sessionWatchStateDidChange</span><span class="params">(session: WCSession)</span></span> &#123;</span><br><span class="line">        <span class="comment">// handle state change here</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>例如，如果你的应用需要安装 Watch 应用，可以实现这个<code>delegate</code>方法，然后去检测你的 Watch 应用是否真正安装了，并且让用户在 iOS 应用中进行设置。</p>
<h1 id="检查设备可达状态">检查设备可达状态</h1><p>为了正确在 iOS 和 Watch 中使用<code>Interactive Messaging</code>传输数据，你需要做一些额外的工作以确保两个应用处于可达状态：</p>
<blockquote>
<p>Watch 应用的可达状态需要所配对的 iOS 设备在重启后至少解锁一次。这个属性能够用于决定 iOS 设备是否需要被解锁。如果<code>reachable</code>设为<code>NO</code>，可能是由于设备重启过，需要解锁。如果处于这种状态，Watch 将会展示一个提示框建议用户去解锁他们配对的 iOS 设备。</p>
</blockquote>
<p>在使用<code>Interactive Messaging</code>时，我喜欢给我的单例增加一个额外的<code>valideReachableSession</code>变量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MARK: Interactive Messaging</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">WatchSessionManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Live messaging! App has to be reachable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> validReachableSession: <span class="type">WCSession</span>? &#123;</span><br><span class="line">        <span class="comment">// check for validSession on iOS only (see above)</span></span><br><span class="line">        <span class="comment">// in your Watch App, you can just do an if session.reachable check</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> session = validSession <span class="keyword">where</span> session.reachable &#123;</span><br><span class="line">            <span class="keyword">return</span> session</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如果<code>session</code>是不可达的，你可以如 Apple 所建议的那样，提示用户去解锁他们的 iOS 设备。为了获知用户解锁设备，实现<code>sessionReachabilityDidChange</code>的<code>delegate</code>方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">sessionReachabilityDidChange</span><span class="params">(session: WCSession)</span></span> &#123;</span><br><span class="line">    <span class="comment">// handle session reachability change</span></span><br><span class="line">    <span class="keyword">if</span> session.reachable &#123;</span><br><span class="line">        <span class="comment">// great! continue on with Interactive Messaging</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 😥 prompt the user to unlock their iOS device</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上！现在你应该已经知道了<code>WCSession</code>的一些要领，所以我们将会学习更加好玩的部分 —— 真正使用它在 iOS 和 Watch 之间接收和发送收据！</p>
<p>你可以在 GitHub 查看完整的<a href="https://gist.github.com/NatashaTheRobot/6bcbe79afd7e9572edf6" target="_blank" rel="external">WatchSessionManager单例</a>。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/watchconnectivity-say-hello-to-wcsession/">原文链接</a>，原文日期：2015-09-21<br>译者：<a href="http://daizi.me">小袋子</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在读这篇文章之前，请检查一下你是否已经学习了之前两篇关于<code>WatchOS 2</code>的文章：</p>
<ul>
<li><a href="http://natashatherobot.com/watchos-2-hello-world/">WatchOS 2: Hello, World</a></li>
<li><a href="http://natashatherobot.com/watchconnectivity-introduction-say-goodbye-to-the-spinner/">WatchConnectivity Introduction: Say Goodbye To The Spinner</a></li>
</ul>
<p><code>WCSession</code>就是<code>WatchConnectivity</code>的魔力源泉，所以让我们赶紧深挖它吧！</p>]]>
    
    </summary>
    
      <category term="Natasha The Robot" scheme="http://swiftggteam.github.io/tags/Natasha-The-Robot/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
      <category term="WatchOS 2" scheme="http://swiftggteam.github.io/categories/WatchOS-2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊一聊单子（Monad）]]></title>
    <link href="http://swiftggteam.github.io/2015/10/30/lets-talk-about-monads/"/>
    <id>http://swiftggteam.github.io/2015/10/30/lets-talk-about-monads/</id>
    <published>2015-10-30T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/2015/10/17/lets-talk-about-monads/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-17<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles" target="_blank" rel="external">ray16897188</a>；校对：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p><a href="http://alisoftware.github.io/swift/2015/10/11/thinking-in-swift-4/" target="_blank" rel="external">之前的一篇文章</a>中，我们用<code>map</code>、<code>flatMap</code>这两种基于<code>Optional</code>和<code>Array</code>类型的方法做了很多好玩儿的事情。但你可能并没有意识到，你已经在不自知的情况下使用了单子<em>(单子，即 Monad：一个函数式编程的术语 - 译者注)</em>。那么什么是单子？</p>
<a id="more"></a>
<h3 id="什么是函子（Functors）和单子">什么是函子（Functors）和单子</h3><p>我们在<a href="http://alisoftware.github.io/swift/2015/10/11/thinking-in-swift-4/" target="_blank" rel="external">之前的一篇文章</a>中得知了<code>map</code>和<code>flatMap</code>对于<code>Array</code>和<code>Optional</code>来说有着相似的作用，甚至连函数签名都十分相似。</p>
<p>实际上这并不是一个特例：很多类型都有类似<code>map</code>和<code>flatMap</code>的方法，而这些方法都有那种类型的签名。这是一种十分常见的模式，这种模式的名字叫做<em>单子</em>。</p>
<p>你可能之前在网上看过单子这个术语(也可能叫做函子)，还看过尝试解释该术语的各种比喻。但是大部分比喻都让它更加复杂难懂。</p>
<p><strong>事实上，单子和函子是非常简单的概念。</strong>它可以最终归结为：</p>
<p><strong>一个函子</strong>是一种表示为<code>Type&lt;T&gt;</code>的类型，它：</p>
<ul>
<li>封装了另一种类型（类似于封装了某个<code>T</code>类型的<code>Array&lt;T&gt;</code>或<code>Optional&lt;T&gt;</code>）</li>
<li>有一个具有<code>(T-&gt;U) -&gt; Type&lt;U&gt;</code>签名的<code>map</code>方法</li>
</ul>
<p><strong>一个单子</strong>是一种类型，它：</p>
<ul>
<li>是一个函子（所以它封装了一个<code>T</code>类型，拥有一个<code>map</code>方法）</li>
<li>还有一个具有<code>(T-&gt;Type&lt;U&gt;) -&gt; Type&lt;U&gt;</code>签名的<code>flatMap</code>方法</li>
</ul>
<p>这就是对<em>单子</em>和<em>函子</em>所需要了解的一切！<strong>一个<em>单子</em>就是一种带有<code>flatMap</code>方法的类型，一个<em>函子</em>就是一种带有一个<code>map</code>方法的类型。</strong>很简单，不是么？</p>
<h3 id="各种类型的单子">各种类型的单子</h3><p>你已经学过两种既是<em>函子</em>又是<em>单子</em>的类型，它们是：<code>Array&lt;T&gt;</code>和<code>Optional&lt;T&gt;</code>。当然，这样的类型还有很多。</p>
<p>实际上这些类型的方法会有其他的名字，不限于<code>map</code>和<code>flatMap</code>。例如一个<a href="http://promisekit.org/" target="_blank" rel="external">Promise</a>也是一个单子，而它的相对应的<code>map</code>和<code>flatMap</code>方法叫做<code>then</code>。</p>
<p>仔细看一下<code>Promise&lt;T&gt;</code>的<code>then</code>方法签名，思考一下：它拿到未来返回的值<code>T</code>，进行处理，然后要么返回一个新类型<code>U</code>，要么返回一个封装了这个新类型的、新的<code>Promise&lt;U&gt;</code>… 没错，我们又一次得到了相同的方法签名，所以<code>Promise</code>实际上也是一个<code>单子</code>！</p>
<p>有很多类型都符合单子的定义。比如<code>Result</code>，<code>Signal</code>，… 你还可以想到更多（如果需要的话你甚至可以创建你自己的单子）。</p>
<p>看出相似性了吗？（为方便对比加了空格）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array, Optional, Promise, Result 都是函子</span></span><br><span class="line">   anArray     .<span class="built_in">map</span>( transform: <span class="type">T</span> -&gt;          <span class="type">U</span>  ) -&gt;    <span class="type">Array</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">anOptional     .<span class="built_in">map</span>( transform: <span class="type">T</span> -&gt;          <span class="type">U</span>  ) -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line"> aPromise     .then( transform: <span class="type">T</span> -&gt;          <span class="type">U</span>  ) -&gt;  <span class="type">Promise</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">   aResult     .<span class="built_in">map</span>( transform: <span class="type">T</span> -&gt;          <span class="type">U</span>  ) -&gt;   <span class="type">Result</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array, Optional, Promise, Result 都是单子</span></span><br><span class="line">   anArray .flatMap( transform: <span class="type">T</span> -&gt;    <span class="type">Array</span>&lt;<span class="type">U</span>&gt; ) -&gt;    <span class="type">Array</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">anOptional .flatMap( transform: <span class="type">T</span> -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt; ) -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">  aPromise    .then( transform: <span class="type">T</span> -&gt;  <span class="type">Promise</span>&lt;<span class="type">U</span>&gt; ) -&gt;  <span class="type">Promise</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">   aResult .flatMap( transform: <span class="type">T</span> -&gt;   <span class="type">Result</span>&lt;<span class="type">U</span>&gt; ) -&gt;   <span class="type">Result</span>&lt;<span class="type">U</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="把map()和flatMap()级联起来">把<code>map()</code>和<code>flatMap()</code>级联起来</h3><p>通常你还可以把这两个方法级联，这会使它们更加强大。例如，最开始你有一个<code>Array&lt;T&gt;</code>，通过使用<code>map</code>来对它做<code>转换</code>操作，得到一个<code>Array&lt;U&gt;</code>，然后对这个<code>Array&lt;U&gt;</code>再级联上一个<code>map</code>，对它做另一个<code>转换</code>操作将其转换成一个<code>Array&lt;Z&gt;</code>，等等。这会让你的代码看起来就像是在生产线上一样：把一个初始值拿来，让他经过一系列的黑盒子处理，然后得到一个最终的结果。这时你就可以说你实际上是在做<em>函数式编程</em>了！</p>
<p>下面是一个示范如何将<code>map</code>和<code>flatMap</code>的调用级联起来去做多次转换的例子。我们从一个字符串开始，把它按单词分开，然后依次做如下转换：</p>
<ol>
<li>统计每个单词的字符个数，做计数</li>
<li>把每个计数转换成一个相对应的单词</li>
<li>给每个结果加个后缀</li>
<li>对每个字符串结果做%转义</li>
<li>把每个字符串结果转换成一个<code>NSURL</code></li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formatter = <span class="type">NSNumberFormatter</span>()</span><br><span class="line">formatter.numberStyle = .<span class="type">SpellOutStyle</span></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"This is Functional Programming"</span></span><br><span class="line"><span class="keyword">let</span> translateURLs = string</span><br><span class="line">    <span class="comment">// Split the characters into words</span></span><br><span class="line">    .characters.<span class="built_in">split</span>(<span class="string">" "</span>)</span><br><span class="line">    <span class="comment">// Count the number of characters on each word</span></span><br><span class="line">    .<span class="built_in">map</span> &#123; $<span class="number">0</span>.<span class="built_in">count</span> &#125;</span><br><span class="line">     <span class="comment">// Spell out this number of chars (`stringFromNumber` can return nil)</span></span><br><span class="line">    .flatMap &#123; (n: <span class="type">Int</span>) -&gt; <span class="type">String</span>? <span class="keyword">in</span> formatter.stringFromNumber(n) &#125;</span><br><span class="line">     <span class="comment">// add " letters" suffix</span></span><br><span class="line">    .<span class="built_in">map</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>)</span> letters"</span> &#125;</span><br><span class="line">    <span class="comment">// encode the string so it can be used in an NSURL framgment after the # (the stringByAdding… method can return nil)</span></span><br><span class="line">    .flatMap &#123; $<span class="number">0</span>.stringByAddingPercentEncodingWithAllowedCharacters(.<span class="type">URLFragmentAllowedCharacterSet</span>()) &#125;</span><br><span class="line">    <span class="comment">// Build an NSURL using that string (`NSURL(string: …)` is failable: it can return nil)</span></span><br><span class="line">    .flatMap &#123; <span class="type">NSURL</span>(string: <span class="string">"https://translate.google.com/#auto/fr/<span class="subst">\($<span class="number">0</span>)</span>"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(translateURLs)</span><br><span class="line"><span class="comment">// [https://translate.google.com/#auto/fr/four%20letters, https://translate.google.com/#auto/fr/two%20letters, https://translate.google.com/#auto/fr/ten%20letters, https://translate.google.com/#auto/fr/eleven%20letters]</span></span><br></pre></td></tr></table></figure>
<p>上面这段代码可能需要你研究一会儿，尝试去理解每一个中间阶段的<code>map</code>和<code>flatMap</code>的签名是什么，并搞清楚每一步都发生了什么事。</p>
<p>但无论如何，你能看出来对于描述一系列处理流程来说，这是一种很好的方式。这种方式可以被看做是一条生产线，从<code>原材料</code>开始，然后对它做多种<code>转换</code>，最终在生产线的尽头拿到<code>成品</code>。</p>
<h3 id="结论">结论</h3><p>尽管看起来很吓人，但单子很简单。</p>
<p>但实际上，你怎么叫它们都没关系。只要你知道如果你想把一种封装类型转换成另一种，而某些类型的<code>map</code>和<code>flatMap</code>方法着实能帮到你，这就够了。</p>
<hr>
<p>这篇文章是”Swift编程思想”系列的后记。别担心，我还会写很多文章，论述 Swift 在其他应用场景下的美妙之处，不过我不会再拿这些和 ObjC 比较了（因为 Swift 真的好太多了，你现在应该完全把 ObjC 忘掉了 😄）。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/2015/10/17/lets-talk-about-monads/">原文链接</a>，原文日期：2015-10-17<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles">ray16897188</a>；校对：<a href="http://daizi.me">小袋子</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p><a href="http://alisoftware.github.io/swift/2015/10/11/thinking-in-swift-4/">之前的一篇文章</a>中，我们用<code>map</code>、<code>flatMap</code>这两种基于<code>Optional</code>和<code>Array</code>类型的方法做了很多好玩儿的事情。但你可能并没有意识到，你已经在不自知的情况下使用了单子<em>(单子，即 Monad：一个函数式编程的术语 - 译者注)</em>。那么什么是单子？</p>]]>
    
    </summary>
    
      <category term="Crunchy Development" scheme="http://swiftggteam.github.io/tags/Crunchy-Development/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 Swift 进行列表解析及其性能问题]]></title>
    <link href="http://swiftggteam.github.io/2015/10/29/list-comprehensions-and-performance-with-swift/"/>
    <id>http://swiftggteam.github.io/2015/10/29/list-comprehensions-and-performance-with-swift/</id>
    <published>2015-10-29T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Veronica Ray，<a href="http://jamesonquave.com/blog/list-comprehensions-and-performance-with-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015-08-15<br>译者：<a href="http://weibo.com/riven0951" target="_blank" rel="external">riven</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a></p>
<p>本文写于 2015.8.15 适用于 Xcode 6 和 Swift 1.2</p>
</blockquote>
<p>列表解析可以让你用更简洁的方式来创建列表。尽管列表解析没有在 Swift 的语言指南中提及，但你也可以在 Swift 中实现类似列表解析的一些操作。</p>
<a id="more"></a>
<p>如果你想创建一个对元素求平方的列表，像这样:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> squares = [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">10</span> &#123;</span><br><span class="line">    squares.append(x*x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Python 中，使用列表解析是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>
<p>在 Swift 中，你可以这样做：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squares = <span class="type">Array</span>(<span class="built_in">map</span>(<span class="number">1</span>..&lt;<span class="number">10</span>) &#123; $<span class="number">0</span> * $<span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>对列表中所有元素进行求和你可以这样做：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> square <span class="keyword">in</span> squares &#123;</span><br><span class="line">    sum = sum + square</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者使用 reduce 函数</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = squares.<span class="built_in">reduce</span>(<span class="number">0</span>, &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>对于其它语言中的列表解析，你可以使用任意的序列或者集合作为输入，而不仅仅是一个区间值。</p>
<p><a href="http://stackoverflow.com/questions/24003584/list-comprehension-in-swift" target="_blank" rel="external">你可以使用 map/reduce/filter/stride 函数创建你想要的列表类型</a></p>
<p>列表解析的两个主要优点是让代码变的更简洁和生成更快的二进制码。</p>
<p>我刚刚模拟的列表解析看起来很简洁吧。但我很好奇是否它也能产生更快的二进制码。</p>
<p><a href="https://medium.com/swift-programming/secret-of-swift-performance-fcc5d2a437a8" target="_blank" rel="external">这篇文章</a> 介绍了如何使用 Hopper 来分析 Swift 的汇编代码，Hopper 是一个 OS X 和 Linux 反编译程序。 你可以免费使用 Hopper ，不需要付任何费用。</p>
<p>没有使用列表解析的代码片段和模拟列表解析的代码片段都产生了同样的汇编代码.</p>
<p><img src="/img/articles/list-comprehensions-and-performance-with-swift/asm.png1446426438.2465854" alt="The assembly code from Hopper"></p>
<p>因为两个代码片段产生的汇编代码是一样的，所以我可以认为它们的执行时间是一样的。我们可以使用 XCTest 来测试我们程序的执行时间并证明这一点。</p>
<p>测试没有使用列表解析的代码片段</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">testNoListComprehensionPerformance</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.measureBlock() &#123;</span><br><span class="line">        <span class="keyword">var</span> squares = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span> &#123;</span><br><span class="line">            squares.append(x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相关的输出是：</p>
<p>Test Case ‘-[speedTestTests.speedTestTests testNoListComprehensionPerformance]’ started.</p>
<p>:0: Test Case ‘-[speedTestTests.speedTestTests testNoListComprehensionPerformance]’ measured [Time, seconds] average: 0.000, relative standard deviation: 236.965%, values: [0.000154, 0.000005, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004], performanceMetricID:com.apple.XCTPerformanceMetric_WallClockTime, baselineName: “”, baselineAverage: , maxPercentRegression: 10.000%, maxPercentRelativeStandardDeviation: 10.000%, maxRegression: 0.100, maxStandardDeviation: 0.100</p>
<p>Test Case ‘-[speedTestTests.speedTestTests testNoListComprehensionPerformance]’ passed (0.262 seconds).</p>
<p>测试模拟列表解析的代码片段</p>
<p>Test Case ‘-[speedTestTests.speedTestTests testSortaListComprehensionPerformance]’ started.</p>
<p>:0: Test Case ‘-[speedTestTests.speedTestTests testSortaListComprehensionPerformance]’ measured [Time, seconds] average: 0.000, relative standard deviation: 160.077%, values: [0.000045, 0.000005, 0.000004, 0.000003, 0.000003, 0.000003, 0.000003, 0.000004, 0.000003, 0.000003], performanceMetricID:com.apple.XCTPerformanceMetric_WallClockTime, baselineName: “”, baselineAverage: , maxPercentRegression: 10.000%, maxPercentRelativeStandardDeviation: 10.000%, maxRegression: 0.100, maxStandardDeviation: 0.100</p>
<p>Test Case ‘-[speedTestTests.speedTestTests testSortaListComprehensionPerformance]’ passed (0.255 seconds).</p>
<hr>
<p><strong>他们平均只相差 0.007 秒</strong></p>
<hr>
<p>我见过最酷的列表解析的应用便是拼写检查。Airspeed Velocity 针对 <a href="http://norvig.com/spell-correct.html" target="_blank" rel="external">Peter Norvig 的  Python 版本的拼写检查</a>，<a href="http://airspeedvelocity.net/2015/05/02/spelling/" target="_blank" rel="external">改写了一个 Swift 版本</a>。</p>
<p>在 Swift 中使用类列表解析的操作的主要优点就是简洁性。 <a href="http://www.paulgraham.com/power.html" target="_blank" rel="external">Paul Graham 写了一大篇关于在编程语言中简洁是多么重要的文章。</a> 因为每个程序员每天只能写一定行数的代码，如果你以同样数量的代码行数完成更多功能，那你每天便可以完成更多的工作任务。这种力量也会让你重新思考编写什么样的程序是可能的。在一些更繁琐的语言中，这个拼写检查的例子可能就是一个巨大的项目。我喜欢像拼写检查这种充满技术复杂性和神秘感的事物，并且在 Swift 中可以只用几行代码便能解决。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Veronica Ray，<a href="http://jamesonquave.com/blog/list-comprehensions-and-performance-with-swift/">原文链接</a>，原文日期：2015-08-15<br>译者：<a href="http://weibo.com/riven0951">riven</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/linusling">小铁匠Linus</a></p>
<p>本文写于 2015.8.15 适用于 Xcode 6 和 Swift 1.2</p>
</blockquote>
<p>列表解析可以让你用更简洁的方式来创建列表。尽管列表解析没有在 Swift 的语言指南中提及，但你也可以在 Swift 中实现类似列表解析的一些操作。</p>]]>
    
    </summary>
    
      <category term="Jameson Quave" scheme="http://swiftggteam.github.io/tags/Jameson-Quave/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于 Swift 的 5 个误区]]></title>
    <link href="http://swiftggteam.github.io/2015/10/28/five-myths-about-swift/"/>
    <id>http://swiftggteam.github.io/2015/10/28/five-myths-about-swift/</id>
    <published>2015-10-28T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/five-myths-about-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-19<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://www.swiftyper.com/" target="_blank" rel="external">小锅</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 虽然是一门比较新的技术语言，却已经有了很多关于 Swift 的误区。</p>
<a id="more"></a>
<h2 id="误区_1_：“Swift_是弱类型的语言”">误区 1 ：“Swift 是弱类型的语言”</h2><p>很多人认为 Swift 是一种弱类型的语言。他们这么说的原因主要是可以隐式声明一个值，而不管类型是什么：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>这代码看上去好像<code>i</code>没有类型，其实并不是这样的。因为 5 是一个整型，所以编译器就会让<code>i</code>成为整型变量。之后，整型变量<code>i</code>不会再被改变，也就是说<code>i</code>永远是整型变量。</p>
<p>当然，我们也可以明确的指定变量的类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i: <span class="type">Int</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>虽然这种方式不是必要的，但它可以提高代码的可读性。</p>
<h2 id="误区_2_：“Swift_和_Objective-C_协作性差”">误区 2 ：“Swift 和 Objective-C 协作性差”</h2><p>很多人不想开始尝试使用 Swift，因为他们认为 Swift 不能兼容现存的 Objective-C 代码和类库。其实并不是这样的。在同一个工程中，同时使用 Swift 和 Objective-C 也是可行的。并且，在 Swift 代码中也可以使用 Objective-C 的第三方库。</p>
<p>可以在所谓的桥接文件中声明 Objective-C 的头文件，然后，所有头文件的内容都会被翻译成 Swfit 的语法，这样在调用 Objective-C 的 API 的时候就不会感觉到什么区别了。甚至 Objective-C 错误处理也被转换成 Swift 的<code>do-try-catch</code>语法了。</p>
<p>苹果的框架仍然是用 Objective-C 写的，如果Swift 和 Objective-C 协作性差的话事情就会变得很糟。</p>
<h2 id="误区_3_：“必须在新的项目中使用_Swift”">误区 3 ：“必须在新的项目中使用 Swift”</h2><p>我觉得在新项目中使用 Swift 是个很好的想法，而且每个 iOS 开发者都应该学 Swift。</p>
<p>但是，你没必要一定要在新项目中开始使用 Swift。现在苹果官方还在支持 Objective-C，至少近几年不会改变。但是，我认为苹果未来对 Objective-C 的支持会越来越少。</p>
<p>可以去我发布的另一篇文章 <a href="http://www.thomashanning.com/should-you-use-objective-c-or-swift/" target="_blank" rel="external">Should You Use Objective-C or Swift?</a> 里看看关于本误区的其他详情。</p>
<h2 id="误区_4_：“只学_Swift_就够用了”">误区 4 ：“只学 Swift 就够用了”</h2><p>Swift 是门很棒的编程语言，它也可以用在生产环境，但是仅仅学 Swift 是不够的。原因大致如下：Swift 和 Objective-C 有很好的协作性，而且项目中也经常会有 Objective-C 的代码，同时，许多的示例代码和教程是用 Objective-C 写的。</p>
<p>因此，为了成为一个优秀的 iOS 开发者，最好能同时学会 Swift 和 Objective-C。</p>
<h2 id="误区_5_：“Swift_还不能用在生产环境”">误区 5 ：“Swift 还不能用在生产环境”</h2><p>很多人认为 Swift 还不能用在生产环境。其中一个原因就是，引进 Swift 到工程中时会有一些问题出现，尤其是 Xcode 会有一些 bug。如果知道一些变通方法的话，还是可以在生产环境使用 Swift 的。</p>
<p>Swift 1.2 和 Swift 2.0 的引进都有对语言的语法进行修改。因此，把现存的 Swift 代码迁移到新的语法上是必要的。当然，这也没什么可指责的，毕竟每个 iOS 版本都有代码在变更。而且，这也是 Swift 在尝试改善的重要标志，特别是在 Swift 发布不久的现阶段。</p>
<h2 id="接下来做什么">接下来做什么</h2><p>如果你想学习更多有关 Swift 的知识，学习<a href="https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11" target="_blank" rel="external">苹果的Swift文档</a>是一个非常好的开始。如果想了解其它的资源，可以关注一下我的博客<a href="http://www.thomashanning.com/how-to-stay-up-to-date-on-ios-development/" target="_blank" rel="external"> “How To Stay Up-To-Date On iOS Development”</a>。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/five-myths-about-swift/">原文链接</a>，原文日期：2015-10-19<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://www.swiftyper.com/">小锅</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 虽然是一门比较新的技术语言，却已经有了很多关于 Swift 的误区。</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解 Swift 模式匹配]]></title>
    <link href="http://swiftggteam.github.io/2015/10/27/swift-pattern-matching-in-detail/"/>
    <id>http://swiftggteam.github.io/2015/10/27/swift-pattern-matching-in-detail/</id>
    <published>2015-10-27T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Benedikt Terhechte，<a href="http://appventure.me/2015/08/20/swift-pattern-matching-in-detail/" target="_blank" rel="external">原文链接</a>，原文日期：2015-08-20<br>译者：<a href="http://blog.csdn.net/mmoaay" target="_blank" rel="external">mmoaay</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在众多 Swift 提供给 Objective-C 程序员使用的新特性中，有个特性把自己伪装成一个无聊的老头，但是却在如何优雅的解决“鞭尸金字塔“的问题上有着巨大的潜力。很显然我所说的这个特性就是 <code>switch</code> 语句， 对于很多 Objective-C 程序员来说，除了用在 <a href="http://en.wikipedia.org/wiki/Duff%27s_device" target="_blank" rel="external">Duff’s Device</a> 上比较有趣之外，<code>switch</code> 语句非常笨拙，与多个 <code>if</code> 语句相比，它几乎没有任何优势。</p>
<a id="more"></a>
<p>不过 Swift 中的 <code>switch</code> 语句能做的就多了。在接下来的教程里，我会更加详细的讲解这些新特性的各种用途。我会忽略那些与 Objective-C 和 C 中 <code>switch</code> 语句相比没有任何优势的解决方案。这篇文章基础的部分写于 2014 年 7 月，但是很多我写的模式都会导致编译器崩溃，所以我只好推迟这些内容的编写，直到编译器能提供更好的支持。</p>
<p>这篇博客还有如下语言的版本：</p>
<blockquote>
<p><a href="http://qiita.com/mono0926/items/f2875a9eacef53e88122" target="_blank" rel="external">日语</a> （感谢 <a href="https://twitter.com/_mono" target="_blank" rel="external">M Ono</a>！）</p>
</blockquote>
<h1 id="开始咯">开始咯</h1><p> <code>switch</code> 语句主要的特性当然是模式匹配咯，模式匹配可以对值进行解构，然后根据相应 <code>case</code> 的正确匹配值来进行匹配。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 历史上最坏的一个例子：二进制-&gt;十进制的转换</span></span><br><span class="line"><span class="keyword">let</span> bool1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> bool2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">switch</span> (bool1, bool2) &#123;</span><br><span class="line">   <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>): <span class="built_in">print</span>(<span class="string">"0"</span>)</span><br><span class="line">   <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">1</span>): <span class="built_in">print</span>(<span class="string">"1"</span>)</span><br><span class="line">   <span class="keyword">case</span> (<span class="number">1</span>, <span class="number">0</span>): <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">   <span class="keyword">case</span> (<span class="number">1</span>, <span class="number">1</span>): <span class="built_in">print</span>(<span class="string">"3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模式匹配很早以前就在其他语言中存在了，这些语言包括 Haskell、Erlang、Scala 和 Prolog。这是一个福音，因为它允许我们观察那些语言如何利用模式匹配来解决问题。我们甚至可以通过观察它们的例子来找到最实用的那个。</p>
<h1 id="一个交易引擎">一个交易引擎</h1><p>假设华尔街找到你，他们需要一个新的运行在 iOS 设备上的交易平台。因为是交易平台，所以你需要给交易定义一个 <code>enum</code>。</p>
<h2 id="第一步">第一步</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Trades</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Buy</span>(stock: <span class="type">String</span>, amount: <span class="type">Int</span>, stockPrice: <span class="type">Float</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sell</span>(stock: <span class="type">String</span>, amount: <span class="type">Int</span>, stockPrice: <span class="type">Float</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时还会提供如下的 API 给你来进行交易处理。<strong>注意销售订单的金额是如何变成负数的</strong>，而且他们还说股票的价格不重要，他们的引擎会在内部选择一个价格。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> - 参数 stock: 股票的名字</span><br><span class="line"> - 参数 amount: 金额, 负数表示销售额, 正数表示购买额</span><br><span class="line">*/</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">process</span><span class="params">(stock: String, <span class="number">_</span> amount: Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"<span class="subst">\(amount)</span> of <span class="subst">\(stock)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下一步就是对交易进行处理。你会发现模式匹配在写这个业务时所具备的强大处理能力：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aTrade = <span class="type">Trades</span>.<span class="type">Buy</span>(stock: <span class="string">"APPL"</span>, amount: <span class="number">200</span>, stockPrice: <span class="number">115.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> aTrade &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Buy</span>(<span class="keyword">let</span> stock, <span class="keyword">let</span> amount, <span class="number">_</span>):</span><br><span class="line">    process(stock, amount)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Sell</span>(<span class="keyword">let</span> stock, <span class="keyword">let</span> amount, <span class="number">_</span>):</span><br><span class="line">    process(stock, amount * -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 "buy 200 of APPL"</span></span><br></pre></td></tr></table></figure>
<p>Swift 可以让我们非常方便的从 <code>enum</code> 中解构/提取出我们真正想要的信息。在这个例子中只有 <code>stock</code> 和 <code>amount</code> 被解构出来。</p>
<p>真棒，现在你可以去华尔街展示这个极好的交易平台了。然而，现实往往比美好的想象要残酷得多。你以为交易就是你以为的交易么？</p>
<ul>
<li>你必须根据不同的交易方式计算费用。</li>
<li>机构越小，费用越高</li>
<li>而且，机构越大，优先级越高。</li>
</ul>
<p>华尔街的人也意识到要处理这些问题你需要新的 API，所以他们给了你下面的两个：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">processSlow</span><span class="params">(stock: String, <span class="number">_</span> amount: Int, <span class="number">_</span> fee: Float)</span></span> &#123; <span class="built_in">print</span>(<span class="string">"slow"</span>) &#125;</span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">processFast</span><span class="params">(stock: String, <span class="number">_</span> amount: Int, <span class="number">_</span> fee: Float)</span></span> &#123; <span class="built_in">print</span>(<span class="string">"fast"</span>) &#125;</span><br></pre></td></tr></table></figure>
<h2 id="交易类型">交易类型</h2><p>于是你回到绘图板重新增加了一个 <code>enum</code>。交易类型也是每个交易的一部分。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TraderType</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">SingleGuy</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">Company</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Trades</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Buy</span>(stock: <span class="type">String</span>, amount: <span class="type">Int</span>, stockPrice: <span class="type">Float</span>, type: <span class="type">TraderType</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sell</span>(stock: <span class="type">String</span>, amount: <span class="type">Int</span>, stockPrice: <span class="type">Float</span>, type: <span class="type">TraderType</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，如何更好地实现这一新机制呢？你可以用一个 <code>if / else</code> 分支来实现购买和销售，但是这会导致代码嵌套以至于很快代码就变的不清晰了——而且谁知道那些华尔街人会不会给你找新的麻烦。所以你应该把它定义为模式匹配的一个新要求：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aTrade = <span class="type">Trades</span>.<span class="type">Sell</span>(stock: <span class="string">"GOOG"</span>, amount: <span class="number">100</span>, stockPrice: <span class="number">666.0</span>, type: <span class="type">TraderType</span>.<span class="type">Company</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> aTrade &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Buy</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">SingleGuy</span>):</span><br><span class="line">    processSlow(stock, amount, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Sell</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">SingleGuy</span>):</span><br><span class="line">    processSlow(stock, -<span class="number">1</span> * amount, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Buy</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">Company</span>):</span><br><span class="line">    processFast(stock, amount, <span class="number">2.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Sell</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">Company</span>):</span><br><span class="line">    processFast(stock, -<span class="number">1</span> * amount, <span class="number">2.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的优雅之处在于它非常简洁的描述了不同可能的组合。注意我们把 <code>.Buy(let stock, let amount)</code> 修改成 <code>let .Buy(stock, amount)</code> 来进行简化，这样就可以用更少的语句来像之前一样对 <code>enum</code> 进行解构。</p>
<h2 id="警卫！警卫！呼叫警卫！">警卫！警卫！呼叫警卫！</h2><p>于是你再次向你的华尔街用户展示你的开发成果，而他们又提出了新的问题（你真应该把项目的细节问得更清楚一点）。</p>
<ul>
<li>交易总额超过 1.000.000\$ 的销售订单通常需要更快进行处理，就算是个人客户也得这样。</li>
<li>交易总额小于 1.000\$ 的购买订单通常处理更慢。</li>
</ul>
<p>如果使用传统的 <code>if</code> 语句，这时代码就应该已经有点凌乱了，而 <code>switch</code> 就不会。Swift 为 <code>switch cases</code> 提供了保护机制，这种机制可以让你进一步的对可能匹配的 <code>case</code> 进行约束。</p>
<p>你只需要对 <code>switch</code> 语句稍作修改就可以满足新的变化。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aTrade = <span class="type">Trades</span>.<span class="type">Buy</span>(stock: <span class="string">"GOOG"</span>, amount: <span class="number">1000</span>, stockPrice: <span class="number">666.0</span>, type: <span class="type">TraderType</span>.<span class="type">SingleGuy</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> aTrade &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Buy</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">SingleGuy</span>):</span><br><span class="line">    processSlow(stock, amount, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Sell</span>(stock, amount, price, <span class="type">TraderType</span>.<span class="type">SingleGuy</span>)</span><br><span class="line">    <span class="keyword">where</span> price*<span class="type">Float</span>(amount) &gt; <span class="number">1000000</span>:</span><br><span class="line">    processFast(stock, -<span class="number">1</span> * amount, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Sell</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">SingleGuy</span>):</span><br><span class="line">    processSlow(stock, -<span class="number">1</span> * amount, <span class="number">5.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Buy</span>(stock, amount, price, <span class="type">TraderType</span>.<span class="type">Company</span>)</span><br><span class="line">    <span class="keyword">where</span> price*<span class="type">Float</span>(amount) &lt; <span class="number">1000</span>:</span><br><span class="line">    processSlow(stock, amount, <span class="number">2.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Buy</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">Company</span>):</span><br><span class="line">    processFast(stock, amount, <span class="number">2.0</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Sell</span>(stock, amount, <span class="number">_</span>, <span class="type">TraderType</span>.<span class="type">Company</span>):</span><br><span class="line">    processFast(stock, -<span class="number">1</span> * amount, <span class="number">2.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码结构很清晰，阅读起来也相当简单，对复杂情况的封装也很好。</p>
<p>就是这样，我们已经成功的实现了我们的交易引擎。然而，这个解决方案还是有点繁琐；我们在想是否还有对其进行改进的模式匹配方案。所以，让我们继续深入研究一下模式匹配。</p>
<h1 id="模式匹配进阶">模式匹配进阶</h1><p>现在我们在实战中已经见过了几种模式。但其语法是什么？还能匹配什么？Swift 将这些模式分为 <strong>7</strong> 种。我们现在就来认识一下它们。</p>
<p>所有的这些模式不仅能用在 <code>switch</code> 关键词上，而且可以用在 <code>if</code>，<code>guard</code> 和 <code>for</code> 关键词上。如需了解详情，接着看下面的内容。</p>
<h2 id="1-_通配符模式">1. 通配符模式</h2><p>通配符模式会忽略需要匹配的值，这种 <code>case</code> 下任何值都是有可能的。这和 <code>let _ = fn()</code> 一样的模式，在这个模式下， <code>_</code>  表示你将不再使用这个值。有意思的是这个模式可以匹配包括 <code>nil</code> <a href="#1">1</a>在内的所有值 。如果增加一个 <code>?</code>，它甚至可以匹配可选值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p: <span class="type">String</span>? = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">switch</span> p &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">_</span>?: <span class="built_in">print</span> (<span class="string">"Has String"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>: <span class="built_in">print</span> (<span class="string">"No String"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就像你在交易例子里面看到的一样，它也允许你忽略需要匹配的 <code>enum</code> 或者 <code>tuples</code> 中无用的数据：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">15</span>, <span class="string">"example"</span>, <span class="number">3.14</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">_</span>, <span class="number">_</span>, <span class="keyword">let</span> pi): <span class="built_in">print</span> (<span class="string">"pi: <span class="subst">\(pi)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-_标示模式">2. 标示模式</h2><p>匹配一个具体的值。这个和 Objective-C 的 <code>switch</code> 实现是一样的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> <span class="number">5</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">print</span>(<span class="string">"5"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-_值绑定模式">3. 值绑定模式</h2><p>这种模式和通过 <code>let</code> 或者 <code>var</code> 绑定值到变量一样，但是只能用在 <code>switch</code> 中。因为你之前已经见到过，所以我只给出一个非常简单的例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">4</span>, <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="keyword">let</span> (x, y): <span class="built_in">print</span>(<span class="string">"<span class="subst">\(x)</span> <span class="subst">\(y)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-_元组模式">4. 元组模式</h2><p><a href="http://appventure.me/2015/07/19/tuples-swift-advanced-usage-best-practices/" target="_blank" rel="external">关于元组我已经写了一整篇博文</a>，这篇博文所提供的信息远远比这里多，但是我还是在这里给出一个简短的例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">23</span></span><br><span class="line"><span class="keyword">let</span> job: <span class="type">String</span>? = <span class="string">"Operator"</span></span><br><span class="line"><span class="keyword">let</span> payload: <span class="type">AnyObject</span> = <span class="type">NSDictionary</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (age, job, payload) &#123;</span><br><span class="line">  <span class="keyword">case</span> (<span class="keyword">let</span> age, <span class="number">_</span>?, <span class="number">_</span> <span class="keyword">as</span> <span class="type">NSDictionary</span>):</span><br><span class="line">  <span class="built_in">print</span>(age)</span><br><span class="line">  <span class="keyword">default</span>: ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，我们把 3 个值结合放到一个元组中（假想它们是通过调用不同的 API 得到的），然后一口气匹配它们，注意这个模式完成了三件事情：</p>
<ol>
<li>提取 <code>age</code></li>
<li>确保存在一个 <code>job</code>，就算我们不需要它</li>
<li>确保 <code>payload</code> 的类型是 <code>NSDictionary</code>，尽管我们同样不需要访问它的具体值。</li>
</ol>
<h2 id="5-_枚举_Case_模式（Enumeration_Case_Pattern）">5. 枚举 Case 模式（Enumeration Case Pattern）</h2><p>就如你在交易例子中所见，模式匹配对 Swift 的 <code>enum</code> 支持<strong>相当棒</strong>。这是因为 <code>enum cases</code> 就像密封、不可变且可解构的结构体。这非常像 <code>tuples</code>，你可以打开正好匹配上的某个单独 <code>case</code> 的内容然后只抽取出你需要的信息<a href="#2">2</a>。 </p>
<p>假想你正在用函数式的风格写一个游戏，然后你需要定义一些实体。你可以使用 <code>structs</code> 但是你的实体的状态很少，你觉得这样有点矫枉过正。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Entities</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Soldier</span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Tank</span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Player</span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在你需要实现绘图循环。这里我们只需要 X 和 Y 坐标：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> entities() &#123;</span><br><span class="line">    <span class="keyword">switch</span> e &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Soldier</span>(x, y):</span><br><span class="line">      drawImage(<span class="string">"soldier.png"</span>, x, y)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Tank</span>(x, y):</span><br><span class="line">      drawImage(<span class="string">"tank.png"</span>, x, y)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Player</span>(x, y):</span><br><span class="line">      drawImage(<span class="string">"player.png"</span>, x, y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-_类型转换模式">6. 类型转换模式</h2><p>就像名字所表示的一样，这种模式转换或者匹配类型。它有两种不同的关键词：</p>
<ul>
<li><code>is</code> <strong>类型</strong>：匹配右手边内容的运行时类型（或者类型的子类）。它会做类型转换但是不关注返回值。所以你的 <code>case</code> 块不知道所匹配的类型是什么。</li>
<li>模式 <code>as</code> <strong>类型</strong>：和 <code>is</code> 模式做同样的匹配操作，但是如果成功的话会把类型转换到左侧指定的模式中。</li>
</ul>
<p>下面是这两种关键词的例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="type">Any</span> = <span class="number">5</span> </span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line">  <span class="comment">// 这会失败因为它的类型仍然是 `Any`</span></span><br><span class="line">  <span class="comment">// 错误: binary operator '+' cannot be applied to operands of type 'Any' and 'Int'</span></span><br><span class="line">  <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">Int</span>: <span class="built_in">print</span> (a + <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 有效并返回 '6'</span></span><br><span class="line">  <span class="keyword">case</span> <span class="keyword">let</span> n <span class="keyword">as</span> <span class="type">Int</span>: <span class="built_in">print</span> (n + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">default</span>: ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意 <code>is</code> 前没有 <code>pattern</code>。它直接和 <code>a</code> 做匹配。</p>
<h2 id="7-_表达模式">7. 表达模式</h2><p>表达模式非常强大。它可以把 <code>switch</code> 的值和实现了 <code>~=</code> 操作符的表达式进行匹配。而且对于这个操作符有默认的实现，比如对于范围匹配，你可以这样做：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> <span class="number">5</span> &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">0</span>..<span class="number">10</span>: <span class="built_in">print</span>(<span class="string">"In range 0-10"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而，更有趣的可能是自己重写操作符，然后使你的自定义类型可以匹配。我们假定你想重写之前写的士兵游戏，而且你无论如何都要使用结构体。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Soldier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hp: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> x: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> y: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在你想轻松的匹配所有血量为 <strong>0</strong> 的实体。我们可以像下面一样实现 <code>~=</code> 操作符。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> ~= <span class="params">(pattern: Int, value: Soldier)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern == value.hp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们就可以对一个实体做匹配了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> soldier = <span class="type">Soldier</span>(hp: <span class="number">99</span>, x: <span class="number">10</span>, y: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">switch</span> soldier &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">print</span>(<span class="string">"dead soldier"</span>)</span><br><span class="line">   <span class="keyword">default</span>: ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不幸的是，对元组做全匹配似乎不好使。如果你编写下面的代码，就会出现类型检查错误。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> ~= <span class="params">(pattern: <span class="params">(hp: Int, x: Int, y: Int)</span></span></span>, value: <span class="type">Soldier</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> (hp, x, y) = pattern</span><br><span class="line">   <span class="keyword">return</span> hp == value.hp &amp;&amp; x == value.x &amp;&amp; y == value.y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个可能解决上述类似问题的方案是给你的 <code>struct</code> 增加一个 <code>unapply</code> 方法然后再进行匹配：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Soldier</span> </span>&#123;</span><br><span class="line">   <span class="func"><span class="keyword">func</span> <span class="title">unapply</span><span class="params">()</span></span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">self</span>.hp, <span class="keyword">self</span>.x, <span class="keyword">self</span>.y)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> ~= <span class="params">(p: <span class="params">(Int, Int, Int)</span></span></span>, t: (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> p.<span class="number">0</span> == t.<span class="number">0</span> &amp;&amp; p.<span class="number">1</span> == t.<span class="number">1</span> &amp;&amp; p.<span class="number">2</span> == t.<span class="number">2</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> soldier = <span class="type">Soldier</span>(hp: <span class="number">99</span>, x: <span class="number">10</span>, y: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(soldier.unapply() ~= (<span class="number">99</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<p>但是这相当繁琐而且没有利用好模式匹配背后的大量魔法般的效果。</p>
<p>在这篇博文之前的版本中我写过 <code>~=</code> 不适用于协议，但是我错了。我记得我在一个 <code>Playground</code> 中试过。而这个例子（<a href="https://www.reddit.com/r/swift/comments/3hq6id/match_me_if_you_can_swift_pattern_matching_in/cub187r" target="_blank" rel="external">由 reddit 上的 latrodectus 友情提供</a>）是完全可用的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">Int</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tank</span>: <span class="title">Entity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.value = value &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Peasant</span>: <span class="title">Entity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.value = value &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> ~=<span class="params">(pattern: Entity, x: Entity)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.value == x.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> <span class="type">Tank</span>(<span class="number">42</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Peasant</span>(<span class="number">42</span>): <span class="built_in">print</span>(<span class="string">"Matched"</span>) <span class="comment">// 匹配成功</span></span><br><span class="line">    <span class="keyword">default</span>: ()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以利用 <code>Expression Patterns</code> 做很多事情。如果想要了解更多表达模式的细节，<a href="http://austinzheng.com/2014/12/17/custom-pattern-matching/" target="_blank" rel="external">看看这篇由 Austin Zheng 写的超棒博文</a>。</p>
<p>现在我们已经讲完了所有可能的 <code>switch</code> 模式。在我们继续讲解之前，还需要讨论最后一件事情。</p>
<h2 id="fallthrough，break_和标签">fallthrough，break 和标签</h2><p>下面的内容和模式匹配没有直接关系，仅仅是和 <code>switch</code> 关键词有关，所以我就简单说了。和 C/C++/Objective-C 不一样的是：<code>switch cases</code> 不会自动进入下一个 <code>case</code>，这也是为什么 Swift 不需要给每个 <code>case</code> 都写上 <code>break</code>。你可以选择使用 <code>fallthrough</code> 关键词来实现传统的自动进入下一个 <code>case</code> 的行为。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> <span class="number">5</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Is 5"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Is a number"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会在命令行输出: "Is 5" "Is a number"</span></span><br></pre></td></tr></table></figure>
<p>另外，你可以使用 <code>break</code> 来提前跳出 <code>switch</code> 语句。既然不会默认进入下一个 <code>case</code>，为什么还需要这么做呢？比如你知道在一个 <code>case</code> 中有一个必须的要求是不满足的，这样你就不能继续执行这个 <code>case</code> 了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userType = <span class="string">"system"</span></span><br><span class="line"><span class="keyword">let</span> userID = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> (userType, userID)  &#123;</span><br><span class="line">   <span class="keyword">case</span> (<span class="string">"system"</span>, <span class="number">_</span>):</span><br><span class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> userData = getSystemUser(userID) <span class="keyword">else</span> &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">"user info: <span class="subst">\(userData)</span>"</span>)</span><br><span class="line">     insertIntoRemoteDB(userData)</span><br><span class="line">   <span class="keyword">default</span>: ()</span><br><span class="line">&#125;</span><br><span class="line">... 其他你需要执行的代码</span><br></pre></td></tr></table></figure>
<p>在这段代码中，当 <code>getSystemUser</code> 返回的结果是 <code>nil</code> 时你不想再继续调用 <code>insertIntoRemoteData</code>。当然，你可以在这里使用 <code>if let</code>，但是如果多个这样的情况结合到一起的时候，很快你就会得到一堆可怕丑陋的 <code>if lets</code> 嵌套代码。</p>
<p>但是如果你是在一个 <code>while</code> 循环中执行你的 <code>switch</code> 语句，然后你想跳出循环，而不是 <code>switch</code> 的时候，你需要怎么做呢？对与这种情况， Swift 允许你定义一个 <code>labels</code> ，然后 <code>break</code> 或者 <code>continue</code> 到这个 <code>labels</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">gameLoop: <span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> state() &#123;</span><br><span class="line">     <span class="keyword">case</span> .<span class="type">Waiting</span>: <span class="keyword">continue</span> gameLoop</span><br><span class="line">     <span class="keyword">case</span> .<span class="type">Done</span>: calculateNextState()</span><br><span class="line">     <span class="keyword">case</span> .<span class="type">GameOver</span>: <span class="keyword">break</span> gameLoop</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们已经讨论过 <code>switch</code> 和模式匹配的语法和实现细节。现在，让我们来看一些（多少有点）有趣的真实案例。</p>
<h1 id="真实案例">真实案例</h1><h2 id="可选值">可选值</h2><p><a href="http://appventure.me/2014/06/13/swift-optionals-made-simple/" target="_blank" rel="external">对可选值进行解包的方式有很多种</a>，模式匹配就是其中一种。可能到现在这种方法你已经用得非常频繁了，但还是给一个简短的例子吧：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result: <span class="type">String</span>? = secretMethod()</span><br><span class="line"><span class="keyword">switch</span> result &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">None</span>:</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"is nothing"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> a:</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"<span class="subst">\(a)</span> is a value"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是 Swift 2.0 的话，这会更简单：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result: <span class="type">String</span>? = secretMethod()</span><br><span class="line"><span class="keyword">switch</span> result &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"is nothing"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> a?:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(a)</span> is a value"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正如你所见，<code>result</code> 可以是一个字符串，但是它也可能是 <code>nil</code>，因为它是 <code>optional</code> 值。通过对 <code>result</code> 执行 <code>switch</code>。我们可以确定它是 <code>.None</code> 或者是一个确定的值。更进一步，如果他是一个确定的值，我们可以在 <code>a</code> 这种情况下马上把这个值绑定到一个变量。这段代码代码的优美之处在于：变量 <code>result</code> 可能存在的两种状态被非常明显的区分开来。</p>
<h2 id="类型匹配">类型匹配</h2><p>做为强类型语言，Swift 通常不会像 Objective-C 那样经常需要运行时类型检查。然而，当你需要与传统的 Objective-C 代码交互时（<a href="https://netguru.co/blog/objective-c-generics" target="_blank" rel="external">这还没有更新到简单泛型的反射一文中</a>），那你就经常会碰到需要做类型检查的代码。假想你得到了一个包含 <code>NSString</code> 和 <code>NSNumber</code> 元素的数组：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> u = <span class="type">NSArray</span>(array: [<span class="type">NSString</span>(string: <span class="string">"String1"</span>), <span class="type">NSNumber</span>(int: <span class="number">20</span>), <span class="type">NSNumber</span>(int: <span class="number">40</span>)])</span><br></pre></td></tr></table></figure>
<p>当你遍历这个 <code>NSArray</code> 时，你永远不知道得到的是什么类型。然而， <code>switch</code> 语句可以让你很简单的检查这些类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> u &#123;</span><br><span class="line">    <span class="keyword">switch</span> x &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">_</span> <span class="keyword">as</span> <span class="type">NSString</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"string"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">_</span> <span class="keyword">as</span> <span class="type">NSNumber</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"number"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"Unknown types"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="按范围做分级">按范围做分级</h2><p>现在你正在给你当地的高校写分级的 iOS 应用。老师想要输入一个 0 到 100 的数值，然后得到一个相应的等级字符（A-F）。模式匹配现在要来拯救你了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> aGrade = <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> aGrade &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">90</span>...<span class="number">100</span>: <span class="built_in">print</span>(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>...<span class="number">90</span>: <span class="built_in">print</span>(<span class="string">"B"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">70</span>...<span class="number">80</span>: <span class="built_in">print</span>(<span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">60</span>...<span class="number">70</span>: <span class="built_in">print</span>(<span class="string">"D"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>...<span class="number">60</span>: <span class="built_in">print</span>(<span class="string">"F"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Incorrect Grade"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字频率统计">字频率统计</h2><p>有一系列的数据对，每个数据对代表一个字和它在某段文字中出现的频率。我们的目标就是把那些低于或者高于某个固定阈值的数据对过滤掉，然后只返回剩下的不包含其频率的所有字。</p>
<p>这是我们的字集：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wordFreqs = [(<span class="string">"k"</span>, <span class="number">5</span>), (<span class="string">"a"</span>, <span class="number">7</span>), (<span class="string">"b"</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>
<p>一个简单的解决方案是使用 <code>map</code> 和 <code>filter</code> 进行建模：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = wordFreqs.<span class="built_in">filter</span>(&#123; (e) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> e.<span class="number">1</span> &gt; <span class="number">3</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="built_in">map</span> &#123; $<span class="number">0.0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>然而，因为 <code>flatmap</code> 只能返回非空元素，所以这个解决方案还有很大的改进空间。首先，我们可以放弃使用 <code>e.1</code> 而利用元组来做适当的解构（你猜对了）。然后我们只需要调用一次 <code>flatmap</code>，这样可以减少先 <code>filter</code> 后 <code>map</code> 所带来的不必要的性能开销。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = wordFreqs.flatMap &#123; (e) -&gt; <span class="type">String</span>? <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> e &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (s, t) <span class="keyword">where</span> t &gt; <span class="number">3</span>: <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<h2 id="遍历目录">遍历目录</h2><p>假想你需要遍历一个文件树然后查找以下内容：</p>
<ul>
<li>所有 customer1 和 customer2 创建的 “psd“文件</li>
<li>所有 customer2 创建的 “blend“文件</li>
<li>所有用户创建的 “jpeg“文件</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> enumerator = <span class="type">NSFileManager</span>.defaultManager().enumeratorAtPath(<span class="string">"/customers/2014/"</span>)</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> enumerator &#123;</span><br><span class="line">    <span class="keyword">switch</span> (url.pathComponents, url.pathExtension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// customer1 和 customer2 创建的 “psd“文件</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">let</span> f, <span class="string">"psd"</span>) </span><br><span class="line">	    <span class="keyword">where</span> f.<span class="built_in">contains</span>(<span class="string">"customer1"</span>) </span><br><span class="line">	    || f.<span class="built_in">contains</span>(<span class="string">"customer2"</span>): <span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// customer2 创建的 “blend“文件</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">let</span> f, <span class="string">"blend"</span>) <span class="keyword">where</span> f.<span class="built_in">contains</span>(<span class="string">"customer2"</span>): <span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有的 “jpeg“文件</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">_</span>, <span class="string">"jpg"</span>): <span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>: ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意 <code>contains</code> 在第一个匹配就结束然后就不用遍历完整的路径了。同样，模式匹配的代码非常简洁明了。</p>
<h2 id="Fibonacci">Fibonacci</h2><p>同样，来看一下使用模式匹配实现的 fibonacci 算法有多优美<a href="#3">3</a></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(i: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> n <span class="keyword">where</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> n: <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<p>当然，如果是大数的话，程序栈会爆掉。</p>
<h2 id="传统的_API_和值提取">传统的 API 和值提取</h2><p>通常情况下，当你从外部源取数据的时候，比如一个库，或者一个 API，它不仅是一种很好的做法，而且通常在解析数据之前需要检查数据的一致性。你需要确保所有的 <code>key</code> 都是存在的、或者数据的类型都正确、或者数组的长度满足要求。如果不这么做就会因为 bug（有的 <code>key</code> 不存在）而导致 app 崩溃（索引不存在的数组项）。而传统的做法通常是嵌套 <code>if</code> 语句。</p>
<p>假想有 API 返回一条用户信息。但是有两种类型的用户：系统用户——如管理员或者邮政局长——和本地用户——如 “John B”、“Bill Gates”等。因为系统的设计和增长，API 的使用者需要处理一些麻烦的事情：</p>
<ul>
<li><code>system</code> 和 <code>local</code> 用户来自同一个 API 调用。</li>
<li>因为早期版本的数据库没有 <code>department</code> 这个字段，所以这个 <code>key</code> 可能是不存在的，而且早期的雇员从来都不需要填写这个字段。</li>
<li>根据用户被创建的时间，<code>name</code> 数组可能包含 4 个元素（username，middlename，lastname 和 firstname）或者 2 个元素（full name，username）</li>
<li><code>age</code> 是代表用户年龄的整型数</li>
</ul>
<p>我们的系统需要给这个 API 返回的所有系统用户创建用户账号，账号信息只包含如下信息：username 和 department。我们只需要 1980 年以前出生的用户。如果没有指定 department，就指定为 “Corp”。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">legacyAPI</span><span class="params">(id: Int)</span></span> -&gt; [<span class="type">String</span>: <span class="type">AnyObject</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"type"</span>: <span class="string">"system"</span>, <span class="string">"department"</span>: <span class="string">"Dark Arts"</span>, <span class="string">"age"</span>: <span class="number">57</span>, </span><br><span class="line">	   <span class="string">"name"</span>: [<span class="string">"voldemort"</span>, <span class="string">"Tom"</span>, <span class="string">"Marvolo"</span>, <span class="string">"Riddle"</span>]] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们为给定的约束实现一个模式来进行匹配：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> item = legacyAPI(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">switch</span> (item[<span class="string">"type"</span>], item[<span class="string">"department"</span>], item[<span class="string">"age"</span>], item[<span class="string">"name"</span>]) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="keyword">let</span> (sys <span class="keyword">as</span> <span class="type">String</span>, dep <span class="keyword">as</span> <span class="type">String</span>, age <span class="keyword">as</span> <span class="type">Int</span>, name <span class="keyword">as</span> [<span class="type">String</span>]) <span class="keyword">where</span> </span><br><span class="line">      age &lt; <span class="number">1980</span> &amp;&amp;</span><br><span class="line">      sys == <span class="string">"system"</span>:</span><br><span class="line">     createSystemUser(name.<span class="built_in">count</span> == <span class="number">2</span> ? name.last! : name.first!, dep: dep ?? <span class="string">"Corp"</span>)</span><br><span class="line">  <span class="keyword">default</span>:()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 ("voldemort", "Dark Arts")</span></span><br></pre></td></tr></table></figure>
<p>注意这段代码做了一个很危险的假设：就是如果 <code>name</code> 数组元素的个数不是 2 个的话，那么它<strong>一定</strong>包含 4 个元素。如果这种假设不成立，我们获得了包含 0 个元素的数组，这段代码就会崩溃。</p>
<p>除了这一点，模式匹配向你展示了它是如何在只有一个 <code>case</code> 的情况下帮助你编写干净的代码和简化值的提取的。</p>
<p>同样来看看我们是怎么写紧跟在 <code>case</code> 之后 <code>let</code> 的，这样一来就不必在每一次赋值的时候都重复写它。</p>
<h1 id="模式和其他关键词">模式和其他关键词</h1><p>Swift 的文档指出不是所有的模式都可以在 <code>if</code>、<code>for</code> 或者 <code>guard</code> 语句中使用。然而，这个文档似乎不是最新的。所有 7 种模式对这三个关键词都有效。</p>
<p>我为那些感兴趣的人编了一个例子要点，为每个模式和每个关键词都写了一个例子。</p>
<p><a href="https://gist.github.com/terhechte/6eaeb90276bbfcd1ea41" target="_blank" rel="external">你可以在这里查看所有的样例模式</a></p>
<p>来看一个对三个关键词使用 <strong>值绑定</strong>、<strong>元组</strong>和<strong>类型转换</strong>模式的简短例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 到吗编译后只是一个关键词的集合。其本身没有任何意义</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">valueTupleType</span><span class="params">(a: <span class="params">(Int, Any)</span></span></span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// guard case 的例子</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">case</span> <span class="keyword">let</span> (x, <span class="number">_</span> <span class="keyword">as</span> <span class="type">String</span>) = a <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for case 的例子</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (a, <span class="number">_</span> <span class="keyword">as</span> <span class="type">String</span>) <span class="keyword">in</span> [a] &#123;</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if case 的例子</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> (x, <span class="number">_</span> <span class="keyword">as</span> <span class="type">String</span>) = a &#123;</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">"if"</span>, x)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch case example</span></span><br><span class="line">    <span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> (a, <span class="number">_</span> <span class="keyword">as</span> <span class="type">String</span>):</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u: <span class="type">Any</span> = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Any</span> = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(valueTupleType((<span class="number">5</span>, u)))</span><br><span class="line"><span class="built_in">print</span>(valueTupleType((<span class="number">5</span>, b)))</span><br><span class="line"><span class="comment">// 5, 5, "if 5", 5, true, false</span></span><br></pre></td></tr></table></figure>
<p>我们可以带着这个想法详细地看一看每一个关键词。</p>
<h1 id="使用_for_case"><strong>使用</strong> for case</h1><p>到了 Swift 2.0 后，模式匹配变得更加重要，因为它被扩展到不仅可以支持 <code>switch</code> ，还可以支持其他的关键词。比如，让我们写一个简单的只返回非空元素的数组函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">nonnil</span><span class="generics">&lt;T&gt;</span><span class="params">(array: [T?])</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">   <span class="keyword">var</span> result: [<span class="type">T</span>] = []</span><br><span class="line">   <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> x? <span class="keyword">in</span> array &#123;</span><br><span class="line">      result.append(x)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nonnil([<span class="string">"a"</span>, <span class="literal">nil</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="literal">nil</span>]))</span><br></pre></td></tr></table></figure>
<p>关键词 <code>case</code> 可以被 <code>for</code> 循环使用，就像 <code>switch</code> 中的 <code>case</code> 一样。下面是另外一个例子。还记得我们之前说的游戏么？经过第一次重构之后，现在我们的实体系统看起来是这样的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">EntityType</span> </span>&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">Soldier</span></span><br><span class="line">	<span class="keyword">case</span> <span class="type">Player</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Entry</span>(type: <span class="type">EntityType</span>, x: <span class="type">Int</span>, y: <span class="type">Int</span>, hp: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真棒！这可以让我们用更少的代码绘制出所有的项目：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">Entity</span>.<span class="type">Entry</span>(t, x, y, <span class="number">_</span>) <span class="keyword">in</span> gameEntities()</span><br><span class="line"><span class="keyword">where</span> x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &#123;</span><br><span class="line">    drawEntity(t, x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们用一行就解析出了所有必需的属性，然后确保我们不会在 0 一下的范围绘制，最后我们调用渲染方法（<code>drawEntity</code>）。</p>
<p>为了知道选手是否在游戏中胜出，我们想要知道是否有至少一个士兵的血量是大于 0 的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">gameOver</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="type">Entity</span>.<span class="type">Entry</span>(.<span class="type">Soldier</span>, <span class="number">_</span>, <span class="number">_</span>, <span class="keyword">let</span> hp) <span class="keyword">in</span> gameEntities() </span><br><span class="line">    <span class="keyword">where</span> hp &gt; <span class="number">0</span> &#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(gameOver())</span><br></pre></td></tr></table></figure>
<p>好的是 <code>Soldier</code> 的匹配是 <code>for</code> 查询的一部分。这感觉有点像 <code>SQL</code> 而不是命令循环编程。同时，这也可以让编译器更清晰的知道我们的意图，从而就有了打通调度增强这条路的可能性。另外一个很好的体验就是我们不需要完成的拼写出 <code>Entity.EntityType.Soldier</code>。就算我们像上面一样只写 <code>.Soldier</code>，Swift 也能明白我们的意图。</p>
<h1 id="使用_guard_case"><strong>使用</strong> guard case</h1><p>另外一个支持模式匹配的关键词就是新引入的 <code>guard</code> 关键词。它允许你像 <code>if let</code> 一样把 <code>optionals</code> 绑定到本地范围，而且不需要任何嵌套：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">example</span><span class="params">(a: String?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> a = a <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line">example(<span class="string">"yes"</span>)</span><br></pre></td></tr></table></figure>
<p><code>guard let case</code> 允许你做一些类似模式匹配所介绍的事情。让我们再来看一下士兵的例子。在玩家的血量变满之前，我们需要计算需要增加的血量。士兵不能涨血，所以对于士兵实体而言，我们始终返回 0。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">MAX_HP</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">healthHP</span><span class="params">(entity: Entity)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">Entity</span>.<span class="type">Entry</span>(.<span class="type">Player</span>, <span class="number">_</span>, <span class="number">_</span>, hp) = entity </span><br><span class="line">    <span class="keyword">where</span> hp &lt; <span class="type">MAX_HP</span> </span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">MAX_HP</span> - hp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Soldier"</span>, healthHP(<span class="type">Entity</span>.<span class="type">Entry</span>(type: .<span class="type">Soldier</span>, x: <span class="number">10</span>, y: <span class="number">10</span>, hp: <span class="number">79</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Player"</span>, healthHP(<span class="type">Entity</span>.<span class="type">Entry</span>(type: .<span class="type">Player</span>, x: <span class="number">10</span>, y: <span class="number">10</span>, hp: <span class="number">57</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="string">"Soldier 0"</span></span><br><span class="line"><span class="string">"Player 43"</span></span><br></pre></td></tr></table></figure>
<p>这是把我们目前讨论的各种机制用到极致的一个例子。</p>
<ul>
<li>它非常清晰，没有牵扯到任何嵌套</li>
<li>状态的逻辑和初始化是在 <code>func</code> 之前处理的，这样可以提高代码的可读性</li>
<li>非常简洁</li>
</ul>
<p>这也是 <code>switch</code> 和 <code>for</code> 的完美结合，可以把复杂的逻辑结构封装成易读的格式。当然，它不会让逻辑变得更容易理解，但是至少会以更清晰的方式展现给你。特别是使用 <code>enums</code> 的时候。</p>
<h1 id="使用_if_case"><strong>使用</strong> if case</h1><p><code>if case</code> 的作用和 <code>guard case</code> 相反。它是一种非常棒的在分支中打开和匹配数据的方式。结合之前 <code>guard</code> 的例子。很显然，我们需要一个 <code>move</code> 函数，这个函数允许我们表示一个实体在朝一个方向移动。因为我们的实体是 <code>enums</code>，所以我们需要返回一个更新过的实体。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">move</span><span class="params">(entity: Entity, xd: Int, yd: Int)</span></span> -&gt; <span class="type">Entity</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">case</span> <span class="type">Entity</span>.<span class="type">Entry</span>(<span class="keyword">let</span> t, <span class="keyword">let</span> x, <span class="keyword">let</span> y, <span class="keyword">let</span> hp) = entity</span><br><span class="line">	<span class="keyword">where</span> (x + xd) &lt; <span class="number">1000</span> &amp;&amp;</span><br><span class="line">	    (y + yd) &lt; <span class="number">1000</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">Entity</span>.<span class="type">Entry</span>(type: t, x: (x + xd), y: (y + yd), hp: hp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entity</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(move(<span class="type">Entity</span>.<span class="type">Entry</span>(type: .<span class="type">Soldier</span>, x: <span class="number">10</span>, y: <span class="number">10</span>, hp: <span class="number">79</span>), xd: <span class="number">30</span>, yd: <span class="number">500</span>))</span><br><span class="line"><span class="comment">// 输出: Entry(main.Entity.EntityType.Soldier, 40, 510, 79)</span></span><br></pre></td></tr></table></figure>
<h1 id="限制">限制</h1><p>一些限制已经在文章中说过，比如有关 <code>Expression Patterns</code> 的问题，看起来它似乎不能匹配 <code>tuples</code> （那样的话就真的很方便了）。在 Scala 和 Clojure 中，模式匹配在集合上同样可用，所以你可以匹配它的头部、尾部和部分等。<a href="#4">4</a>。这在 Swift 中是不支持的（<a href="http://austinzheng.com/2014/12/17/custom-pattern-matching/" target="_blank" rel="external">尽管 Austin Zheng 在我之前链接的博客里差不多实现了这一点</a>）</p>
<p>另外一种不可用的的情况是（这一点 Scala 同样做得很好）对类或者结构体进行解构。Swift 允许我们定义一个 <code>unapply</code> 方法，这个方法做的事情大体和 <code>init</code> 相反。实现这个方法，然后就可以让类型检查器对类进行匹配。而在 Swift 中，它看起来就像下面一样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Imaginary</span> </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> x: <span class="type">Int</span></span><br><span class="line">   <span class="keyword">let</span> y: <span class="type">Int</span></span><br><span class="line">   <span class="func"><span class="keyword">func</span> <span class="title">unapply</span><span class="params">()</span></span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>) &#123;</span><br><span class="line">     <span class="comment">// 实现这个方法之后，理论上来说实现了解构变量所需的所有细节</span></span><br><span class="line">     <span class="keyword">return</span> (<span class="keyword">self</span>.x, <span class="keyword">self</span>.y)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后这个就会自动 unapply 然后再进行匹配</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">Imaginary</span>(x, y) = anImaginaryObject <span class="keyword">else</span> &#123; <span class="keyword">break</span> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新">更新</h1><p><strong>08/21/2015</strong> 结合 <a href="https://www.reddit.com/r/swift/comments/3hq6id/match_me_if_you_can_swift_pattern_matching_in/" target="_blank" rel="external">Reddit 上 foBrowsing 的有用反馈</a></p>
<ul>
<li>增加 <code>guard case let</code></li>
<li>增加简化版的 let 语法（如：<code>let (x, y)</code> 替代 <code>(let x, let y)</code>）</li>
</ul>
<p><strong>08/22/2015</strong> <a href="https://www.reddit.com/r/swift/comments/3hq6id/match_me_if_you_can_swift_pattern_matching_in/" target="_blank" rel="external">似乎有一些东西我没测试好</a>。我列举的一些限制实际上是可用的，另外一个 Reddit 上的评论者（latrodectus）提出了一些非常有用的指正。</p>
<ul>
<li>将之前的修正为：所有的模式对三个关键词都适用，然后增加了一些要点案例</li>
<li>关于协议和表达式模式无效这个限制，其实没有的</li>
<li>增加 “模式可用性“章节</li>
</ul>
<p><strong>08/24/2015</strong> </p>
<ul>
<li>增加 <code>if case</code> 样例，重命名了一些章节。</li>
<li>修复了一些文本拼写错误。尤其我不小心写道：<code>_</code> 不能匹配 <code>nil</code>。那当然是不对的，<code>_</code> 可以匹配所有的东西。（感谢 <a href="https://github.com/obecker" target="_blank" rel="external">obecker</a>）</li>
</ul>
<p><strong>09/18/2015</strong></p>
<ul>
<li>添加了日语翻译的链接</li>
</ul>
<hr>
<p><a name="1">1.可以把它当做 <code>shell</code> 里面的 <code>*</code> 通配符</a></p>
<p><a name="2">2.我不清楚编译器是否在对这点进行了优化，但理论上来说，它应该能计算出所需数据的正确位置，然后忽略 <code>enum</code> 的其他情况并内联这个地址</a></p>
<p><a name="3">3.当然，不是 Haskell实现的对手：<br>fib 0 = 0<br>fib 1 = 1<br>fib n = fib (n-1) + fib (n-2)<br></a></p>
<p><a name="4">4.比如：switch [1, 2, 4, 3] {<br>case [<em>, 2, </em>, 3]:<br>}</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Benedikt Terhechte，<a href="http://appventure.me/2015/08/20/swift-pattern-matching-in-detail/">原文链接</a>，原文日期：2015-08-20<br>译者：<a href="http://blog.csdn.net/mmoaay">mmoaay</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在众多 Swift 提供给 Objective-C 程序员使用的新特性中，有个特性把自己伪装成一个无聊的老头，但是却在如何优雅的解决“鞭尸金字塔“的问题上有着巨大的潜力。很显然我所说的这个特性就是 <code>switch</code> 语句， 对于很多 Objective-C 程序员来说，除了用在 <a href="http://en.wikipedia.org/wiki/Duff%27s_device">Duff’s Device</a> 上比较有趣之外，<code>switch</code> 语句非常笨拙，与多个 <code>if</code> 语句相比，它几乎没有任何优势。</p>]]>
    
    </summary>
    
      <category term="APPVENTURE" scheme="http://swiftggteam.github.io/tags/APPVENTURE/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 中的范围和区间]]></title>
    <link href="http://swiftggteam.github.io/2015/10/26/swift-ranges-and-intervals/"/>
    <id>http://swiftggteam.github.io/2015/10/26/swift-ranges-and-intervals/</id>
    <published>2015-10-26T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Ole Begemann，<a href="http://oleb.net/blog/2015/09/swift-ranges-and-intervals/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-24<br>译者：<a href="http://www.dianqk.org/" target="_blank" rel="external">靛青K</a>；校对：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；定稿：<a href="http://www.swiftyper.com/" target="_blank" rel="external">小锅</a></p>
</blockquote>
<!--此处开始正文-->
<p>本系列其它文章：</p>
<p>(1)<a href="http://oleb.net/blog/2015/09/swift-pattern-matching/" target="_blank" rel="external">自定义模式匹配</a></p>
<p>(2)范围和区间(即本篇)</p>
<p>(3)<a href="http://oleb.net/blog/2015/09/more-pattern-matching-examples/" target="_blank" rel="external">更多有关模式匹配的例子</a></p>
<blockquote>
<p>下载本篇文章所需要的 <a href="http://oleb.net/media/swift-ranges-and-intervals.playground.zip" target="_blank" rel="external">playground</a> （Xcode7 运行环境）</p>
</blockquote>
<a id="more"></a>
<p>在前一篇<a href="http://oleb.net/blog/2015/09/swift-pattern-matching/" target="_blank" rel="external">有关模式匹配</a>的文章中，我提及标准库中已经针对<strong>范围和区间</strong>使用<code>~=</code>模式匹配操作符进行了重载。</p>
<p>这两个数据类型是相关的，但也有一些重要的区别。对于如何在<code>switch</code>中进行不等式条件匹配的问题，它们不失为一个可选的解决方案，本文将对它们进行深入讨论。</p>
<h2 id="Ranges">Ranges</h2><p>范围是用<a href="http://swiftdoc.org/swift-2/type/Range/" target="_blank" rel="external">Range</a>类型表达的。一个范围就是一个<em>索引</em>集合。</p>
<blockquote>
<p>注意：一个范围就是一个索引集合。</p>
</blockquote>
<p><em>Range</em>在标准库中被频繁使用，特别是处在集合的上下文当中时。当我们查看<code>Range</code>定义时，范围和集合之间的紧密关系一目了然：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&lt;<span class="title">Element</span> : <span class="title">ForwardIndexType</span>&gt; : <span class="title">CollectionType</span>, <span class="title">Indexable</span>, ... </span>&#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在一个范围中的元素必需遵守<code>ForwardIndexType</code>协议，同时<code>CollecitonType</code>协议中的大量功能也是基于它实现的。有一个特殊的类型用来表示集合索引的范围，对于获取一个集合的子集是相当有意义的。例如，我们可以使用范围获取一个数组的部分:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="comment">// 1..&lt;5 等价于 Range(start: 1, end: 5)</span></span><br><span class="line">numbers[<span class="number">1</span>..&lt;<span class="number">5</span>] <span class="comment">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure>
<p>正如类型定义中所看到的，<em>Range</em>自身遵循<code>CollectionType</code>协议，所以几乎所有数组可以做的事情，范围也能够适用。比如用<code>for</code>循环遍历元素，或者使用<code>contains(_:)</code>检查一个值是否在这个范围内。</p>
<p>虽然范围主要适用于与其他集合配合使用，但谁也无法阻止你创建一个用于表示数字区间的<code>Range&lt;Int&gt;</code>。毕竟<a href="http://swiftdoc.org/swift-2/type/Int/" target="_blank" rel="external">Int</a>已经实现了<code>ForwardIndexType</code>协议。现在回到我们的模式匹配问题。</p>
<p>我们可以用一个范围<code>(Int.min..&lt;0).contains(x)</code>表示 x &lt; 0 的情况，这是完全等价的，不过执行速度巨慢。毕竟默认需要遍历整个集合，最糟糕的情况下，将执行<a href="https://en.wikipedia.org/wiki/9223372036854775807" target="_blank" rel="external">9,223,372,036,854,775,808次</a>，这相当耗费资源。我们可以为<code>Comparable</code>（比如<code>Int</code>）类型的索引提供一个更好实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Range</span> <span class="title">where</span> <span class="title">Element</span> : <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(element: Element)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> element &gt;= startIndex &amp;&amp; element &lt; endIndex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span>).<span class="built_in">contains</span>(-<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">(<span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span>).<span class="built_in">contains</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line">(<span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span>).<span class="built_in">contains</span>(<span class="number">1</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>这是一个非常好的练习，不过在我们案例中可有可无，因为<code>~=</code>操作符为<code>Range</code>实现的匹配足够高效（就像我们的<code>contains(_:)</code>，<code>Comparable</code>只是在索引中工作）。所以我们可以这样的做：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span> ~= -<span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"><span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span> ~= <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span> ~= <span class="number">1</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>在这基础上，我们可以写一个<code>switch</code>语句，使用范围查询判断一个数字是否大于，小于还是等于 0，对吗？不幸地是，这并不适用。这段代码会崩溃：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>...<span class="type">Int</span>.<span class="built_in">max</span>: <span class="comment">// EXC_BAD_INSTRUCTION</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"positive"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"negative"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"zero"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">"Should be unreachable"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们会在<code>case 1...Int.max</code>这一行中得到一个<code>EXC_BAD_INSTRUCTION</code> 错误信息表明“fatal error: Range end index has no valid successor”。导致错误的原因在于:<code>range</code>中的<code>endIndex</code>总是指向范围中最后一个元素的后面。这对于半开区间（用 ..&lt; 操作符创建）和闭合区间（用 … 操作符创建）都是一样的，因为二者的内部实现是一样的，<code>a...b</code>事实上就是<code>a..&lt;b.successor()</code>。 </p>
<blockquote>
<p>注意：一个<code>Range&lt;Int&gt;</code>永远都不能有<code>Int.max</code></p>
</blockquote>
<p>这意味着<code>Int.max</code>永远都不会成为一个<code>Range&lt;Int&gt;</code>的成员，这同样适用于其他有最大值的类型。这个限制使范围不能满足我们所要的需求。所以接下来让我们来看看区间能不能满足我们的要求。</p>
<h2 id="区间">区间</h2><p>范围和区间是基本相同的概念构建的（一个连续元素的系列，有开始有结尾），但使用了不同的方法。范围基于索引，因此可以是个集合，他们的大多数功能都是基本这个特性的。区间<em>不是</em>集合，他们的实现是依赖<code>Comparable</code>协议的。我们只可以为服从<code>Comparable</code>协议的类型创建区间类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">IntervalType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Bound</span> : <span class="type">Comparable</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有别于范围的定义，区间使用<code>IntervalType</code>协议呈现，这个协议有两个具体的实现，<code>HalfOpenInterval</code>和<code>ClosedInterval</code>。两个范围操作符也为区间提供了重载：..&lt; 创建一个<code>HalfOpenInterval</code>和 … 创建一个<code>ClosedInterval</code>。由于默认是重载了<code>Range</code>，所以你必须明确变量为区间类型(IntervalType)：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> int1: <span class="type">HalfOpenInterval</span> = <span class="number">1</span>..&lt;<span class="number">5</span></span><br><span class="line">int1.<span class="built_in">contains</span>(<span class="number">5</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> int2: <span class="type">ClosedInterval</span> = <span class="number">1</span>...<span class="number">5</span></span><br><span class="line">int2.<span class="built_in">contains</span>(<span class="number">5</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>另一件事情就是记得<code>ClosedInterval</code>不可以为空，x…x 总是会包含 x，而 x…(x-1) 会造成运行时错误。</p>
<p>然而闭合区间可以包含一个类型的最大值。这意味着我们现在可以写我们的<code>switch</code>语句了。重复一遍，一定要明确类型，告诉编译器我们想要的是区间而不是范围：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>...<span class="type">Int</span>.<span class="built_in">max</span> <span class="keyword">as</span> <span class="type">ClosedInterval</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"positive"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">Int</span>.<span class="built_in">min</span>..&lt;<span class="number">0</span> <span class="keyword">as</span> <span class="type">HalfOpenInterval</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"negative"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"zero"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">"Should be unreachable"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为开区间定制操作符">为开区间定制操作符</h2><p>非常好，但我想摆脱<code>Int.min</code>和<code>Int.max</code>。为了达到这个目的，我们需要为开区间和闭区间自定义前缀操作符和后缀操作符，用于表示所有小于一个上边界的值，或者大于一个下边界的值。这样不仅在语法上要更友善；理想情况下，这些操作符不仅适用于 <code>Int</code> 类型，也可以适合于其它拥有最小和最大值的类型。实现看起来应该是这个样子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>...: <span class="comment">// an interval from 1 to Int.max (inclusive)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"positive"</span>)</span><br><span class="line"><span class="keyword">case</span> ..&lt;<span class="number">0</span>: <span class="comment">// an interval from Int.min to 0 (exclusive)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"negative"</span>)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们需要为 <code>..&lt;</code> 和 <code>...</code> 分别定义前缀和后缀的实现方式 。下面这段代码基本是基于 <a href="http://natecook.com/" target="_blank" rel="external">Nate Cook</a> 写的 <a href="https://gist.github.com/natecook1000/3b15b8bd974c8c08b3df" target="_blank" rel="external">gist片段</a> ，他已经在 2014 年 11 月使用范围和区间混合实现了它。我把使用区间的部分放在这里。</p>
<p>首先我们必须声明需要解释的操作符：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> ..&lt; &#123; &#125;</span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> ... &#123; &#125;</span><br><span class="line"><span class="keyword">postfix</span> <span class="keyword">operator</span> ..&lt; &#123; &#125;</span><br><span class="line"><span class="keyword">postfix</span> <span class="keyword">operator</span> ... &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>紧接着为<code>Int</code>实现第一个运算符的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Forms a half-open interval from `Int.min` to `upperBound`</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="func"><span class="keyword">func</span> ..<span class="generics">&lt; (upperBound: Int) -&gt;</span> <span class="title">HalfOpenInterval</span><span class="generics">&lt;Int&gt;</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>.<span class="built_in">min</span>..&lt;upperBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可以，但我们应该让它更通用。区间要求它的底层类型都遵循<code>Comparable</code>协议，所以使用相同的条件约束是一个很自然的选择。但在这里我们会碰到一个问题：我们需要知道 T 类型的最小值来创建区间，但这并没有一个通用的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="func"><span class="keyword">func</span> ..<span class="generics">&lt; &lt;T : Comparable&gt;</span><span class="params">(upperBound: T)</span></span> -&gt; <span class="type">HalfOpenInterval</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">T</span>.<span class="built_in">min</span>..&lt;upperBound <span class="comment">// error: type 'T' has no member 'min'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>甚至是在标准库中的其他协议都没有为数字（就比如<code>IntegerType</code>）提供这些–定义在数字类型中的<code>min</code>和<code>max</code>属性。</p>
<p>Nate 想出了一个很酷的解决方案：定义一个<code>MinMaxType</code>的自定义协议，这个协议定义了 <code>min</code> 和 <code>max</code> 两个属性。因为所有整数类型都有这两个属性，让他们遵守新的协议就不用额外写代码了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Conforming types provide static `max` and `min` constants.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MinMaxType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="built_in">min</span>: <span class="type">Self</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="built_in">max</span>: <span class="type">Self</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extend relevant types</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int8</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int16</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int32</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int64</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UInt</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UInt8</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UInt16</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UInt32</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UInt64</span> : <span class="title">MinMaxType</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这里有一个值得牢记的技巧。任何时候，当你有几个不相关的类型，但它们具有相同类型的一个或多个方法、属性，你都可以创建一个新的协议给他们提供一个通用接口。</p>
<blockquote>
<p>注意：任何时候，当你有几个不相关的类型，但它们具有相同类型的一个或多个方法、属性，你都可以创建一个新的协议给他们提供一个通用接口。</p>
</blockquote>
<p>告诉我们的通用类型 T 遵守<code>MinMaxType</code>协议以使这个实现可以正常运行：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Forms a half-open interval from `T.min` to `upperBound`</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="func"><span class="keyword">func</span> ..<span class="generics">&lt; &lt;T : Comparable where T : MinMaxType&gt;</span></span><br><span class="line">    <span class="params">(upperBound: T)</span></span> -&gt; <span class="type">HalfOpenInterval</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">T</span>.<span class="built_in">min</span>..&lt;upperBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是其他三个操作符的实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Forms a closed interval from `T.min` to `upperBound`</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="func"><span class="keyword">func</span> ... <span class="generics">&lt;T : Comparable where T : MinMaxType&gt;</span></span><br><span class="line">    <span class="params">(upperBound: T)</span></span> -&gt; <span class="type">ClosedInterval</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">T</span>.<span class="built_in">min</span>...upperBound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Forms a half-open interval from `lowerBound` to `T.max`</span></span><br><span class="line"><span class="keyword">postfix</span> <span class="func"><span class="keyword">func</span> ..<span class="generics">&lt; &lt;T : Comparable where T : MinMaxType&gt;</span></span><br><span class="line">    <span class="params">(lowerBound: T)</span></span> -&gt; <span class="type">HalfOpenInterval</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> lowerBound..&lt;<span class="type">T</span>.<span class="built_in">max</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Forms a closed interval from `lowerBound` to `T.max`</span></span><br><span class="line"><span class="keyword">postfix</span> <span class="func"><span class="keyword">func</span> ... <span class="generics">&lt;T : Comparable where T : MinMaxType&gt;</span></span><br><span class="line">    <span class="params">(lowerBound: T)</span></span> -&gt; <span class="type">ClosedInterval</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> lowerBound...<span class="type">T</span>.<span class="built_in">max</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加一些测试：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(..&lt;<span class="number">0</span>).<span class="built_in">contains</span>(<span class="type">Int</span>.<span class="built_in">min</span>) <span class="comment">// true</span></span><br><span class="line">(..&lt;<span class="number">0</span>).<span class="built_in">contains</span>(-<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">(..&lt;<span class="number">0</span>).<span class="built_in">contains</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">(...<span class="number">0</span>).<span class="built_in">contains</span>(<span class="type">Int</span>.<span class="built_in">min</span>) <span class="comment">// true</span></span><br><span class="line">(...<span class="number">0</span>).<span class="built_in">contains</span>(<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line">(...<span class="number">0</span>).<span class="built_in">contains</span>(<span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>..&lt;).<span class="built_in">contains</span>(-<span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line">(<span class="number">0</span>..&lt;).<span class="built_in">contains</span>(<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line">(<span class="number">0</span>..&lt;).<span class="built_in">contains</span>(<span class="type">Int</span>.<span class="built_in">max</span>) <span class="comment">// false</span></span><br><span class="line">(<span class="number">0</span>..&lt;).<span class="built_in">contains</span>(<span class="type">Int</span>.<span class="built_in">max</span> - <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>...).<span class="built_in">contains</span>(-<span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line">(<span class="number">0</span>...).<span class="built_in">contains</span>(<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line">(<span class="number">0</span>...).<span class="built_in">contains</span>(<span class="type">Int</span>.<span class="built_in">max</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>回到我们的<code>switch</code>语句，现在很好地工作了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>...:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"positive"</span>)</span><br><span class="line"><span class="keyword">case</span> ..&lt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"negative"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"zero"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">"Should be unreachable"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结论">结论</h2><p>Swift 中范围和区间都有相似的目的，但有着不同的实现和泛型约束。范围基于索引并且经常用于集合上下文中。这意味着范围不能包含一个类型最大值，这就不适合用在数字的区间上。区间兼容所有的<code>Comparable</code>类型，并且没有最大值的限制。</p>
<p>虽然我们应该对自定义操作符持谨慎的态度，但我认为在这个特定的例子中，他们可以明显地提高可读性而没有降低可理解性–这个前缀和后缀操作符非常接近他们原本的意思，甚至是不熟悉这段代码的读者在理解它的时候也不会有多大的困难。</p>
<p>即便如此，我还是认为在这个特定的例子中，使用自定义操作符来替代标准的 Swift 句法（case _ where x &gt; 0）所得到的好处是很小的，因此在实战代码中还是不值得使用。把这个方法暂时视为思考上的实践，而非推荐使用。</p>
<p>如果你喜欢这篇文章，你可能也会喜欢 Chris Eidhof 和 Airspeed Velocity 的即将出版的书，<a href="https://www.objc.io/books/advanced-swift/" target="_blank" rel="external">Swift 进阶</a>。他们对于相同的在区间下标上下文中的开闭区间主题讨论了很多其它的东西。我是这本书的技术审校，所以我的意见偏向的，但是如果你对 Swift 很感兴趣，我还是非常推荐这本书给你。这本书当前是 beta 状态，但是现在已经可以买到它的早期预览版了。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Ole Begemann，<a href="http://oleb.net/blog/2015/09/swift-ranges-and-intervals/">原文链接</a>，原文日期：2015-09-24<br>译者：<a href="http://www.dianqk.org/">靛青K</a>；校对：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；定稿：<a href="http://www.swiftyper.com/">小锅</a></p>
</blockquote>
<!--此处开始正文-->
<p>本系列其它文章：</p>
<p>(1)<a href="http://oleb.net/blog/2015/09/swift-pattern-matching/">自定义模式匹配</a></p>
<p>(2)范围和区间(即本篇)</p>
<p>(3)<a href="http://oleb.net/blog/2015/09/more-pattern-matching-examples/">更多有关模式匹配的例子</a></p>
<blockquote>
<p>下载本篇文章所需要的 <a href="http://oleb.net/media/swift-ranges-and-intervals.playground.zip">playground</a> （Xcode7 运行环境）</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Ole Begemann" scheme="http://swiftggteam.github.io/tags/Ole-Begemann/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3D Touch之我见]]></title>
    <link href="http://swiftggteam.github.io/2015/10/23/3d-touch-impressions-and-thoughts/"/>
    <id>http://swiftggteam.github.io/2015/10/23/3d-touch-impressions-and-thoughts/</id>
    <published>2015-10-23T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/3d-touch-impressions-and-thoughts" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-26<br>译者：<a href="http://www.brighttj.com" target="_blank" rel="external">saitjr</a>；校对：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<p>Hey，现在有了支持3D Touch的iPhone和iOS9，这是一项伟大的科技杰作。让我们看看这为开发者和用户都带来了什么呢。本文主要是我对3D Touch的理解，然后列举了一些需要注意的点。</p>
<a id="more"></a>
<h2 id="出师不利">出师不利</h2><p>本来我想写一篇入门级关于3D Touch的导读文章，但是遇到一个问题——Xcode7的模拟器并不能模拟3D Touch。</p>
<p>苹果官方的说法是：</p>
<blockquote>
<p>Xcode7.0中，你必须使用支持3D Touch的真机进行开发。因为Xcode7.0的模拟器不支持3D Touch。</p>
</blockquote>
<p>这是个悲伤的故事，但是又有什么办法呢。我想，苹果应该会想办法模拟出来。可能在下一个Xcode发布版本中就能看到。</p>
<p>另一个问题则是新的iPhone还没有在波兰发售，可能还要等2周（译者注：作者写文在波兰iPhone发售以前）。</p>
<p>还有一个办法，我10月要在San Francisco和Palo Alto呆上整整一月，所以我可能会买一部iPhone，但不确定是6s还是6s plus。</p>
<p>如果买了设备，那我肯定会发布一大波3D Touch的文章。</p>
<h2 id="Peek_and_pop操作">Peek and pop操作</h2><p>这是苹果介绍3D Touch的第一个特性——或者说是两个特性。</p>
<ul>
<li>轻压(peek,轻度按压)操作能让用户在不离开当前界面的情况下预览内容。如果轻按某个选项能够弹出一个小的矩形视图，则表明它支持轻压操作。</li>
<li>peek手势弹出的视图应该足够大，这样内容就不会被手指挡住，从而用户可以选择是否重压，即pop操作（译者注：peek操作即轻按，用于预览，pop操作则是重压，用于进一步确认。pop能满足在预览之后，进入特定页面的需求）。</li>
<li>pop则是当用户在peek弹出的视图上加重按压力度，显示更详细的内容。</li>
<li>即使peek能给用户足够多的信息，你也应该让用户将该操作转化为pop。pop所显示的界面应该和用户点击进入界面相同。</li>
<li>请勿在peek预览的界面中放入按钮，因为用户手指一离开预览界面，预览界面就会消失，所以根本点不到按钮。</li>
<li>当用户在预览界面中向上滑动时，peek可以提供一些快捷操作(quick action)。你可以在预览界面中添加一些快捷操作，这样用户就可以上滑，然后选择一个你所提供的操作了。</li>
<li>如果你为某个选项提供了长按手势事件(touch-and-hold，或者叫long press)，那么你可以用peek来代替长按手势，这是一个很好的尝试。</li>
<li>如果你想使用快捷操作、peek和pop，那么记住在使用前先判断3D Touch是否可用。</li>
<li>不是每个设备都支持peek和pop操作的，并且3D Touch也可能处于禁用状态。所以不要让某些事件只能由peek来触发。最好有一个备选方案，即视图也能通过长按手势来展示。</li>
</ul>
<h2 id="快捷操作">快捷操作</h2><p>接下来，介绍一些用户在重压应用图标时的一些快捷操作。</p>
<ul>
<li>弹出框包含了主标题、副标题与图标。</li>
<li>该操作可以在应用程序更新时，显示更新信息。</li>
<li>你的应用在Home界面中，应该至少提供一个快捷选项。这样用户就可以使用手势操作你的应用，方便快捷。</li>
<li>医用最多可以提供四个快捷操作。</li>
<li>不要使用快捷操作来提醒用户更新、变更之类的事。如有需要，通知(<em>Notifications</em>)更能胜任这些任务。</li>
<li>快捷操作的命名应该简洁，如有需要，还应该有副标题和图标。尽量让用户明确该操作的作用。如果提供了副标题，那么标题栏将会更长，如果大小不能适应，系统会自动截取。如果没有副标题，那么主标题过长会自动换行。</li>
</ul>
<h2 id="总结">总结</h2><p>3D Touch是一个非常爽的特性，它提供了全新的交互方式。设备中包含了一个线性振动器(Taptic Engine)，所以按压屏幕时，设备能有一定响应——太好了，迫不及待想要试试。</p>
<p>非常遗憾，苹果没有在最新的Xcode 7 beta 2中解决无法模拟的问题，还是希望他们尽快搞定吧——或许他们不修复是为了增加销量，因为用户已经迫不及待的想要试试这个新特性了，而最简单粗暴的方式，就是买个新设备 :D。</p>
<p>我已经迫不及待的想要尝试基于3D Touch的应用了，如游戏和画图，还有一些我想象不到的应用。或许还可以看到计量重量的应用，比如称一个水果的重量，或是一个放置在屏幕上的物体的重量等等 :&gt;。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/3d-touch-impressions-and-thoughts">原文链接</a>，原文日期：2015-09-26<br>译者：<a href="http://www.brighttj.com">saitjr</a>；校对：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<p>Hey，现在有了支持3D Touch的iPhone和iOS9，这是一项伟大的科技杰作。让我们看看这为开发者和用户都带来了什么呢。本文主要是我对3D Touch的理解，然后列举了一些需要注意的点。</p>]]>
    
    </summary>
    
      <category term="Tomasz Szulc" scheme="http://swiftggteam.github.io/tags/Tomasz-Szulc/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
      <category term="3D Touch" scheme="http://swiftggteam.github.io/categories/3D-Touch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 编程思想 Part 4：map all the things!]]></title>
    <link href="http://swiftggteam.github.io/2015/10/22/thinking-in-swift-4/"/>
    <id>http://swiftggteam.github.io/2015/10/22/thinking-in-swift-4/</id>
    <published>2015-10-22T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/2015/10/11/thinking-in-swift-4/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-11<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles" target="_blank" rel="external">ray16897188</a>；校对：<a href="http://www.futantan.com" target="_blank" rel="external">Prayer</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<p>系列文章地址：</p>
<ul>
<li><a href="http://swift.gg/2015/09/29/thinking-in-swift-1/" target="_blank" rel="external">Swift 编程思想，第一部分：拯救小马</a></li>
<li><a href="http://swift.gg/2015/10/09/thinking-in-swift-2/" target="_blank" rel="external">Swift 编程思想，第二部分：数组的 Map 方法</a></li>
<li><a href="http://alisoftware.github.io/swift/2015/10/03/thinking-in-swift-3/" target="_blank" rel="external">Swift编程思想第三部分：结构体和类</a></li>
</ul>
<p><a href="http://swift.gg/2015/10/09/thinking-in-swift-2/" target="_blank" rel="external">在本系列之前的文章中</a>我们学到了如何使用<code>map</code>和<code>flatMap</code>来操作数组(arrays)。今天我们继续研究如何对可选类型(Optionals)以及很多其他类型使用<code>map</code>和<code>flatMap</code>。</p>
<a id="more"></a>
<h3 id="数组_vs-_可选类型">数组 vs. 可选类型</h3><p>回顾一下，学完前面的文章后我们已经知道，<code>Array&lt;T&gt;</code>对应的<code>map()</code>和<code>flatMap()</code>函数签名是：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用在Array&lt;T&gt;上的方法</span></span><br><span class="line">    <span class="built_in">map</span>( transform: <span class="type">T</span> -&gt;          <span class="type">U</span>  ) -&gt; <span class="type">Array</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">flatMap( transform: <span class="type">T</span> -&gt;    <span class="type">Array</span>&lt;<span class="type">U</span>&gt; ) -&gt; <span class="type">Array</span>&lt;<span class="type">U</span>&gt;</span><br></pre></td></tr></table></figure>
<p>意思是你可以用一个给定的<code>transform: T-&gt;U</code>将一个元素类型是<code>T</code>的数组转换成一个元素类型是<code>U</code>的数组。对<code>Array&lt;T&gt;</code>调用<code>map( transform: T-&gt;U )</code>方法就会返回一个<code>Array&lt;U&gt;</code>，就这么简单。</p>
<p>嗯，不出意外，对于<code>Optional&lt;T&gt;</code>来说，<code>map()</code>和<code>flatMap()</code>的函数签名十分类似：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用在Optional&lt;T&gt;上的方法</span></span><br><span class="line">    <span class="built_in">map</span>( transform: <span class="type">T</span> -&gt;          <span class="type">U</span>  ) -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt;</span><br><span class="line">flatMap( transform: <span class="type">T</span> -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt; ) -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt;</span><br></pre></td></tr></table></figure>
<p>是不是很像？</p>
<h3 id="作用在可选类型上的_map()">作用在可选类型上的 map()</h3><p>那么<code>map</code>方法到底对<code>Optional&lt;T&gt;</code>类型(也叫做<code>T?</code>)做了什么？</p>
<p>其实很简单：和作用在<code>Array&lt;T&gt;</code>上的一样，<code>map</code>方法将<code>Optional&lt;T&gt;</code>中的内容取出来，用指定的<code>transform: T-&gt;U</code>方法做出转换，然后把结果包装成一个新的<code>Optional&lt;U&gt;</code>。</p>
<p>如果细想一下，这和<code>Array&lt;T&gt;.map</code>做的事情十分相似：这个方法对<code>Array&lt;T&gt;</code>(与之相应的是<code>Optional&lt;T&gt;</code>)中的每个元素使用<code>transform</code>函数转换，并将转换过的值封装在一个新的<code>Array&lt;U&gt;</code>中(与之相应的是<code>Optional&lt;U&gt;</code>)，作为结果返回。</p>
<h3 id="回到我们的例子">回到我们的例子</h3><p>那么这对我们一直在做的示例代码有什么帮助？</p>
<p>在<a href="http://alisoftware.github.io/swift/2015/10/03/thinking-in-swift-3/#converting-our-class-to-a-struct" target="_blank" rel="external">我们最新版代码中</a>，有一个<code>String?</code>类型的<code>itemDesc[&quot;icon&quot;]</code>，我们当时想把它转换成一个<code>UIImage</code>；但是<code>UIImage(named:)</code>要求传入一个<code>String</code>型的参数，而不是<code>String?</code>型，所以我们需要在可选型中确实有值时(非<code>nil</code>)将内部的<code>String</code>值传入。</p>
<p>一种解决方案是使用可选绑定(Optional Binding)：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> icon: <span class="type">UIImage</span>?</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> iconName = itemDesc[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">  icon = <span class="type">UIImage</span>(named: iconName)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  icon = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是对于一个如此简单的操作来说代码量太大。</p>
<p>之前的一个例子中我们用了另外一种(很不优雅的)方式，使用<code>nil</code>-联合操作符<code>??</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iconName = itemDesc[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> icon = <span class="type">UIImage</span>(named: iconName ?? <span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p>这么做是可以，但是之所以能够成功，是因为当<code>iconName</code>是<code>nil</code>时，我们实际上是使用了<code>UIImage(named: &quot;&quot;)</code>的初始化方法，这个初始化方法在传入空字符串时，会返回<code>nil</code>。但是这样的解决办法不是很好，因为我们是依赖于该初始化方法的特性（传入空字符串时，会返回<code>nil</code>）来实现的。</p>
<h3 id="来用_map_吧">来用 map 吧</h3><p>那么为什么不用<code>map</code>呢？本质上，我们是想要在<code>Optional&lt;String&gt;</code>不是<code>nil</code>的时候将其解包，把里面的值转换成一个<code>UIImage</code>对象然后把这个<code>UIImage</code>返回，这不就是一个绝佳的用例么？</p>
<p>试试看：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iconName = itemDesc[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">item.icon = iconName.<span class="built_in">map</span> &#123; imageName <span class="keyword">in</span> <span class="type">UIImage</span>(named: imageName) &#125;</span><br></pre></td></tr></table></figure>
<p>等会儿…. 编译不通过。能猜出为什么吗？</p>
<h3 id="哪儿有问题？">哪儿有问题？</h3><p>上面的代码中的问题是<code>UIImage(named: …)</code>也返回一个可选类型：如果对给定的<code>name</code>没有相应的图片，就不能创建出一个<code>UIImage</code>，所以这种情况下该初始化方法为<em>可失败的(failable)</em>，并返回<code>nil</code>，是完全合理的。</p>
<p>于是问题就在于我们给<code>map</code>的这个闭包用一个<code>String</code>作为参数而返回…一个<code>UIImage?</code>类型——因为图片的初始化方法是<em>可失败的</em>，会返回<code>nil</code>。再看一下<code>map</code>方法的签名，它想要的是一个<code>T-&gt;U</code>类型的闭包，这个闭包会返回一个<code>U?</code>类型。我们的例子中，<code>U</code>代表<code>UIImage?</code>的话，整个<code>map</code>表达式会返回一个<code>U?</code>类型，也就是…一个<code>UIImage??</code>类型…是的，一个双重可选类型，吓死宝宝了！</p>
<h3 id="flatMap()_来帮忙了">flatMap() 来帮忙了</h3><p><code>flatMap()</code>与<code>map</code>类似，但是做的是一个<code>T-&gt;U?</code>的转换(不是<code>T-&gt;U</code>)，它把结果“扁平化(顾名思义)”成一个单重的可选类型。这恰恰就是我们所需要的！</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iconName = itemDesc[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">item.icon = iconName.flatMap &#123; imageName <span class="keyword">in</span> <span class="type">UIImage</span>(named: imageName) &#125;</span><br></pre></td></tr></table></figure>
<p>实际中<code>flatMap</code>做了如下工作：</p>
<ul>
<li>如果<code>iconName</code>是<code>nil</code>的话，它就直接返回<code>nil</code>(但返回类型还是<code>UIImage?</code>)</li>
<li>如果<code>iconName</code>不是<code>nil</code>，它就把<code>transform</code>作用到<code>iconName</code>的实际的值上，尝试用这个<code>String</code>创建一个<code>UIImage</code>并将结果返回——结果本身已经是一个<code>UIImage?</code>类型，因此如果<code>UIImage</code>初始化方法失败的话，返回结果就是<code>nil</code>。</li>
</ul>
<p>简而言之，<code>item.icon</code>只会在<code>itemDesc[&quot;icon&quot;] as? String</code>非空、并且<code>UIImage(named: imageName)</code>初始化方法成功的情况下才是一个非空值。</p>
<p>和使用<code>??</code>欺骗初始化方法相比，这么做更好，更地道。</p>
<h3 id="把_init_当闭包来用">把 init 当闭包来用</h3><p>更进一步，由于现在 Xcode 7 可以通过类型的<code>.init</code>属性暴露该类型的构造器(constructors)，上面的代码还能写的更加紧凑。</p>
<p>这意味着<code>UIImage.init</code>本质上就已经是一个接收<code>String</code>并返回<code>UIImage?</code>的方法了，所以我们可以把它直接当成参数来调用<code>flatMap</code>，不用把它再包进一个闭包里！</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iconName = itemDesc[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">item.icon = iconName.flatMap(<span class="type">UIImage</span>.<span class="keyword">init</span>)</span><br></pre></td></tr></table></figure>
<p>哇哦！太魔幻了！</p>
<p><img src="/img/articles/thinking-in-swift-4/magic.gif1445562506.7864432" alt=""></p>
<p>好了，有人说这么写很难读懂，为了让代码更明了更清晰，在这里还是更喜欢用一个显式闭包。但是这只是关乎个人偏好，并且知道这么做可行也是好事。</p>
<h3 id="最终的Swift代码">最终的Swift代码</h3><p>下面就是将本课所学应用到之前代码里的样子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> icon: <span class="type">UIImage</span>?</span><br><span class="line">  <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> url: <span class="type">NSURL</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">listItemsFromJSONData</span><span class="params">(jsonData: NSData?)</span></span> -&gt; [<span class="type">ListItem</span>] &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> jsonData = jsonData,</span><br><span class="line">      <span class="keyword">let</span> json = <span class="keyword">try</span>? <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(jsonData, options: []),</span><br><span class="line">      <span class="keyword">let</span> jsonItems = json <span class="keyword">as</span>? <span class="type">Array</span>&lt;<span class="type">NSDictionary</span>&gt; <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> jsonItems.flatMap &#123; (itemDesc: <span class="type">NSDictionary</span>) -&gt; <span class="type">ListItem</span>? <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> title = itemDesc[<span class="string">"title"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</span><br><span class="line">        <span class="keyword">let</span> urlString = itemDesc[<span class="string">"url"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</span><br><span class="line">        <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: urlString)</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">      <span class="keyword">let</span> iconName = itemDesc[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">      <span class="keyword">let</span> icon = iconName.flatMap &#123; <span class="type">UIImage</span>(named: $<span class="number">0</span>) &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">ListItem</span>(icon: icon, title: title, url: url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="回头看一眼我们的_ObjC_代码">回头看一眼我们的 ObjC 代码</h3><p>花一点儿时间比较一下我们最终的 Swift 代码和<a href="http://alisoftware.github.io/swift/2015/09/06/thinking-in-swift-1/#the-objc-code" target="_blank" rel="external">最开始的ObjC代码</a>。我们着实改了很大一部分内容。</p>
<p>如果你仔细看一下 ObjC 和 Swift 代码，会发现 Swift 的代码量并不是那么少(ObjC 是 5+15 LoC<sup>1</sup>，对比 Swift 的 19 LoC)，但是<strong>安全性高了太多</strong>。</p>
<p>尤其是我们使用的<code>guard</code>，<code>try?</code>和<code>as?</code>会迫使我们去检查所有类型是否都如所期，ObjC 代码不会关心这些，因此可能崩溃💣💥。所以虽然代码量相当，但 ObjC 代码更危险。</p>
<h3 id="结论">结论</h3><p>通过本系列文章，我希望你能够意识到：不要尝试将你的 ObjC 代码直译成 Swift。相反，你要去重新考虑一下你的代码，重新想象一下你的代码。从一个空白状态开始，脑中秉持着 Swift 的理念重写你的代码总会比你把 ObjC 代码直译过来要好。</p>
<p>我没说过这是件容易的事儿。当你已经习惯了用 ObjC 写代码，熟悉了它的模式和写代码的方式的话，做出思维上的改变会需要一些时间。但是这绝对有更多的好处。</p>
<hr>
<p>以上就是 Swift 编程思想系列的最后一部分内容<sup>2</sup>。现在你要开始为新 Swift 项目发狂了，把 Swift 编程思想全部贯彻到你的脑海中。</p>
<p>祝用 Swift 编程愉快，并且…<br><img src="/img/articles/thinking-in-swift-4/map-all-the-things.jpg1445562507.5226758" alt="MAP 一切，FLATMAP 一切！"></p>
<hr>
<ol>
<li>Lines of Codes，指有多少行代码</li>
<li>我会马上发布一个收尾文章，留一个关于<em>Monads</em>的口风，并把这个系列真正完结。别愁，之后还有很多关于 Swift 的文章会陆续发布。</li>
</ol>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/2015/10/11/thinking-in-swift-4/">原文链接</a>，原文日期：2015-10-11<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles">ray16897188</a>；校对：<a href="http://www.futantan.com">Prayer</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<p>系列文章地址：</p>
<ul>
<li><a href="http://swift.gg/2015/09/29/thinking-in-swift-1/">Swift 编程思想，第一部分：拯救小马</a></li>
<li><a href="http://swift.gg/2015/10/09/thinking-in-swift-2/">Swift 编程思想，第二部分：数组的 Map 方法</a></li>
<li><a href="http://alisoftware.github.io/swift/2015/10/03/thinking-in-swift-3/">Swift编程思想第三部分：结构体和类</a></li>
</ul>
<p><a href="http://swift.gg/2015/10/09/thinking-in-swift-2/">在本系列之前的文章中</a>我们学到了如何使用<code>map</code>和<code>flatMap</code>来操作数组(arrays)。今天我们继续研究如何对可选类型(Optionals)以及很多其他类型使用<code>map</code>和<code>flatMap</code>。</p>]]>
    
    </summary>
    
      <category term="Crunchy Development" scheme="http://swiftggteam.github.io/tags/Crunchy-Development/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[集合视图重排教程]]></title>
    <link href="http://swiftggteam.github.io/2015/10/21/reordering-collection-view-cells-tutorial/"/>
    <id>http://swiftggteam.github.io/2015/10/21/reordering-collection-view-cells-tutorial/</id>
    <published>2015-10-21T01:00:00.000Z</published>
    <updated>2015-11-18T02:20:26.402Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：ioscreator，<a href="http://www.ioscreator.com/tutorials/reordering-collection-view-cells-tutorial" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-17<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="http://www.dianqk.org/" target="_blank" rel="external">靛青K</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>iOS 9 介绍了 Collection View 单元格的重新排序新特性。该特性默认开启，用户可以通过长按单元格的进行重新排序，调整其在视图中的位置。而我们要做的仅仅只是更新数据源模型。本教程中，我们将显示一些包含字母的单元格并对其进行重新排序。本教程部署于 iOS 9 和 Xcode 7。</p>
<a id="more"></a>
<p>打开 Xcode 并创建一个<strong>Single View Application</strong> ；Product Name 为 <strong>IOS9ReorderingCollectionViewTutorial</strong> ；紧接着在 Organization Name 和 Organization Identidier 两个输入框中填写你惯用的信息；开发语言选 <strong>Swift</strong> 同时确保设备为 <strong>iPhone</strong> 。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=1500w1445389581.348031" alt=""></p>
<p>选中 Main.StoryBoard 文件，删除已有的视图控制器；从对象库中（译者注：Object Library ，快捷键 control+option+command+3 ）拖拽一个 CollectionView Controller 到 Storyboard 中；选中拖入的视图控制器，在 Xcode 上方菜单栏依次选择<code>Editor -&gt; Embed in -&gt; Navagation Controller</code>插入一个 Navigation Controller ；确保选中新插入的导航控制器后，打开属性设置面板（译者注：Attribute Inspector ,快捷键 option+command+4 ），勾选 View Controller 部分中的<code>is Initial View Controller</code>复选框。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389582.5906994" alt=""></p>
<p>双击 Collection View Controller 中的导航栏，将标题改为“Alphabet”。选中 Collection View 后打开尺寸设置面板中（译者：Size Inspector ，快捷键 option+command+5 ）。将 Collection View 部分中的宽高设置为 100 。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389583.365586" alt=""></p>
<p>选中 Collection View Controller 中的单元格，前往属性设置面板（译者注：Attributes inspector ，快捷键 option+command+4 ），将单元格的背景色设为绿色。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389583.9036288" alt=""></p>
<p>前往属性设置面板，将 Collection Reusable View 部分中的 Identifier 设为“Cell”</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389584.315881" alt=""></p>
<p>从对象库中拖拽一个 Label 放置到单元格中。双击该 Label ，输入字母“A”。到目前为止，storyboard 内容如下:</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/CellSize.pngformat=2500w1445389584.655853" alt=""></p>
<p>既然我们已经将视图控制器从 Storyboard 中移除了，那么 ViewController.swift 文件一并删除了吧。添加一个新文件到项目中，选择 File -&gt; New File -&gt; iOS -&gt; Source -&gt; Cocoa Touch Class 点击 Next 跳转下一步，为这个类命名<strong>AlphabetViewController</strong> ，设为 UICollectionViewController 的子类。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=1500w1445389586.0430875" alt=""></p>
<p>接下来，为 Collection View Cell 创建一个类。添加一个新文件到项目中，选择 File -&gt; New File -&gt; iOS -&gt; Source -&gt; Cocoa Touch Class 点击 Next 跳转下一步，为这个类命名 <strong>AlphabetCell</strong> ，设为 UICollectionViewCell 的子类。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=1500w1445389586.6271925" alt=""></p>
<p>这些新创建的类需要和 storyboard 中的对象关联起来。为此，请选中 Storyboard 中的 Collection View Controller ，切换到 Identity Inspector 面板（译者注：快捷键 option+command+3 ），更改自定义类为 AlphabetViewController 。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389587.3706524" alt=""></p>
<p>依葫芦画瓢，选中 Storyboard 中的 Collection View Cell 并转到 Identity Inspector 面板，更改自定义类为 AlphabetCell 。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389587.6798098" alt=""></p>
<p>点击 Assistant Editor 按钮（译者注：快捷键 option+command+enter ），确保 <strong>AlphabetCell.swift</strong> 文件呈现在右侧面板。选中单元 Cell 中的 Label ,按住 Ctrl 键拖线至 <strong>AlphabetCell</strong> 类中创建以下 Outlet 接口:</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=750w1445389588.152526" alt=""></p>
<p>前往 <strong>AlphabetViewController.swift</strong> 文件，在 viewDidLoad 方法中，删除以下行:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.collectionView!.registerClass(<span class="type">UICollectionViewCell</span>.<span class="keyword">self</span>, forCellWithReuseIdentifier: reuseIdentifier)</span><br></pre></td></tr></table></figure>
<p>由于早前已在视图构建器中设置了重用标识符，因此这里不再需要。此外新增一个属性变量用于存储字母表。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> characterArray = [<span class="type">String</span>]()</span><br></pre></td></tr></table></figure>
<p>修改<strong>viewDidLoad</strong>方法中的内容:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str:<span class="type">String</span> = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="comment">//原文最后一个字符是X 不知道是不是作者笔误</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str.characters&#123;</span><br><span class="line">        characterArray.append(<span class="type">String</span>(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面方法中将字母表中的每个单词都分配到 characterArray 数组当中。接着，更改以下三个预定义的 Collection View 代理方法中的内容:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">numberOfSectionsInCollectionView</span><span class="params">(collectionView: UICollectionView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">      <span class="comment">// 1</span></span><br><span class="line">      <span class="comment">// Return the number of sections</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">      <span class="comment">// 2 Return the number of items in the section</span></span><br><span class="line">      <span class="keyword">return</span> characterArray.<span class="built_in">count</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">      <span class="comment">// 3</span></span><br><span class="line">      <span class="keyword">let</span> cell = collectionView.dequeueReusableCellWithReuseIdentifier(<span class="string">"Cell"</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">AlphabetCell</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment">// Configure the cell</span></span><br><span class="line">      cell.alphabetLabel.text = characterArray[indexPath.row]</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> cell</span><br><span class="line">  &#125;</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. <span class="type">Collection</span> <span class="type">View</span> 仅包含一个 section</span><br><span class="line"><span class="number">2</span>. <span class="type">Collection</span> <span class="type">View</span> 中的每个 section 包含 <span class="number">26</span> 个 item</span><br><span class="line"><span class="number">3</span>. 每一个 <span class="type">Cell</span> 单元格的内容为字母表中的一个字母。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当重新调整单元格位置时，内容也要随之而改变。我们可以在 **<span class="type">CollectionView</span>:moveItemAtIndexPath:toIndexPath** 方法中实现。</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, moveItemAtIndexPath sourceIndexPath: NSIndexPath,toIndexPath destinationIndexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">        <span class="comment">// swap values if sorce and destination</span></span><br><span class="line">        <span class="keyword">let</span> temp = characterArray[sourceIndexPath.row]</span><br><span class="line">        characterArray[sourceIndexPath.row] = characterArray[destinationIndexPath.row]</span><br><span class="line">        characterArray[destinationIndexPath.row] = temp</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>校对注：这里我们可以使用元组的特性完成值的交换<code>(characterArray[sourceIndexPath.row], characterArray[destinationIndexPath.row]) = (characterArray[destinationIndexPath.row], characterArray[sourceIndexPath.row])</code></p>
</blockquote>
<p>构建并运行项目，长按某个单元格后拖动调整它的位置。</p>
<p><img src="/img/articles/reordering-collection-view-cells-tutorial/format=1500w1445389588.5267599" alt=""></p>
<p>你可以从<a href="https://github.com/ioscreator/ioscreator" target="_blank" rel="external">github</a>上下载 IOS9ReorderingCollectionViewTutorial 的源代码。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：ioscreator，<a href="http://www.ioscreator.com/tutorials/reordering-collection-view-cells-tutorial">原文链接</a>，原文日期：2015-09-17<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="http://www.dianqk.org/">靛青K</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>iOS 9 介绍了 Collection View 单元格的重新排序新特性。该特性默认开启，用户可以通过长按单元格的进行重新排序，调整其在视图中的位置。而我们要做的仅仅只是更新数据源模型。本教程中，我们将显示一些包含字母的单元格并对其进行重新排序。本教程部署于 iOS 9 和 Xcode 7。</p>]]>
    
    </summary>
    
      <category term="ioscreator" scheme="http://swiftggteam.github.io/tags/ioscreator/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
