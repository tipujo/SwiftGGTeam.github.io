<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SwiftGG]]></title>
  <subtitle><![CDATA[走心的 Swift 翻译组]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://swiftggteam.github.io/"/>
  <updated>2015-12-18T08:30:16.605Z</updated>
  <id>http://swiftggteam.github.io/</id>
  
  <author>
    <name><![CDATA[SwiftGG]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Swift 的变化：从 2.2 到 3.0 会带来什么]]></title>
    <link href="http://swiftggteam.github.io/2015/12/18/changing-swift-whats-coming-up-in-2-2-and-3-0/"/>
    <id>http://swiftggteam.github.io/2015/12/18/changing-swift-whats-coming-up-in-2-2-and-3-0/</id>
    <published>2015-12-17T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.605Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/03/changing-swift-whats-coming-up-in-2-2-and-3-0/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-03<br>译者：<a href="undefined">Channe</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>如果你还没看过 <a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">Swift 发展路线图</a>，我建议你要好好看一看。目前为止，有四个针对 <code>Swift 3</code> 和一个针对 <code>Swift 2.2</code> 的提议已经被接受，也许其中的某些能让你会心一笑。</p>
<p>显然，这些提议中最令人振奋的是 API 翻译的改进，旨在<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md" target="_blank" rel="external">废除冗长的 <code>Objective-C</code> 式的风格</a>，形成调用简洁且易读的 <code>Swift</code> 风格。</p>
<a id="more"></a>
<p>看上去显而易见我们将要和<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md" target="_blank" rel="external">函数柯里化声明</a>说再见了，虽然这是没有语法糖语言共有的特性。这是我能忍受的东西，但是这点改变并不会让我开心起来 — 除此之外似乎有迫切的原因去降低语言的复杂度。</p>
<p><code>++</code> 和 <code>--</code>（<strong>这是两个减号，不是破折号</strong>）运算符也在<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="external">移除的部分</a>中。它们最初是为了和 C 语言一致而引入的，但它们的结果值通常不会被检查。对大部分开发者来说，很容易可以用 <code>+=</code> 和 <code>-=</code> 替代它们。</p>
<p>最后，<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md" target="_blank" rel="external">var 形式的函数参数</a>将会被移除，因为它们现在的实现是从复制和修改步骤中抽象出来，而这造成了困惑。我觉得这不是一个大损失，只是需要你声明一个函数内 var 变量赋值来替代它。</p>
<p>十分有趣是，除了 <code>++</code> 和 <code>--</code> 的改变，几乎所有的变更点我都在<a href="http://ericasadun.com/2015/11/19/swift-developers-cookbook-status-update-mark-december-17-on-your-calendars/" target="_blank" rel="external">新书</a>中提到了。</p>
<p>已经被接受的 <code>Swift 2.2</code> 提案允许你<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md" target="_blank" rel="external">用关键字作为参数标签</a>，这使得现在可以这样声明：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">touchesMatching</span><span class="params">(phase: NSTouchPhase, <span class="keyword">in</span> view: NSView?)</span></span> -&gt; <span class="type">Set</span>&lt;<span class="type">NSTouch</span>&gt;</span><br></pre></td></tr></table></figure>
<p><code>Swift 3.0</code> 承诺会保持 <code>ABI（Application Binary Interface）</code>的稳定性：「成功保持 ABI 稳定性意味着，即便源代码语言发生了变化，用以后版本的 Swift 开发的应用程序和编译库能在二进制层次上和 Swift 3.0 版本的应用程序和编译库相互调用。」</p>
<p>开发团队利用这个机会做个类型系统清理，包括所有语言的小改良，同时「完整完成」基类系统。代码迁移者将把项目从 2.x 版迁到 3.x 版。基础代码或多或少能保证与这次大更新没关系。</p>
<p>最终的 API 设计指导原则发布在<a href="https://swift.org/documentation/api-design-guidelines.html" target="_blank" rel="external">这个网址</a>。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/03/changing-swift-whats-coming-up-in-2-2-and-3-0/">原文链接</a>，原文日期：2015-12-03<br>译者：<a href="undefined">Channe</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>如果你还没看过 <a href="https://github.com/apple/swift-evolution">Swift 发展路线图</a>，我建议你要好好看一看。目前为止，有四个针对 <code>Swift 3</code> 和一个针对 <code>Swift 2.2</code> 的提议已经被接受，也许其中的某些能让你会心一笑。</p>
<p>显然，这些提议中最令人振奋的是 API 翻译的改进，旨在<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md">废除冗长的 <code>Objective-C</code> 式的风格</a>，形成调用简洁且易读的 <code>Swift</code> 风格。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 iOS8 和 iOS9 中锁定视图自动旋转]]></title>
    <link href="http://swiftggteam.github.io/2015/12/17/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/"/>
    <id>http://swiftggteam.github.io/2015/12/17/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/</id>
    <published>2015-12-16T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Weston Hanners，<a href="http://www.alloc-init.com/2015/11/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-18<br>译者：<a href="undefined">littledogboy</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>这周我在开发一个 App，客户想要此 App 在某些情况下锁定竖屏，某些情况下锁定横屏。幸运的是，我已经在自动布局下创建了所有的视图，因此它们已经支持所需的约束，我仅需要锁定视图旋转。<br><a id="more"></a></p>
<p>旋转 API 属于 UIKit 中经常被弃用的内容，因此当我开始旋转工作时，不得不查一下。我还想说，弃用和替换相关的 API 太麻烦了。经过一个小时左右的研究和两个小时的实践，我终于整出了两部分。（译者注：=W=，我当时也搞了好久）</p>
<ul>
<li>选中 <code>Info.plist</code> 文件中所有你想要支持的旋转方向。</li>
</ul>
<p><img src="/img/articles/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/InterfaceOrientation.png1450312516.562497" alt=""></p>
<ul>
<li>然后我们仅需要实现一个方法。</li>
</ul>
<p>Swift 1.2</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">UIInterfaceOrientationMask</span>.<span class="type">Portrait</span>.rawValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swift 2.0</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">UIInterfaceOrientationMask</span>.<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确保选中你想要锁定的方向是横屏还是竖屏。</p>
<p>这可能是我最近看到过的最乱的接口改动，并且我花了好长时间才意识到我在 Swift 1.2 中犯下的错误。（那个 Int cast 太丑了）</p>
<p><a href="http://www.alloc-init.com/wp-content/uploads/2015/11/RotationTest.zip" target="_blank" rel="external">Sample Code</a> (Swift 1.2 Project)</p>
<p><strong>Update 11/18/2015:</strong></p>
<p>我刚刚意识到,我标题有点词不达意。</p>
<p><strong>“使用一个小技巧锁定视图控制器”</strong></p>
<p>好吧，下不为例。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Weston Hanners，<a href="http://www.alloc-init.com/2015/11/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/">原文链接</a>，原文日期：2015-11-18<br>译者：<a href="undefined">littledogboy</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>这周我在开发一个 App，客户想要此 App 在某些情况下锁定竖屏，某些情况下锁定横屏。幸运的是，我已经在自动布局下创建了所有的视图，因此它们已经支持所需的约束，我仅需要锁定视图旋转。<br>]]>
    
    </summary>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/tags/Swift-%E5%85%A5%E9%97%A8/"/>
    
      <category term="alloc-init" scheme="http://swiftggteam.github.io/categories/alloc-init/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[原创] 每周 Swift 社区问答 2015-12-16]]></title>
    <link href="http://swiftggteam.github.io/2015/12/16/swift-qa-2015-12-16/"/>
    <id>http://swiftggteam.github.io/2015/12/16/swift-qa-2015-12-16/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2015-12-16T12:10:18.360Z</updated>
    <content type="html"><![CDATA[<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Unwrapping NSNumber works fine in iOS Simulator but unexpectedly found nil on iPhone</a></li>
<li><a href="#Q2">Why my code is working in playground but not in my project?</a></li>
<li><a href="#Q3">Failable initialisers and unbound instance vars</a></li>
<li><a href="#Q4">Read-only property</a></li>
<li><a href="#Q5">Why? insert a new element into array and it always crash!</a></li>
<li><a href="#Q6">binary operator ‘??’ cannot be applied to functions?</a></li>
<li><a href="#Q7">Filter array on type</a> </li>
<li><a href="#Q8">Numbers in swift</a></li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151216/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151216.playground" target="_blank" rel="external">点击下载</a></p>
<a id="more"></a>
<p><a name="Q1"></a></p>
<h2 id="Q1:_Unwrapping_NSNumber_works_fine_in_iOS_Simulator_but_unexpectedly_found_nil_on_iPhone">Q1: Unwrapping NSNumber works fine in iOS Simulator but unexpectedly found nil on iPhone</h2><p><a href="https://forums.developer.apple.com/thread/27726" target="_blank" rel="external">Q1链接地址</a></p>
<h3 id="问题描述">问题描述</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = <span class="type">Array</span>&lt;<span class="type">String</span>&gt;()  </span><br><span class="line">stack.append(<span class="string">"2.3"</span>)  </span><br><span class="line"><span class="keyword">let</span> lastElement = stack.popLast()!  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Popped last element: <span class="subst">\(lastElement)</span>"</span>)  </span><br><span class="line"><span class="keyword">let</span> number = <span class="type">NSNumberFormatter</span>().numberFromString(lastElement)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"NSNumber gives us: <span class="subst">\(lastElement)</span>"</span>)  </span><br><span class="line"><span class="keyword">let</span> doubleValue = number!.doubleValue  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Double value of this element is: <span class="subst">\(doubleValue)</span>"</span>)</span><br></pre></td></tr></table></figure>
<p>上述代码在Playground 以及iOS 模拟器中执行结果如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Popped</span> last element: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">NSNumber</span> gives us: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">Double</span> value of this element <span class="keyword">is</span>: <span class="number">2.3</span></span><br></pre></td></tr></table></figure>
<p>但是在真机里是这样的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Popped</span> last element: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">NSNumber</span> gives us: <span class="number">2.3</span>  </span><br><span class="line">fatal error: unexpectedly found <span class="literal">nil</span> <span class="keyword">while</span> unwrapping an <span class="type">Optional</span> value  </span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure>
<p>所以提问者修改了一行代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> doubleValue = number?.doubleValue</span><br></pre></td></tr></table></figure>
<p>再次执行：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Popped</span> last element: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">NSNumber</span> gives us: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">Double</span> value of this element <span class="keyword">is</span>: <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>发现解包失败，值为 nil，那么问题出在那里呢？</p>
<h3 id="解答">解答</h3><p>由<a href="https://forums.developer.apple.com/people/junkpile" target="_blank" rel="external">junkpile</a>解答：</p>
<p>你的手机所处国家可能对小数分隔符的定义是一个逗号‘,’，而不是句号‘.’ 看到这个回答我也是醉了，最后提问者现身说法，确实他设置的德国是使用逗号作为小数分隔符的，所以解包失败。</p>
<p>junkpile 还给出了一个小建议：</p>
<p>在需要对数字字符串进行格式化的地方，比如输入数字的用户控件，你就需要显式的指定数字格式的本地化属性。反之在接收用户输入的数字时，你应该判断本地化属性，让一切尽在掌握中。</p>
<p><a name="Q2"></a></p>
<h2 id="Q2:Why_my_code_is_working_in_playground_but_not_in_my_project?">Q2:Why my code is working in playground but not in my project?</h2><p><a href="https://forums.developer.apple.com/thread/27764" target="_blank" rel="external">Q2链接地址</a></p>
<h3 id="问题描述-1">问题描述</h3><p>使用 NSDateFormater 解析一个字符串日期，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit  </span><br><span class="line"><span class="keyword">let</span> lTs = <span class="type">String</span>(<span class="string">"Mon, 07 Dec 2015 3:58 pm EST"</span>)  </span><br><span class="line"><span class="keyword">let</span> dateFormatter = <span class="type">NSDateFormatter</span>()  </span><br><span class="line">dateFormatter.dateFormat = <span class="string">"EEE, dd MMM yyyy h:mm a zzz"</span>  </span><br><span class="line"><span class="keyword">let</span> lDate = dateFormatter.dateFromString(lTs)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(lDate!)</span>"</span>)</span><br><span class="line"><span class="comment">// 输出The result is "2015-12-07 20:58:00 +0000\n"</span></span><br></pre></td></tr></table></figure>
<p>不过当提问者复制这段代码到项目中时（原来在playground）,居然crash掉了，问题出在对<code>lDate!</code>解包过程。</p>
<h3 id="问题解答">问题解答</h3><p>由苹果员工<a href="https://forums.developer.apple.com/people/eskimo" target="_blank" rel="external">eskimo</a>解答：</p>
<p>如果是对固定格式的字符串日期解析，你需要确定用户所在地域的local。</p>
<p>增加一行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.locale = <span class="type">NSLocale</span>(localeIdentifier: <span class="string">"en_US_POSIX"</span>)</span><br></pre></td></tr></table></figure>
<p>最近 swift.gg 也有一篇文章详解了 NSDate 的正确使用姿势，包含了日期格式的一些知识点，有兴趣的同学可以看看：<a href="http://swift.gg/2015/12/14/a-beginners-guide-to-nsdate-in-swift/" target="_blank" rel="external">Swift 的 NSDate 初学者指南</a></p>
<p><a name="Q3"></a></p>
<h2 id="Q3:Failable_initialisers_and_unbound_instance_vars">Q3:Failable initialisers and unbound instance vars</h2><p><a href="https://forums.developer.apple.com/thread/27743" target="_blank" rel="external">Q3链接地址</a></p>
<h3 id="问题描述-2">问题描述</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">let</span> a :<span class="type">Int</span>  </span><br><span class="line">    <span class="keyword">let</span> b : <span class="type">Int</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(name: <span class="type">String</span>, m: <span class="type">Int</span>, n: <span class="type">Int</span>)&#123;  </span><br><span class="line">        <span class="keyword">if</span> name != <span class="string">"fistro"</span> &#123;  </span><br><span class="line">            a = m  </span><br><span class="line">            b = n  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器报错在 else{} 内并未对 a,b 进行变量初始化，但是其实提问者是想说，既然是一个可失败的构造器，为什么一定要对 a,b进行赋值才能返回 nil 呢？</p>
<h3 id="问题解答-1">问题解答</h3><p><a href="https://forums.developer.apple.com/people/Jessy" target="_blank" rel="external">Jessy</a>提供了这么一个方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> a :<span class="type">Int</span></span><br><span class="line">	<span class="keyword">let</span> b : <span class="type">Int</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">init</span>?(name: <span class="type">String</span>, m: <span class="type">Int</span>, n: <span class="type">Int</span>)&#123;</span><br><span class="line">		a = m</span><br><span class="line">		b = n</span><br><span class="line">		<span class="keyword">guard</span> name == <span class="string">"fistro"</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后<a href="https://forums.developer.apple.com/people/ChrisLattner" target="_blank" rel="external">ChrisLattner</a>大神(swift之父)站出来了，明确说了：</p>
<p>这是 Swift 2.1 版本的限制，在即将发布的 Swift 2.2 中已经修复啦。</p>
<p>这里给个stackoverflow类似的问题链接：<a href="http://stackoverflow.com/questions/26495586/best-practice-to-implement-a-failable-initializer-in-swift" target="_blank" rel="external">http://stackoverflow.com/questions/26495586/best-practice-to-implement-a-failable-initializer-in-swift</a></p>
<p><a name="Q4"></a></p>
<h2 id="Q4:Read-only_property">Q4:Read-only property</h2><h3 id="问题链接">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/27892" target="_blank" rel="external">Q4链接地址</a></p>
<h3 id="问题描述-3">问题描述</h3><p>日常项目开发中，我们会遇到一些 Access Control 的问题。譬如，我想要在类中实现一个属性对外是readonly(可读)，对内是write and read(可读写)。那么如何实现是最好的呢？下面提供一个简单的思路。</p>
<h3 id="代码实现">代码实现</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="comment">// 对内可修改属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> gip: <span class="type">Bool</span> = <span class="literal">false</span>  </span><br><span class="line"><span class="comment">// 这是一个对外的可读属性</span></span><br><span class="line"><span class="keyword">var</span> gameInProgress: <span class="type">Bool</span> &#123;  </span><br><span class="line">     <span class="keyword">return</span> gip  </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过这并不是一个最佳的选择，希望有知道的小伙伴可以私信咱们。</p>
<p><a name="Q5"></a></p>
<h2 id="Q5:_Why?_insert_a_new_element_into_array_and_it_always_crash!">Q5: Why? insert a new element into array and it always crash!</h2><h3 id="问题链接-1">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/27803" target="_blank" rel="external">Q5链接地址</a></p>
<h3 id="问题描述-4">问题描述</h3><p>以下代码会在第三行崩溃：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldNums: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span> , <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> newArray = oldNums[<span class="number">1</span>..&lt;<span class="number">4</span>]</span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">0</span>) <span class="comment">// &lt;-- crash here</span></span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">1</span>) <span class="comment">// &lt;-- work very well</span></span><br></pre></td></tr></table></figure>
<h3 id="问题解答-2">问题解答</h3><p>先看下 newArray 的类型以及其他一些属性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>) <span class="comment">//-&gt;ArraySlice&lt;Int&gt;  </span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>) <span class="comment">//-&gt;1..&lt;4</span></span><br></pre></td></tr></table></figure>
<p>显然 newArray 并不是一个数组，而是一个SliceArray，它的 StartIndex 是从 1 开始的，也就是通过 [1..&lt;4] 截取的下标开始的，所以插入下标为 0 的位置，就会报错。</p>
<p>修改如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">newArray.insert(<span class="number">99</span>, atIndex: newArray.startIndex)</span><br></pre></td></tr></table></figure>
<p>当然如果你还是偏执地想要从0开始 那么不妨重新搞一个数组喽，要知道 Array 有个sliceArray 的构造方法。所以改动如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldNums: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span> , <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> sliceArray = oldNums[<span class="number">1</span>..&lt;<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> newArray = <span class="type">Array</span>(oldNums[<span class="number">1</span>..&lt;<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>)	<span class="comment">//array</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>)			<span class="comment">//0..&lt;3 数组下标为0 1 2</span></span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">0</span>) <span class="comment">//在0位置插入一个元素</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>)          <span class="comment">//array</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>)                  <span class="comment">//0..&lt;4 数组下标为0 1 2 3</span></span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">1</span>) <span class="comment">//在1位置插入一个元素</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>)</span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>)                  <span class="comment">//0..&lt;5 数组下标为0 1 2 3 4</span></span><br></pre></td></tr></table></figure>
<p><a name="Q6"></a></p>
<h2 id="Q6:binary_operator_‘??’_cannot_be_applied_to_functions?">Q6:binary operator ‘??’ cannot be applied to functions?</h2><h3 id="问题链接-2">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/28099" target="_blank" rel="external">Q6链接地址</a></p>
<h3 id="问题描述-5">问题描述</h3><p>在 Playground 中运行以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">return</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">var</span> f2:(()-&gt;())?  </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f3 = f2 ?? f1</span><br></pre></td></tr></table></figure>
<p>直接报错：binary operator ‘??’ cannot be applied to operands of type ‘(() -&gt; ())?’ and ‘() -&gt; ()’</p>
<h3 id="问题解答-3">问题解答</h3><p>其实Chris Lattner 大神说了：这就是个已知的 BUG ! 处理 autoclosure 和 function 时已经有人 report 过了。</p>
<p>不过呢<a href="https://forums.developer.apple.com/people/OOPer" target="_blank" rel="external">OOPer</a>还是提供了他自己的解决方式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = f1  </span><br><span class="line"><span class="keyword">let</span> f3 = f2 ?? f  <span class="comment">//不再报错</span></span><br></pre></td></tr></table></figure>
<p>注意倘若把 var 变成 let 常量定义的话就报错了!</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = f1  </span><br><span class="line"><span class="keyword">let</span> f3 = f2 ?? f  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<p>亲测在 swift2 中依然存在这个BUG！希望大家引起注意。</p>
<p><a name="Q7"></a></p>
<h2 id="Q7:_Filter_array_on_type">Q7: Filter array on type</h2><h3 id="问题链接-3">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/28185" target="_blank" rel="external">Q7链接地址</a></p>
<h3 id="问题描述-6">问题描述</h3><p>请看下面问题：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明了一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span>:<span class="title">X</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:<span class="title">X</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a :[<span class="type">X</span>]</span><br><span class="line"><span class="keyword">var</span> a1:[<span class="type">X1</span>]</span><br><span class="line"><span class="comment">// 注意这里有些是用X1初始化 有些是用X2初始化</span></span><br><span class="line"><span class="comment">// 但是a数组的类型切记是[X],之所以能这么干的原因在于</span></span><br><span class="line"><span class="comment">// X1 X2都是X的子类，严格意义上来说，说X1 X2是X也是OK的</span></span><br><span class="line">a=[<span class="type">X1</span>(<span class="number">1</span>),<span class="type">X1</span>(<span class="number">2</span>),<span class="type">X2</span>(<span class="number">3</span>),<span class="type">X2</span>(<span class="number">4</span>),<span class="type">X1</span>(<span class="number">5</span>)]</span><br><span class="line">a[<span class="number">0</span>].v  <span class="comment">//输出1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误来了</span></span><br><span class="line">a1 = a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span> &#125; <span class="comment">// ERROR</span></span><br><span class="line">a1[<span class="number">2</span>].v</span><br></pre></td></tr></table></figure>
<blockquote>
<p>is 关键字就是用来判断某个实例的所属类，注意说的是实例。</p>
</blockquote>
<p>报错：    </p>
<p><code>Playground execution failed: playground78.swift:15:8: error: cannot invoke &#39;filter&#39; with an argument list of type &#39;(@noescape (X) throws -&gt; Bool)&#39;</code></p>
<p>然后提问者就想可能是自己闭包格式没写全，于是又这么改：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.<span class="built_in">filter</span> &#123; (p:<span class="type">X</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> p <span class="keyword">is</span> <span class="type">X1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>不出意外，还是挂了。</p>
<h3 id="问题解答-4">问题解答</h3><p>首先我们要明白 <code>filter</code> 方法的用法，filter 函数接收一个闭包作为筛选数组元素的过滤器，闭包一次处理一个元素，符合返回<code>true</code>，反之<code>false</code>。只有那些<code>true</code>的元素才会被<code>append</code>到结果数组中返回。更多filter函数请点击<a href="http://www.jianshu.com/notebooks/1752038/latest" target="_blank" rel="external">这里</a>。</p>
<p>现在来看看问题代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>先看式子右边<code>a.filter { $0 is X1 }</code>传入了一个简化版闭包<code>$0 is X1</code>，其实就是作为筛选条件，一旦a中元素的类型为<code>X1</code>，即我们想要的元素，不过这里的元素类型依旧是<code>X</code>，而非<code>X1</code>，不难得出最后返回的是<code>[X]</code>结果数组； 在看式子左边<code>a1</code>，这货的类型是<code>[X1]</code>。原因找到了！就是因为<code>[X1]≠[X]</code>造成的，修改方式嘛，自然就是<code>as</code>喽。所以最后修改代码如下</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.<span class="built_in">filter</span>&#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span>&#125; <span class="keyword">as</span>! [<span class="type">X1</span>]</span><br><span class="line">a1.<span class="built_in">map</span>&#123;<span class="built_in">print</span>(<span class="string">"<span class="subst">\($<span class="number">0</span>.v)</span>"</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>其实吧，我更推荐第二种方式，使用 flatMap 实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.flatMap&#123;$<span class="number">0</span> <span class="keyword">as</span>? <span class="type">X1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>我们对a数组中的元素进行遍历，每个都执行<code>$0 as? X1</code>类型转换，倘若成功就将元素转换为<code>X1</code>类型，失败则返回<code>nil</code>，最后<code>flapMap</code>会为我们剔除<code>nil</code>值。</p>
<h3 id="思考">思考</h3><p>现在有个问题:倘若我们使用面向对象编程呢？上述两种方法还适用吗？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a :[<span class="type">X</span>]</span><br><span class="line"><span class="keyword">var</span> a1:[<span class="type">X1</span>]</span><br><span class="line"><span class="comment">// 注意这里有些是用X1初始化 有些是用X2初始化</span></span><br><span class="line">a=[<span class="type">X1</span>(<span class="number">1</span>),<span class="type">X1</span>(<span class="number">2</span>),<span class="type">X2</span>(<span class="number">3</span>),<span class="type">X2</span>(<span class="number">4</span>),<span class="type">X1</span>(<span class="number">5</span>)]</span><br><span class="line">a[<span class="number">0</span>].v</span><br><span class="line">a1 = a.<span class="built_in">filter</span>&#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span>&#125; <span class="keyword">as</span>! [<span class="type">X1</span>] <span class="comment">//报错：fatal error: array element cannot be bridged to Objective-C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = a.flatMap&#123; $<span class="number">0</span> <span class="keyword">as</span>? <span class="type">X1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>看来只有<code>flatMap</code>依旧坚挺！如果想要使用<code>filter</code>的话，可以这么实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">XValue</span> &#125;).<span class="built_in">map</span> &#123; $<span class="number">0</span> <span class="keyword">as</span>! <span class="type">XValue</span> &#125;</span><br></pre></td></tr></table></figure>
<p>画蛇添足的赶脚。有木有更好的方法呢？报错说我们没有桥接到OC,让我想到了<code>@objc</code>，于是我尝试了下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="preprocessor">@objc</span> <span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="preprocessor">@objc</span> <span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a :[<span class="type">X</span>]</span><br><span class="line"><span class="keyword">var</span> a1:[<span class="type">X1</span>]</span><br><span class="line"><span class="comment">// 注意这里有些是用X1初始化 有些是用X2初始化</span></span><br><span class="line">a=[<span class="type">X1</span>(<span class="number">1</span>),<span class="type">X1</span>(<span class="number">2</span>),<span class="type">X2</span>(<span class="number">3</span>),<span class="type">X2</span>(<span class="number">4</span>),<span class="type">X1</span>(<span class="number">5</span>)]</span><br><span class="line">a[<span class="number">0</span>].v</span><br><span class="line"><span class="keyword">var</span> a2 = a.<span class="built_in">filter</span>&#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span>&#125; <span class="keyword">as</span>! [<span class="type">X1</span>]</span><br></pre></td></tr></table></figure>
<p>这样是ok的。</p>
<h2 id="Q8、Numbers_in_swift">Q8、Numbers in swift</h2><h3 id="问题链接-4">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/28056" target="_blank" rel="external">Q8链接地址</a></p>
<h3 id="问题描述-7">问题描述</h3><p>提问者吐槽，以下代码会出现编译错误：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> x</span>: <span class="typename">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> y</span>: <span class="typename">Double</span> = <span class="number">2.0</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span>: <span class="typename">Double</span> = y / x</span><br></pre></td></tr></table></figure>
<p>然后又表示，下面代码也是错的，让人难以接受这是 Swift 干的事情：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="tag">var</span> k: Double</span><br><span class="line">k = <span class="function"><span class="title">Double</span><span class="params">(x)</span></span></span><br><span class="line">k = <span class="function"><span class="title">Double</span><span class="params">(x.value)</span></span></span><br><span class="line">k = (Double) x</span><br><span class="line">k = (Double) x.value</span><br></pre></td></tr></table></figure>
<h3 id="问题解答-5">问题解答</h3><p><a href="https://forums.developer.apple.com/people/OOPer" target="_blank" rel="external">OOPer</a> 大神在回帖中写到，其实<code>k = Double(x)</code> 是可以执行的， Swift 是强调强类型的语言，不过也提供了不同类型的转换方式。对不同类型进行运算, Swift 是不允许的。以下代码是可以运行的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> x</span>: <span class="typename">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> y</span>: <span class="typename">Double</span> = <span class="number">2.0</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span>: <span class="typename">Double</span> = y / <span class="typename">Double</span>(x)</span><br></pre></td></tr></table></figure>
<p>另外，回帖中还提供了一种使用协议和代码的方式来解决这个问题：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">protocol DoubleBOWEMOJI &#123;  </span><br><span class="line">  <span class="variable"><span class="keyword">var</span> Double</span>: Swift.<span class="typename">Double</span> &#123;<span class="keyword">get</span>&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">extension <span class="typename">Int</span>: DoubleBOWEMOJI &#123;  </span><br><span class="line">   <span class="variable"><span class="keyword">var</span> Double</span>: Swift.<span class="typename">Double</span> &#123;<span class="keyword">return</span> Swift.<span class="typename">Double</span>(self)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span> = y / x.<span class="typename">Double</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Unwrapping NSNumber works fine in iOS Simulator but unexpectedly found nil on iPhone</a></li>
<li><a href="#Q2">Why my code is working in playground but not in my project?</a></li>
<li><a href="#Q3">Failable initialisers and unbound instance vars</a></li>
<li><a href="#Q4">Read-only property</a></li>
<li><a href="#Q5">Why? insert a new element into array and it always crash!</a></li>
<li><a href="#Q6">binary operator ‘??’ cannot be applied to functions?</a></li>
<li><a href="#Q7">Filter array on type</a> </li>
<li><a href="#Q8">Numbers in swift</a></li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151216/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151216.playground">点击下载</a></p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://swiftggteam.github.io/tags/Swift/"/>
    
      <category term="社区问答" scheme="http://swiftggteam.github.io/tags/%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%94/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
      <category term="iOS开发" scheme="http://swiftggteam.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Beta 2 更新：Swift 2.1 Playground 使用值放置方法]]></title>
    <link href="http://swiftggteam.github.io/2015/12/16/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/"/>
    <id>http://swiftggteam.github.io/2015/12/16/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/09/23/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-23<br>译者：<a href="http://weibo.com/u/2916092907" target="_blank" rel="external">天才175</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<p><img src="/img/articles/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/Color-AppScreenSnapz001.png1450226715.996496" alt=""></p>
<p>Beta 2 的新特性允许你拖放颜色、图片以及文件。在截图中虽然看不到，但如果你打开文本赋值的历史记录，就会显示文件的文本内容（是我的购物清单，好奇的家伙们）。文本常量的类型为<code>NSURL</code>。颜色是<code>UIColor</code>，图片是<code>UIImage</code>。谢天谢地，希望你们对这些没有任何疑问。</p>
<a id="more"></a>
<ul>
<li>非常有趣的是，你可以在 playground 里拖动它们。所以如果你不小心把一张图片放在了颜色那一行，直接拖到 图片赋值那里就行。</li>
<li>你也可以选择将拖动的物品进行复制。</li>
<li>双击颜色可以打开颜色选择器（耶！），双击图片可以打开资源文件夹来选取其他资源。双击 URLS 我没发现可以干神马。</li>
<li>你不能调整代码中占位符的大小，但是你可以调整它们历史记录界面的大小，和其他值一样。</li>
<li>你还不能通过调用<code>UIColor</code>来生成颜色预览，比如，<code>UIColor.blueColor()</code>就不能生成预览。我发现最简单的方法就是从外部拖进来或者复制/拖另一个颜色，然后用色轮赋值。</li>
<li>如果代码中占位符是蓝色，别输入。单击关闭它或者直接用键盘输入内容替换它。蓝色意味着可以选取并且可以被改写。简单吧。</li>
</ul>
<p>聪明人的做法：<strong>不要把 playground 拖入它自身</strong>。我是认真的，我已经踩过坑了。</p>
<p><img src="/img/articles/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/Screen-Shot-2015-09-23-at-8.30.41-PM.png1450226717.1296368" alt=""></p>
<p>由于文件可以随意复制到资源文件夹。所以：</p>
<ul>
<li>不要通过拖动复制同样的文件两次。Xcode 不喜欢那样。</li>
<li>不要指望编辑源文件可以自动同步修改，你需要修改添加后的文件。</li>
<li>颜色不能复制到资源里，它们只能是值项。</li>
<li>目前有很多事情还不能做。比如，你不能从 Safari “复制” URLS 过来。它们需要进行转义，不然会被当作纯文本。虽然可以期待之后可以拖放的词汇会越来越多，但目前只有颜色、图片和本地文件的 NSURL。</li>
<li>如前所述，不要把 playground 拖入它自身。</li>
</ul>
<h2 id="其他新的东西">其他新的东西</h2><p>Swift 关于如何响应引入的 enums，unions, NSNumbers 等有很大的变化。如果你从事大量跨语言编码，值得认真读一读更新说明。</p>
<p>Swift 2.1 现在可以在字符串插值中使用双引号。</p>
<blockquote>
<p>表达式字符串插值现在可以包含字符串了。比如，“My name is \ (attributes[“name”]!)” 现在是有效的。（14050788）</p>
</blockquote>
<p>编译器性能有一些提升。没有任何依赖的项（即标记为私有的）不会再触发其他文件的重编译。</p>
<p>更加宽泛的函数类型。你可以这样赋值了，从<code>任何类型-&gt;Int 闭包</code>到<code>字符串-&gt;任何变量</code>。这种方式到底好还是不好，我仍在思考中。</p>
<blockquote>
<p>现在支持函数类型的转换，展现了函数结果类型的协变和函数参数类型的逆变。比如，现在这样的函数类型赋值方式是合法的，从<code>任何类型-&gt;Int 闭包</code>到<code>字符串-&gt;任何变量</code>。（19517003）</p>
</blockquote>
<p>下面，抛开 playground, 对于我来说，有一个最重大的改变。那就是 map 闭包（_-&gt;_ 是不是很眼熟？）的错误提示“更加有用了”。我都等不及要试一试了!</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/09/23/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/">原文链接</a>，原文日期：2015-09-23<br>译者：<a href="http://weibo.com/u/2916092907">天才175</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<p><img src="/img/articles/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/Color-AppScreenSnapz001.png1450226715.996496" alt=""></p>
<p>Beta 2 的新特性允许你拖放颜色、图片以及文件。在截图中虽然看不到，但如果你打开文本赋值的历史记录，就会显示文件的文本内容（是我的购物清单，好奇的家伙们）。文本常量的类型为<code>NSURL</code>。颜色是<code>UIColor</code>，图片是<code>UIImage</code>。谢天谢地，希望你们对这些没有任何疑问。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mixins 比继承更好]]></title>
    <link href="http://swiftggteam.github.io/2015/12/15/mixins-over-inheritance/"/>
    <id>http://swiftggteam.github.io/2015/12/15/mixins-over-inheritance/</id>
    <published>2015-12-15T02:30:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-08<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles" target="_blank" rel="external">ray16897188</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>译者注：<a href="https://en.wikipedia.org/wiki/Mixin" target="_blank" rel="external">Mixin</a> 和 <a href="https://en.wikipedia.org/wiki/Trait_\(computer_programming\" target="_blank" rel="external">Trait</a> 是面向对象编程语言中的术语，本文中作者并未明确指出两者之间的区别。这两个单词在本译文中也不做翻译。</p>
<p>从面向对象的编程语言的角度来说，继承（Inheritence）总被用来在多个类之间共享代码。但这并不总是一个最佳的解决方案，而且它本身还有些问题。在今天写的这篇文章中，我们会看到 Swift 中的协议扩展（Protocol Extensions），并将其以「Mixins」的形式去使用是怎样解决这个问题的。<br><a id="more"></a></p>
<blockquote>
<p>你可以从这里下载<a href="http://alisoftware.github.io/assets/Mixins.playground.zip" target="_blank" rel="external">包含本篇文章所有代码的 Swift Playground</a>。</p>
</blockquote>
<h3 id="继承本身存在的问题">继承本身存在的问题</h3><p>假设你有个 app，里面有很多包含相同行为的 <code>UIViewController</code> 类，例如它们都有汉堡菜单。你当然不想在 app 中的每一个 View Controller 里都反复实现这个汉堡菜单的逻辑（例如设置 <code>leftBarButtonItem</code> 按钮，点击这个按钮时打开或者关闭这个菜单，等等）。</p>
<p>解决方案很简单，你只需要创建一个负责实现所有特定行为、而且是 <code>UIViewController</code> 的子类 <code>CommonViewController</code>。然后让你所有的 ViewController 都直接继承 <code>CommonViewController</code> 而不是 <code>UIViewController</code> 就可以了，没错吧？通过使用这种方式，这些类都继承了父类的方法，且具有了相同的行为，你也不用每次重复实现这些东西了。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="keyword">var</span> burgerMenuIsOpen: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123; … &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">CommonViewController</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但在随后的开发阶段，你会意识到自己需要一个 <code>UITableViewController</code> 或者一个 <code>UICollectionViewController</code>……晕死，<code>CommonViewController</code> 不能用了，因为它是继承自 <code>UIViewController</code> 而不是 <code>UITableViewController</code>！</p>
<p>你会怎么做，是实现和 <code>CommonViewController</code> 一样的事情却继承于 <code>UITableViewController</code> 的 <code>CommonTableViewController</code> 吗？这会产生很多重复的代码，而且是个十分糟糕的设计哦。</p>
<h3 id="组合（Composition）是救命稻草">组合（Composition）是救命稻草</h3><p>诚然，解决这个问题，有句具有代表性并且正确的话是这么说的：</p>
<blockquote>
<p>多用组合，少用继承。</p>
</blockquote>
<p>这意味着我们不使用继承的方式，而是让我们的 <code>UIViewController</code> 包含一些提供相应行为的内部类（Inner class）。</p>
<p>在这个例子中，我们可以假定 <code>BurgerMenuManager</code> 类能提供创建汉堡菜单图标、以及与这些图标交互逻辑的所有必要的方法。那些各式各样的 <code>UIViewController</code> 就会有一个 <code>BurgerMenuManager</code> 类型的<em>属性</em>，可以用来与汉堡餐单做交互。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurgerMenuManager</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; burgerMenuIsOpen = !burgerMenuisOpen &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">burgerMenuIsOpen</span>: <span class="title">Bool</span> </span>&#123; <span class="keyword">didSet</span> &#123; … &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> menuManager: <span class="type">BurgerMenuManager</span>()</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    menuManager.setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOtherViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> menuManager: <span class="type">BurgerMenuManager</span>()</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    menuManager.setupBurgerMenu()</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而你能看出来这种解决方案会变得很臃肿。每次你都得去明确引用那个中间对象 <code>menuManager</code>。</p>
<h3 id="多继承（Multiple_inheritance）">多继承（Multiple inheritance）</h3><p>继承的另一个问题就是很多面向对象的编程语言都不支持<em>多继承</em>（这儿有个很好的解释，是关于<a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem" target="_blank" rel="external">菱形缺陷（Diamond problem）</a>的）。</p>
<p>这就意味着一个类不能继承自多个父类。</p>
<p>假如说你要创建一些科幻小说中的人物的对象模型。显然，你得展现出 <code>DocEmmettBrown</code>，<code>DoctorWho</code>，<code>TimeLord</code>，<code>IronMan</code> 还有 <code>Superman</code> 的能力……这些角色的相互关系是什么？有些能时间旅行，有些能空间穿越，还有些两种能力都会；有些能飞，而有些不能飞；有些是人类，而有些不是……</p>
<p><code>IronMan</code> 和 <code>Superman</code> 这个两个类都能飞，于是我们就会设想有个 <code>Flyer</code> 类能提供一个实现 <code>fly()</code> 的方法。但是 <code>IronMan</code> 和 <code>DocEmmettBrown</code> 都是人类，我们还会设想要有个 <code>Human</code> 父类；而 <code>Superman</code> 和 <code>TimeLord</code> 又得是 <code>Alien</code> 的子类。哦，等会儿…… 那 <code>IronMan</code> 得同时继承 <code>Flyer</code> 和 <code>Human</code> 两个类吗？这在 Swift 中是不可能的实现的（在很多其他的面向对象的语言中也不能这么实现）。</p>
<p>我们应该从所有父类中选择出符合子类属性最好的一个么？但是假如我们让 <code>IronMan</code> 继承 <code>Human</code>，那么怎么去实现 <code>fly()</code> 这个方法？很显然我们不能在 <code>Human</code> 这个类中实现，因为并不是每个人都会飞，但是 <code>Superman</code> 却需要这个方法，然而我们并不想重复写两次。</p>
<p>所以，我们在这里会使用组合（Composition）方法，让 <code>var flyingEngine: Flyer</code> 成为 <code>Superman</code> 类中的一个属性。</p>
<p>但是调用时你必须写成 <code>superman.flyingEngine.fly()</code> 而不是优雅地写成 <code>superman.fly()</code>。</p>
<h3 id="Mixins_&amp;_Traits">Mixins &amp; Traits</h3><p><img src="/img/articles/mixins-over-inheritance/12401450145416.541825" alt="生生不息，Mixin 繁荣"></p>
<p>Mixins 和 Traits 的概念<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>由此引入。</p>
<ul>
<li>通过继承，你定义你的类是什么。例如每条 <code>Dog</code> 都<em>是</em>一个 <code>Animal</code>。</li>
<li>通过 Traits，你定义你的类<em>能做什么</em>。例如每个 <code>Animal</code> 都<em>能</em> <code>eat()</code>，但是人类也可以吃，而且<a href="https://www.youtube.com/watch?v=Oo2RKAHu-kI" target="_blank" rel="external">异世奇人（Doctor Who）也能吃鱼条和蛋挞</a>，甚至即使是位 Gallifreyan（既不是人类也不是动物）。</li>
</ul>
<p>使用 Traits，重要的不是「是什么」，而是能「做什么」。</p>
<blockquote>
<p>继承描述了一个对象是什么，而 Traits 描述了这个对象能做什么。</p>
</blockquote>
<p>最棒的事情就是一个类可以选用多个 <code>Traits</code> 来做多个事情，而这个类还只是一种事物（只从一个父类继承）。</p>
<p>那么如何应用到 Swift 中呢？</p>
<h3 id="有默认实现的协议">有默认实现的协议</h3><p>Swift 2.0 中定义一个<code>协议（Protocol）</code>的时候，还可以使用这个协议的<code>扩展（Extension）</code>给它的部分或是所有的方法做默认实现。看上去是这样的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I believe I can flyyyyy ♬"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了上面的代码，当你创建一个遵从 <code>Flyer</code> 协议的类或者是结构体时，就能很顺利地获得 <code>fly()</code> 方法！</p>
<p>这只是一个<em>默认的实现方式</em>。因此你可以在需要的时候不受约束地重新定义这个方法；如果不重新定义的话，会使用你默认的那个方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span>: <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里我们没有实现 fly() 方法，因此能够听到 Clark 唱歌</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span>: <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果需要我们也可以给出单独的实现</span></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    thrusters.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于很多事情来说，协议的默认实现这个特性非常的有用。其中一种自然就是如你所想的那样，把「Traits」概念引入到了 Swift 中。</p>
<h3 id="一种身份，多种能力">一种身份，多种能力</h3><p>Traits 很赞的一点就是它们并不依赖于使用到它们的对象本身的身份。Traits 并不关心类是什么，亦或是类是从哪里继承的：Traits 仅仅在类上定义了一些函数。</p>
<p>这就解决了我们的问题：异世奇人（Doctor Who）可以既是一位时间旅行者，同时还是一个外星人；而爱默·布朗博士（Dr Emmett Brown）既是一位时间旅行者，同时还属于人类；钢铁侠（Iron Man）是一个能飞的人，而超人（Superman）是一个能飞的外星人。</p>
<blockquote>
<p>你是什么并不限制你能够做什么</p>
</blockquote>
<p>现在我们利用 Traits 的优点来实现一下我们的模板类。</p>
<p>首先定义不同的 Traits：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentDate: <span class="type">NSDate</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(date: NSDate)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随后给它们一些默认的实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I believe I can flyyyyy ♬"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(date: NSDate)</span></span> &#123;</span><br><span class="line">    currentDate = date</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这点上，我们还是用继承去定义我们英雄角色的身份（他们是什么），先定义一些父类：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Character</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>: <span class="title">Character</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> countryOfOrigin: <span class="type">String</span>?</span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, countryOfOrigin: <span class="type">String</span>? = <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.countryOfOrigin = countryOfOrigin</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span>: <span class="title">Character</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> species: <span class="type">String</span></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, species: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.species = species</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们就能通过他们的身份（通过继承）和能力（Traits/协议遵循）来定义英雄角色了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeLord</span>: <span class="title">Alien</span>, <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentDate = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"I'm the Doctor"</span>, species: <span class="string">"Gallifreyan"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocEmmettBrown</span>: <span class="title">Human</span>, <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentDate = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Emmett Brown"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span>: <span class="title">Alien</span>, <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Clark Kent"</span>, species: <span class="string">"Kryptonian"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span>: <span class="title">Human</span>, <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Tony Stark"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在 <code>Superman</code> 和 <code>IronMan</code> 都使用了相同的 <code>fly()</code> 实现，即使他们分别继承自不同的父类（一个继承自 <code>Alien</code>，另一个继承自 <code>Human</code>）。而且这两位博士都知道怎么做时间旅行了，即使一个是人类，另外一个来自 Gallifrey 星。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tony = <span class="type">IronMan</span>()</span><br><span class="line">tony.fly() <span class="comment">// 输出 "I believe I can flyyyyy ♬"</span></span><br><span class="line">tony.name  <span class="comment">// 返回 "Tony Stark"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clark = <span class="type">Superman</span>()</span><br><span class="line">clark.fly() <span class="comment">// 输出 "I believe I can flyyyyy ♬"</span></span><br><span class="line">clark.species  <span class="comment">// 返回 "Kryptonian"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> docBrown = <span class="type">DocEmmettBrown</span>()</span><br><span class="line">docBrown.travelTo(<span class="type">NSDate</span>(timeIntervalSince1970: <span class="number">499161600</span>))</span><br><span class="line">docBrown.name <span class="comment">// "Emmett Brown"</span></span><br><span class="line">docBrown.countryOfOrigin <span class="comment">// "USA"</span></span><br><span class="line">docBrown.currentDate <span class="comment">// Oct 26, 1985, 9:00 AM</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doctorWho = <span class="type">TimeLord</span>()</span><br><span class="line">doctorWho.travelTo(<span class="type">NSDate</span>(timeIntervalSince1970: <span class="number">1303484520</span>))</span><br><span class="line">doctorWho.species <span class="comment">// "Gallifreyan"</span></span><br><span class="line">doctorWho.currentDate <span class="comment">// Apr 22, 2011, 5:02 PM</span></span><br></pre></td></tr></table></figure>
<h3 id="时空大冒险">时空大冒险</h3><p>现在我们引入一个新的空间穿越的能力/trait：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SpaceTraveler</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(location: String)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并给它一个默认的实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SpaceTraveler</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(location: String)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Let's go to <span class="subst">\(location)</span>!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用 Swift 的<code>扩展（Extension）</code>方式<strong>让现有的一个类遵循一个协议</strong>，把这些能力加到我们定义的角色身上去。如果忽略掉钢铁侠之前跑到纽约城上面随后短暂飞到太空中去的那次情景，那只有博士和超人是真正能做空间穿越的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeLord</span>: <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Superman</span>: <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/articles/mixins-over-inheritance/great-scott.gif1450145417.1893744" alt="天哪！"></p>
<p>没错，这就是给已有类添加能力/trait 仅需的步骤！就这样，他们可以 <code>travelTo()</code> 任何的地方了！很简洁，是吧？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">doctorWho.travelTo(<span class="string">"Trenzalore"</span>) <span class="comment">// prints "Let's go to Trenzalore!"</span></span><br></pre></td></tr></table></figure>
<h3 id="邀请更多的人来参加这场聚会！">邀请更多的人来参加这场聚会！</h3><p>现在我们再让更多的人加入进来吧：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 来吧，Pond！</span></span><br><span class="line"><span class="keyword">let</span> amy = <span class="type">Human</span>(name: <span class="string">"Amelia Pond"</span>, countryOfOrigin: <span class="string">"UK"</span>)</span><br><span class="line"><span class="comment">// 该死，她是一个时间和空间旅行者，但是却不是 TimeLord！</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Astraunaut</span>: <span class="title">Human</span>, <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> neilArmstrong = <span class="type">Astraunaut</span>(name: <span class="string">"Neil Armstrong"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line"><span class="keyword">let</span> laika = <span class="type">Astraunaut</span>(name: <span class="string">"Laïka"</span>, countryOfOrigin: <span class="string">"Russia"</span>)</span><br><span class="line"><span class="comment">// 等等，Leïka 是一只狗，不是吗？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilleniumFalconPilot</span>: <span class="title">Human</span>, <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> hanSolo = <span class="type">MilleniumFalconPilot</span>(name: <span class="string">"Han Solo"</span>)</span><br><span class="line"><span class="keyword">let</span> chewbacca = <span class="type">MilleniumFalconPilot</span>(name: <span class="string">"Chewie"</span>)</span><br><span class="line"><span class="comment">// 等等，MilleniumFalconPilot 不该定义成「人类」吧！</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spock</span>: <span class="title">Alien</span>, <span class="title">SpaceTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Spock"</span>, species: <span class="string">"Vulcan"</span>)</span><br><span class="line">    <span class="comment">// 并不是 100% 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Huston，我们有麻烦了（译注：原文 “Huston, we have a problem here”，是星际迷航中的梗）。Laika 不是一个人，Chewie 也不是，Spock 算半个人、半个瓦肯（Vulcan）人，所以上面的代码定义错的离谱！</p>
<p>你看出来什么问题了么？我们又一次被继承摆了一道，理所应当地认为 <code>Human</code> 和 <code>Alien</code>是身份。在这里一些类必须属于某种类型，或是必须继承自某个父类，而实际情况中不总是这样，尤其对科幻故事来说。</p>
<p>这也是为什么要在 Swift 中使用协议，以及协议的默认扩展。这能够帮助我们把因使用继承而强加到类上的这些限制移除。</p>
<p>如果 <code>Human</code> 和 <code>Alien</code> 不是<code>类</code>而是<code>协议</code>，那就会有很多的好处：</p>
<ul>
<li>我们可以定义一个 <code>MilleniumFalconPilot</code> 类型，不必让它是一个 <code>Human</code> ，这样就可以让 Chewie 驾驶它了；</li>
<li>我们可以把 Laïka 定义成一个 <code>Astronaut</code>，即使她不是人类；</li>
<li>我们可以将 <code>Spock</code> 定义成 <code>Human</code> 和 <code>Alien</code> 的结合体；</li>
<li>我们甚至可以在这个例子中完全摒弃继承，并将我们的类型从<code>类（Classes）</code>转换成<code>结构体（Structs）</code>。<code>结构体</code>不支持继承，但可以遵循你想要遵循的协议，想遵循多少协议就能遵循多少协议！</li>
</ul>
<h3 id="无处不在的协议！">无处不在的协议！</h3><p>因此，我们的一个解决方案是彻底弃用继承，将所有的东西都变成协议。毕竟我们不在乎我们的角色<em>是什么</em>，能够定义英雄本身的是他们拥有的<em>能力</em>！</p>
<p><img src="/img/articles/mixins-over-inheritance/12401450145417.8855546" alt="终结掉继承！"></p>
<p>我在这里附上了一个<a href="http://alisoftware.github.io/assets/Mixins.playground.zip" target="_blank" rel="external">可下载的 Swift Playground 文件</a>，包含这篇文章里的所有代码，并在 Playground 的第二页放上了一个全部用协议和结构体的解决方案，完全不用继承。快去看看吧！</p>
<p>这当然并不意味着你必须不惜一切代价放弃对继承的使用（别听那个 Dalek 讲太多，机器人毕竟没感情的😉）。继承依然有用，而且依然有意义——很符合逻辑的一个说法就是 <code>UILabel</code> 是 <code>UIView</code> 的一个<em>子类</em>。但我们提供的方法能让你能感受到 Mixins 和协议带给你的不同体验。</p>
<h3 id="小结">小结</h3><p>实践 Swift 的时候，你会意识到它实质上是一个面向协议的语言（Protocols-Oriented language），而且在 Swift 中使用协议和在 Objective-C 中使用相比更加常见和有效。毕竟，那些类似于 <code>Equatable</code>，<code>CustomStringConvertible</code> 的协议以及 Swift 标准库中其它所有以 <code>-able</code> 结尾的协议都可以被看做是 Mixins！</p>
<p>有了 Swift 的协议和协议的默认实现，你就能实现 Mixins 和 Traits，而且你还可以实现类似于抽象类<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup>以及更多的一些东西，这让你的代码变得更加灵活。</p>
<p>Mixins 和 Traits 的方式可以让你描述你的类型<strong>能够做什么</strong>，而不是描述<strong>它们是什么</strong>。更重要的是，它们能够为你的类型增加各种能力。这就像购物那样，<strong>无论你的类是从哪个父类继承的（如果有），你都能为它们选择你想要它们具有的那些能力</strong>。</p>
<p>回到第一个例子，你可以创建一个 <code>BurgerMenuManager 协议</code>且该协议有一个默认实现，然后可以简单地将 View Controllers（不论是 <code>UIViewController</code>，<code>UITableViewController</code> 还是其他的类）都遵循这个协议，它们都能自动获得 <code>BurgerMenuManager</code> 所具有的能力和特性，你也根本不用去为父类 <code>UIViewController</code> 操心！</p>
<p><img src="/img/articles/mixins-over-inheritance/i-dont-wanna-go.gif1450145418.0677123" alt="我不想离开"></p>
<p>关于协议扩展还有很多要说的，我还想在文章中继续告诉你关于它更多的事情，因为它能够通过很多方式提高你的代码质量。嘿，但是，这篇文章已经挺长的了，同时也为以后的博客文章留一些空间吧，希望你到时还会再来看！</p>
<p>与此同时，生生不息，繁荣昌盛，杰罗尼莫（译注：跳伞时老兵鼓励新兵的一句话）！</p>
<hr>
<p><a id="fn1" href="#fnref1" rev="footnote">1.我不会深入去讲 Mixin 和 Traits 这两个概念之间的区别。由于这两个词的意思很接近，为简单起见，在本篇文章中它俩可以互相替换使用。</a><br><a id="fn2" href="#fnref2" rev="footnote">2.在以后的博文中会作为一个专题去讲解。</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/">原文链接</a>，原文日期：2015-11-08<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles">ray16897188</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>译者注：<a href="https://en.wikipedia.org/wiki/Mixin">Mixin</a> 和 <a href="https://en.wikipedia.org/wiki/Trait_\(computer_programming\">Trait</a> 是面向对象编程语言中的术语，本文中作者并未明确指出两者之间的区别。这两个单词在本译文中也不做翻译。</p>
<p>从面向对象的编程语言的角度来说，继承（Inheritence）总被用来在多个类之间共享代码。但这并不总是一个最佳的解决方案，而且它本身还有些问题。在今天写的这篇文章中，我们会看到 Swift 中的协议扩展（Protocol Extensions），并将其以「Mixins」的形式去使用是怎样解决这个问题的。<br>]]>
    
    </summary>
    
      <category term="Crunchy Development" scheme="http://swiftggteam.github.io/tags/Crunchy-Development/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 的 NSDate 初学者指南]]></title>
    <link href="http://swiftggteam.github.io/2015/12/14/a-beginners-guide-to-nsdate-in-swift/"/>
    <id>http://swiftggteam.github.io/2015/12/14/a-beginners-guide-to-nsdate-in-swift/</id>
    <published>2015-12-14T01:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：gabriel theodoropoulos，<a href="http://www.appcoda.com/nsdate/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-18<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles" target="_blank" rel="external">ray16897188</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a></p>
</blockquote>
<p>如果问我在做过的所有项目中做的最多的事情，那处理日期绝对是榜上有名（译注：本文中的「日期」是指代 NSDate 对象，同时包含「日（date）」 和「时（time）」这两个元素）。毋庸置疑，无论工作量是多是少，开发者迟早需要「玩」一下 NSDate 类，去按某种方式处理一下日期。从简单的将一个日期转换成一个字符串到对日期做计算，总会有一个不变的事实：开发者必须在 iOS 编程中学会这个知识点。这并不难掌握，而且可以为以后更重要任务节省时间。在新手看来，对日期的操作很麻烦；然而事实并非如此。你需要做的就是掌握它。</p>
<a id="more"></a>
<p>在应用中对日期（<em>NSDate</em>）对象最常见的操作就是把它转换成一个字符串对象，这样就可以用正确的格式把它展示给用户。反向操作也很常见：把字符串转换成日期对象。然而日期的操作并不只有这些。下面是一个简单的列表，列出了除上述操作之外可以对日期进行的其他操作：</p>
<ul>
<li>日期之间的比较。</li>
<li>计算未来或者过去的日期，很简单：用一个参考日期（比如当前日期）加上或者减去一段时间（天、月、年等等）。</li>
<li>计算不同日期之间的差值（比如算出两个特定日期之间的时间间隔有多久）。</li>
<li>将一个日期按其<em>组成元素（components）</em>做分解，并对每个部分做分别访问（天、月等等）。</li>
</ul>
<p>上面列出的所有内容，包括日期和字符串之间的相互转换，都是这篇教程要讨论的主题。在接下来的各个小节中，你会发现只要你知道该用什么工具以及如何使用它们，你就能随心所欲的对日期进行操作。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/nsdate-featured.jpg" alt=""></p>
<p>下面的链接清单里有很多重要的文章，供参考。如果需要深入了解某些特定知识点，别忘了点击访问一下：</p>
<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDate_Class/" target="_blank" rel="external">NSDate</a></li>
<li><a href="https://developer.apple.com/library/prerelease/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/index.html" target="_blank" rel="external">NSDateFormetter</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateComponents_Class/" target="_blank" rel="external">NSDateComponents</a></li>
<li><a href="https://developer.apple.com/library/watchos/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html" target="_blank" rel="external">NSDateComponentFormatter</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/" target="_blank" rel="external">NSCalendar</a></li>
</ul>
<h3 id="关于_Demo_App">关于 Demo App</h3><p>嗯，这个教程我们不使用 demo 应用（是的，你没看错）。取而代之，我们这次用一个 <em>Playground</em> 来展示你将要看到的所有例子。我是特意这么做的，因为我的目的是给你提供丰富的、能更好的展示出关于 <em>NSDate</em> 方方面面的代码。</p>
<p>你可以下载并在 Xcode 中打开<a href="https://www.dropbox.com/s/s54ko81l5mvxg5s/PlayingWithDates.playground.zip?dl=0" target="_blank" rel="external">这个写好的 playground 文件</a>，但我还是强烈建议你新建一个 Playground 文件，并测试下面章节中的每一个新代码段。这样会让你更容易的去理解每个示例是如何工作的，除此之外你还可以修改代码，实时观察你的修改会如何影响生成的结果。</p>
<p>我给你的 playground 文件名是 <em>PlayingWithDates</em>，里面包含了所有的代码。你自己的文件可以用相同的文件名，或者换一个，都无所谓。</p>
<h3 id="基本概念">基本概念</h3><p>在我们开始查看日期相关的技术细节并思考能用它们做什么之前，先要确保每个人都已经掌握一些基本概念，这很重要。先从一个最简单的开始：<em>NSDate</em> 对象。从程序角度来说这种对象包含了对<em>日（date）</em>和<em>时（time）</em>两者的描述，所以它不仅仅可以帮我们处理「日」，还可以帮我们处理「时」。对于 <em>NSDate</em> 对象本身来说是没有<em>格式（formatting）</em>这个概念的；和其他类中的所有属性一样，可以把日和时看做是<em>属性（properties）</em>。只有在将一个日期对象转换成一个字符串时，格式这个概念才会派上用场，下面的内容里我们会看到很多关于这个的细节。通常来讲，记住你所需要的就是 <em>NSDate</em> 这个类，无论你只关心「日」、「时」或者两者。</p>
<p>接下来我们会遇到的另一个类是 <em>NSDateComponents</em>。可以把这个类看做 <em>NSDate</em> 的「姊妹」类，因为这个类给开发者提供了一些极为有用的特性和操作。这个类的第一个要点是它可以将「日」部分或者「时」部分作为一个单独的属性显示出来，所以我们可以直接访问「日」或者「时」，然后在其他的任务中使用（比如对「日」或「时」的计算）。例如，一个 <em>NSDateComponents</em> 实例中的天和月在下面的代码中表示为 <em>day</em> 和 <em>month</em> 属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateComponents = <span class="type">NSDateComponents</span>()</span><br><span class="line"><span class="keyword">let</span> day = dateComponents.day</span><br><span class="line"><span class="keyword">let</span> month = dateComponents.month</span><br></pre></td></tr></table></figure>
<p>就这么简单。当然访问日期元素并将该日期的值传递给一个 <em>NSDateComponents</em> 对象需要先做一些强制转换，这些我们之后再讨论。</p>
<p>除上所述之外，<em>NSDateComponents</em> 这个类在用于计算未来或者过去的日期时也非常有用。当你想得到一个在某个特定日期之后或之前的那个日期时，你要做的就是加上或者减去合适的那一部分，最终就能转换成一个新的日期。另外 <em>NSDateComponents</em> 也适合计算日期之间的差值。现在无需深入研究这两个内容，我们一会儿会看到细节。</p>
<p>对于 <em>NSCalendar</em> 类，虽然它不会派上大用场，而且我们仅需要用它来实现 <em>NSDate</em> 和 <em>NSDateComponents</em> 相互转换，但它在我们的日期游戏中也是重要的一员。关于它所支持的特性，本文不会再进行介绍。将日期从 <em>NSDate</em> 转换成 <em>NSDateComponents</em>（或者反过来）的任务属于 <em>NSCalendar</em> 类，按照惯例，做转换需要一个特定的 c alendar（日历）对象。实际上系统在做任何转换之前都需要知道要用一个怎样的 calendar 对象，从而才可能给出正确的结果（别忘了满世界有太多不同的 calendar 对象，转换出来的「天」、「月」等值会千差万别）。你可以读一些和 calendar 有关的文章（参考简介里的链接），而在这里为图简便，我们会用 <em>NSCalendar</em> 的类方法 <em>currentCalendar()</em> 来得到用户设置中指定的 calendar。</p>
<p>此外，在下一节中我们会使用一个特别好的工具，它就是 <em>NSDateFormatter</em> 类。它能够实现 <em>NSDate</em> 对象到字符串、以及字符串到 <em>NSDate</em> 对象的转换。它还可以使用预定义的<em>日期样式（date styles）</em>来给最终的日期字符串制定格式，或是通过给出期望格式的<em>描述</em>来实现高度格式样式定制。下面会有一些相关的例子，其中一些例子示范了双向转换。一个 <em>NSDateFormatter</em> 对象同样也支持本地化（localization）；我们所需要的就是给它提供一个有效的 <em>NSLocale</em> 对象，基于该给定的位置（locale）设置最终转换出的对象就会正确显示出来。 </p>
<p>还有个类似的 <em>NSDateComponentsFormatter</em> 类，它可以将「日」和「时」部分作为输入，输出人类可读的、有特定格式的日期字符串。对此这个类包含了很多方法（methods），在此教程的最后一部分我们会看见其中几个；我们只讨论在教程的例子中用到的那些知识点。</p>
<p>上面已经说了那么多，我们可以开始编程了，具体学习上面提到的每个类的用法。再说一次，建议你创建一个新的 playground 文件，然后把我介绍的每一条都试一下。没有什么学习方法比亲手做更有效果。</p>
<h3 id="NSDate_和_String_之间的转换">NSDate 和 String 之间的转换</h3><p>首先，我们使用 <em>NSDate</em> 获得当前日期，并将它赋给一个常量以便访问。和其他一些语言所要求的不同，获得当前的日期并不需要调用类似 <em>now()</em> 或者 <em>today()</em> 的特殊方法。你所要做的就是初始化一个 <em>NSDate</em> 对象：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentDate = <span class="type">NSDate</span>()</span><br></pre></td></tr></table></figure>
<p>在 Xcode 的 playground 里敲入上面的语句，你会看到：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058093.7960339" alt=""></p>
<p>注意我们会在下面的代码中多次使用到上面的这个值。现在初始化一个 <em>NSDateFormatter</em> 对象。它用来在 dates 和 strings 之间做转换。如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateFormatter = <span class="type">NSDateFormatter</span>()</span><br></pre></td></tr></table></figure>
<p>除非是有其他明确的设定，否则 <em>dateFormatter</em> 会默认采用设备中的位置（locale）设置。尽管系统并不要求你去手动设置当前的位置，但如果需要的话你可以这么做：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.locale = <span class="type">NSLocale</span>.currentLocale()</span><br></pre></td></tr></table></figure>
<p>设一个不同的位置很容易：你仅需要知道与位置（locale）相匹配的<em>位置标识符（locale identifier）</em>是什么，然后指定给 locale 属性即可：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.locale = <span class="type">NSLocale</span>(localeIdentifier: <span class="string">"el_GR"</span>)</span><br><span class="line">dateFormatter.locale = <span class="type">NSLocale</span>(localeIdentifier: <span class="string">"fr_FR"</span>)</span><br></pre></td></tr></table></figure>
<p>这两行代码展示了如何给 date formatter 去设置一个不同的位置（例子里分别是希腊和法国地区）。当然设置多个位置的值没有意义，因为能起作用的仅仅是最后一个。你是不是想知道 locale 是怎么影响日期和字符串之间的转换的呢？过会儿你就会得到答案。</p>
<h3 id="用_Date_formatter_styles_为输出结果设置格式">用 Date formatter styles 为输出结果设置格式</h3><p>把一个日期对象（<em>NSDate</em>）转换成一个字符串之前，你需要「告诉」date formatter 你要得到的字符串结果的格式是怎样的。这里有两种方法。第一种是使用预定义的 <em>date formatter styles</em>，第二种是使用某些特定的<em>分类符（specifier）</em>来手动指定最终输出结果的格式。</p>
<p>先用第一种方法，我们需要使用 <em>NSDateFormatterStyle enum</em>。这个枚举类型的每一个枚举值都代表一种不同的格式样式类型。第一个样式是 <em>FullStyle</em>，下面的图片是使用它的效果：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058094.232729" alt=""></p>
<p>下面是上面代码的文本，想复制的话随意：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateStyle = <span class="type">NSDateFormatterStyle</span>.<span class="type">FullStyle</span></span><br><span class="line"><span class="keyword">var</span> convertedDate = dateFormatter.stringFromDate(currentDate)</span><br></pre></td></tr></table></figure>
<p>除了日期样式（date style）之外，上面两行代码中的 <em>stringFromDate:</em> 方法也同等重要，这个方法实现了真正的转换。当谈及转换时，我们实际上说的是这个方法，其余的只不过是自定义结果格式过程中所需的一些步骤。如果你想要在你的项目里做日期的转换，那么这个方法对你来说肯定非常方便。</p>
<p>好，来看下一个样式，<em>Long Style</em>：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058094.629814" alt=""></p>
<p>文本形式的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateStyle = <span class="type">NSDateFormatterStyle</span>.<span class="type">LongStyle</span></span><br><span class="line">convertedDate = dateFormatter.stringFromDate(currentDate)</span><br></pre></td></tr></table></figure>
<p>可以看到这种类型的样式中不包含星期几（和 Full Style 相比而言）。下面是 <em>Medium Style</em>：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058094.9355278" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateStyle = <span class="type">NSDateFormatterStyle</span>.<span class="type">MediumStyle</span></span><br><span class="line">convertedDate = dateFormatter.stringFromDate(currentDate)</span><br></pre></td></tr></table></figure>
<p>最后是 <em>Short Style</em>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateStyle = <span class="type">NSDateFormatterStyle</span>.<span class="type">ShortStyle</span></span><br><span class="line">convertedDate = dateFormatter.stringFromDate(currentDate)</span><br></pre></td></tr></table></figure>
<p>现在你已经知道可用的 date formatter styles 都是什么了，你可以根据项目需求去使用它们。每种样式的设置都会产生出一个不同的结果，可能其中有一种会适合你。</p>
<p>之前我说过 date formatter 的 locale 可以被设置成非默认值。现在我们已经看到如何使用 date formatter styles 做转换，我们再来看看不同的 locale 值如何改变初始日期的字符串转换结果。下面的例子中我会使用 Full Style，以及前面提到的两个 locale identifier（希腊和法国）。</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058095.0969288" alt=""></p>
<p>我想现在 locale 能做什么你已经很清楚了，好好使用它吧。</p>
<h3 id="使用_Date_format_specifier">使用 Date format specifier</h3><p>上面的 date formatter style 足以应对多数情况，但是我们无法通过修改这些格式来获得不同于预设格式的结果。这种情况下我们还有另一个选择，一个能设置<em>自定义 date format</em> 的能力，这个自定义的 date format 能够正确描述你理想中的 date formatter 对象的的格式样式。一般来说设置一个自定义的 date format 对以下两种情况很适用：当 date formatter style 实现不了你所期望的输出结果的样式时（显然），还有当你需要把一个复杂的日期字符串（比如“Thu, 08 Oct 2015 09:22:33 GMT”）转换成一个日期对象时。</p>
<p>为了正确的设置一个 date format，一定要用一组<em>分类符（specifier）</em> 。Specifier 不过是一些简单的字符，这些字符对 date formatter 对象来说有着特定的意义。在我给你具体的例子之前，先列出来一些在接下来的代码中会使用到的format specifier：</p>
<ul>
<li>EEEE：表示星期几（如 Monday）。使用 1-3 个字母表示周几的缩略写法。</li>
<li>MMMM：月份的全写（如 October）。使用 1-3 个字母表示月份的缩略写法。</li>
<li>dd：表示一个月里面日期的数字（如 09 或 15）。</li>
<li>yyyy：4 个数字表示的年（如 2015）。</li>
<li>HH：2 个数字表示的小时（如 08 或 19）。</li>
<li>mm：2 个数字表示的分钟（如 05 或者 54）。</li>
<li>ss：2 个数字表示的秒。</li>
<li>zzz：3 个字母表示的时区（如 GMT）。</li>
<li>GGG：BC 或者 AD。</li>
</ul>
<p>如果想查看 date format specifiers 的参考内容，建议访问<a href="http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns" target="_blank" rel="external">官方技术规范</a>，你可以找到上面给出的 specifier 的使用方法，以及那些没有列出的 specifier。</p>
<p>继续我们的例子，看一下 format specifier 具体怎么用。这回我们把当前日期转换成一个字符串，显示成具有星期名称、月的全写，日期数字和年份的格式：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058095.2924576" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateFormat = <span class="string">"EEEE, MMMM dd, yyyy"</span></span><br><span class="line">convertedDate = dateFormatter.stringFromDate(currentDate)</span><br></pre></td></tr></table></figure>
<p>我想怎么用自定义的 date format 已经不需要额外的讲解了，用法十分简单。再来一个例子，转换一下时间：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058095.4972548" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateFormat = <span class="string">"HH:mm:ss"</span></span><br><span class="line">convertedDate = dateFormatter.stringFromDate(currentDate)</span><br></pre></td></tr></table></figure>
<p>到现在为止我们看到的所有转换都是从 <em>NSDate</em> 对象变成一个有特定格式的字符串。相反的操作也很有意思，之前关于 date formatter styles 和 format specifiers 的也同样适用。把有既定格式的字符串转换成一个 <em>NSDate</em> 对象的关键是要对 date formatter 的 <em>dateFormat</em> 属性做出正确设置，然后调用 <em>dateFromString:</em> 方法。我们再看几个例子：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058095.7241263" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateAsString = <span class="string">"24-12-2015 23:59"</span></span><br><span class="line">dateFormatter.dateFormat = <span class="string">"dd-MM-yyyy HH:mm"</span></span><br><span class="line"><span class="keyword">var</span> newDate = dateFormatter.dateFromString(dateAsString)</span><br></pre></td></tr></table></figure>
<p>再看一个更复杂的字符串，还包含了时区：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058095.9686637" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateAsString = <span class="string">"Thu, 08 Oct 2015 09:22:33 GMT"</span></span><br><span class="line">dateFormatter.dateFormat = <span class="string">"EEE, dd MMM yyyy HH:mm:ss zzz"</span></span><br><span class="line">newDate = dateFormatter.dateFromString(dateAsString)</span><br></pre></td></tr></table></figure>
<p>注意一下时间（09:22）是如何通过简单的、在日期字符串中引入了一个时区而发生改变的（变成了 12:22）。这里没有任何实际上的变化，仅仅是我所在的时区（EFT）的时间在 GMT 时区中的表示，基于上面的代码，根据你自己的情况自由发挥吧。</p>
<p>到这里你已经基本上看到了为实现日期和字符串之间的转换你所需要的所有知识点。你可以敲敲自己的代码，试试你在上面所看到的那些，深入感受一下这些东西是如何工作的。</p>
<h3 id="使用_NSDateComponents">使用 NSDateComponents</h3><p>很多时候你需要在项目里拆分一个日期对象，然后从中获得特定组成元素的值。例如你可能会从一个日期对象中获取它的日和月的值，或者从时间中获得小时和分钟的值。此种情况下你需要用到的工具就是 <em>NSDateComponents</em> 这个类。</p>
<p><em>NSDateComponents</em> 类通常和 <em>NSCalendar</em> 类相结合来使用。具体点说，<em>NSCalendar</em> 方法实现了真正的从 <em>NSDate</em> 到 <em>NSDateComponents</em> 对象的转换；以及我们待会儿会看到的，从日期的组成元素到日期对象的转换。记好了这一点，这一节中我们首先要做的就是获取当前的 calendar，把它赋给一个常量以便访问：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> calendar = <span class="type">NSCalendar</span>.currentCalendar()</span><br></pre></td></tr></table></figure>
<p>现在我们看一个典型例子，一个 <em>NSDate</em> 对象是怎样被转换成一个 <em>NSDateComponents</em> 对象，之后我会做些讲解：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058096.3074582" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateComponents = calendar.components([<span class="type">NSCalendarUnit</span>.<span class="type">Day</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Month</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Year</span>, <span class="type">NSCalendarUnit</span>.<span class="type">WeekOfYear</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Hour</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Minute</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Second</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Nanosecond</span>], fromDate: currentDate)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"day = <span class="subst">\(dateComponents.day)</span>"</span>, <span class="string">"month = <span class="subst">\(dateComponents.month)</span>"</span>, <span class="string">"year = <span class="subst">\(dateComponents.year)</span>"</span>, <span class="string">"week of year = <span class="subst">\(dateComponents.weekOfYear)</span>"</span>, <span class="string">"hour = <span class="subst">\(dateComponents.hour)</span>"</span>, <span class="string">"minute = <span class="subst">\(dateComponents.minute)</span>"</span>, <span class="string">"second = <span class="subst">\(dateComponents.second)</span>"</span>, <span class="string">"nanosecond = <span class="subst">\(dateComponents.nanosecond)</span>"</span> , separator: <span class="string">", "</span>, terminator: <span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p>上面第一行代码用的方法是 <em>NSCalendar</em> 类的 <em>components(_:fromDate:)</em> 。该方法接受两个参数：第二个参数是原日期对象，我们要从中获得它的组成元素。但有意思是第一个参数，该方法要求第一个参数是一个元素为 <em>NSCalendarUnit</em> 属性的数组，这些属性对要从日期对象中抽取出的元素做出了描述。</p>
<p><em>NSCalendarUnit</em> 是一个结构体，你可以从<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/#//apple_ref/swift/struct/c:@E@NSCalendarUnit" target="_blank" rel="external">这里</a>看到所有可用的属性。上面的例子中，在你看到的代码段截图中给定的这些 calendar unit 值返回如下构成部分：</p>
<ul>
<li>Day</li>
<li>Month</li>
<li>Year</li>
<li>Week of year</li>
<li>Hour</li>
<li>Minute</li>
<li>Second</li>
<li>Nanosecond</li>
</ul>
<p>注意到在第一个参数数组中那些没有列出的 calendar unit（日历单元）在调用方法之后是不可用的。例如由于我们没有将 <em>NSCalendarUnit.TimeZone</em> 这个单元包括进去，所以在剩下获取到的元素中是访问不到时区（timezone）的（比如用 <em>print(dateComponents.timezone)</em>）。这么做的话会得到一个运行时错误。如果你需要额外的部分，你就必须再调用一次该方法，指定你想要的额外的calendar units。</p>
<p>从 date components 转换到日期对象也很容易。这回不会涉及到对 calendar unit 的使用。所需要的就是初始化一个新的<em>NSDateComponents</em>对象，然后明确指定出所有需要的components元素（当然是根据你app的需要），然后调用 <em>NSCalendar</em> 类的 <em>dateFromComponents</em> 方法实现转换。来看一下：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058096.656447" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> components = <span class="type">NSDateComponents</span>()</span><br><span class="line">components.day = <span class="number">5</span></span><br><span class="line">components.month = <span class="number">01</span></span><br><span class="line">components.year = <span class="number">2016</span></span><br><span class="line">components.hour = <span class="number">19</span></span><br><span class="line">components.minute = <span class="number">30</span></span><br><span class="line">newDate = calendar.dateFromComponents(components)</span><br></pre></td></tr></table></figure>
<p>前面的部分我们看过一个在把某特定格式的字符串转换成一个日期对象时使用了 timezone 的例子。如果你足够好奇想看看对一个日期对象设置不同 timezone 的结果，我们就将上面的代码稍稍扩展一下，看看 timezone 的多种取值：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058715.7602158" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">components.timeZone = <span class="type">NSTimeZone</span>(abbreviation: <span class="string">"GMT"</span>)</span><br><span class="line">newDate = calendar.dateFromComponents(components)</span><br><span class="line"> </span><br><span class="line">components.timeZone = <span class="type">NSTimeZone</span>(abbreviation: <span class="string">"CST"</span>)</span><br><span class="line">newDate = calendar.dateFromComponents(components)</span><br><span class="line"> </span><br><span class="line">components.timeZone = <span class="type">NSTimeZone</span>(abbreviation: <span class="string">"CET"</span>)</span><br><span class="line">newDate = calendar.dateFromComponents(components)</span><br></pre></td></tr></table></figure>
<p>GMT = 格林威治标准时间<br>CST = 中国标准时间<br>CET = 欧洲中部时间</p>
<p>你可以在<a href="http://www.timeanddate.com/time/zones/" target="_blank" rel="external">这里</a>找到所有 timezone 的缩写，还有一些很棒的在线工具。</p>
<p>现在你也知道如何去处理 <em>NSDateComponents</em> 对象了，那么咱们继续来研究另一个有意思的东西。</p>
<h3 id="比较日期和时间">比较日期和时间</h3><p>处理日期的另外一个常见情况是需要对两个日期对象进行比较，判断哪一个代表着更早或者更晚，甚至比较这两个是否为同一日期。概括来说我在下面会告诉你三种不同的比较日期对象的方式，但我不希望让你有种哪个是最好或者最坏的观点。很明显这取决于你在你的应用中想要干什么，而每种方式和其他两种都有些不同，哪种方法对你帮助最有效就选哪种。</p>
<p>在比较日期对象的方法给出之前，我们先创建两个日期对象，在本节的例子中使用。首先设定日期格式（date formatter 的 <em>dateFormat</em> 属性），然后把两个日期格式的字符串转换成两个日期对象：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateFormat = <span class="string">"MMM dd, yyyy zzz"</span></span><br><span class="line">dateAsString = <span class="string">"Oct 08, 2015 GMT"</span></span><br><span class="line"><span class="keyword">var</span> date1 = dateFormatter.dateFromString(dateAsString)!</span><br><span class="line"> </span><br><span class="line">dateAsString = <span class="string">"Oct 10, 2015 GMT"</span></span><br><span class="line"><span class="keyword">var</span> date2 = dateFormatter.dateFromString(dateAsString)!</span><br></pre></td></tr></table></figure>
<p>先看看用来比较日期的第一个方式。如果你想要比较两个日期中比较早的那一个，那么 <em>NSDate</em> 类会给你提供较大帮助，它分别提供了两个方法，<em>earlierDate:</em> 和 <em>laterDate:</em>。这两个方法的语法很简单：</p>
<p><em>date1.earlierDate(date2)</em></p>
<p>原理如下：</p>
<ul>
<li>如果 <em>date1</em> 对象比 <em>date2</em> 更早，那么上面的方法会返回 <em>date1</em> 的值。</li>
<li>如果 <em>date2</em> 对象比 <em>date1</em> 更早，那么上面的方法会返回 <em>date2</em> 的值。</li>
<li>如果两者相等，则返回 <em>date1</em>。</li>
</ul>
<p>同样道理也使用于 <em>laterDate:</em> 方法。</p>
<p>现在来看我们的例子，使用我们之前创建的那两个日期对象。下面的两条指令分别使用了刚才提到的那两个方法，为我们显示出更早的和更晚的日期：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058154.212341" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Comparing dates - Method #1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Earlier date is: <span class="subst">\(date1.earlierDate(date2)</span>)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Later date is: <span class="subst">\(date1.laterDate(date2)</span>)"</span>)</span><br></pre></td></tr></table></figure>
<p>第二种比较两个 <em>NSDate</em> 对象的方式使用的是 <em>NSDate</em> 类的 <em>compare:</em> 方法，以及 <em>NSComparisonResult</em> 枚举类型。看下面的例子就会明白我的意思，但是我先提一下这种方式的语法和我上面例子中的很像。比较日期所得的结果是和所有的可能值作比较，用这种方式可以很容易的判断出两个日期是否相等、哪一个更早或者更晚。不说了，下面的代码已经足够明了：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058154.3666584" alt=""></p>
<p>Playground 中的结果如下：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058154.5087793" alt=""></p>
<p>可复制的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Comparing dates - Method #2</span></span><br><span class="line"><span class="keyword">if</span> date1.compare(date2) == <span class="type">NSComparisonResult</span>.<span class="type">OrderedDescending</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Date1 is Later than Date2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> date1.compare(date2) == <span class="type">NSComparisonResult</span>.<span class="type">OrderedAscending</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Date1 is Earlier than Date2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> date1.compare(date2) == <span class="type">NSComparisonResult</span>.<span class="type">OrderedSame</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Same dates"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较两个日期对象的第三种方式多少有些不同，因为这种方式引入了对 <em>time intervals</em> 的使用。实际上这种方式很简单，它做的就是获得自每个日期以来的时间间隔（每个日期和<em>现在</em>的时间间隔），然后做比较：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058154.791958" alt=""><br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Comparing dates - Method #3</span></span><br><span class="line"><span class="keyword">if</span> date1.timeIntervalSinceReferenceDate &gt; date2.timeIntervalSinceReferenceDate &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Date1 is Later than Date2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> date1.timeIntervalSinceReferenceDate &lt;  date2.timeIntervalSinceReferenceDate &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Date1 is Earlier than Date2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Same dates"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码也可以应用到对时间的比较。下面我给你最后一个例子，而这次 <em>date1</em> 和 <em>date2</em> 对象包含了对时间的表示。我再次使用 <em>earlierDate:</em> 方法，但另外还有一个，<em>idEqualToDate:</em>，很明显，看名字就知道它是干什么的：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058155.0071487" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Comparing time.</span></span><br><span class="line">dateFormatter.dateFormat = <span class="string">"HH:mm:ss zzz"</span></span><br><span class="line">dateAsString = <span class="string">"14:28:16 GMT"</span></span><br><span class="line">date1 = dateFormatter.dateFromString(dateAsString)!</span><br><span class="line"> </span><br><span class="line">dateAsString = <span class="string">"19:53:12 GMT"</span></span><br><span class="line">date2 = dateFormatter.dateFromString(dateAsString)!</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> date1.earlierDate(date2) == date1 &#123;</span><br><span class="line">    <span class="keyword">if</span> date1.isEqualToDate(date2) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Same time"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(date1)</span> is earlier than <span class="subst">\(date2)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(date2)</span> is earlier than <span class="subst">\(date1)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果看到上面代码中「2000-01-01」这个日期之后你感觉好奇或疑惑的话，不用担心。<em>NSDate</em> 如果在没有给定任何特定日期来做转换的情况下会默认将其添加，它不会影响到这个日期中其他的元素（例子中其他的元素是时间）。</p>
<p>好了，到这里你也会怎么对日期做比较了。</p>
<h3 id="计算出未来或过去的日期">计算出未来或过去的日期</h3><p>处理日期另一个有趣的方面就是计算出一个将来或者过去的日期。我们之前看到的那些用法在这里会变得很方便，比如 <em>NSCalendarUnit</em> 结构体，或者 <em>NSDateComponents</em> 类。实际上，我会给你展示两种不同的计算出其他日期的方式，第一种使用的就是 <em>NSCalendar</em> 类和 <em>NSCalendarUnit</em> 结构体，第二种使用的是 <em>NSDateComponents</em> 类。最后我会给出第三种方式，但是一般情况我不推荐使用（到那部分我会解释为什么）。</p>
<p>一开始我们先记一下当前日期（是我写这篇教程的日期），它会被用作我们的参考日期：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058155.1251872" alt=""></p>
<p>现在假设我们想把当前日期加上两个月零五天，实际上还是写下来比较好：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> monthsToAdd = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> daysToAdd = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>我们现在就可以看一下第一种方式了，来得到想要的新日期吧。先给代码，马上解释：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calculatedDate = <span class="type">NSCalendar</span>.currentCalendar().dateByAddingUnit(<span class="type">NSCalendarUnit</span>.<span class="type">Month</span>, value: monthsToAdd, toDate: currentDate, options: <span class="type">NSCalendarOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>))</span><br><span class="line">calculatedDate = <span class="type">NSCalendar</span>.currentCalendar().dateByAddingUnit(<span class="type">NSCalendarUnit</span>.<span class="type">Day</span>, value: daysToAdd, toDate: calculatedDate!, options: <span class="type">NSCalendarOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p>如你所见，这里用到的方法是 <em>NSCalendar</em> 类的 <em>dateByAddingUnit:value:toDate:options:</em> 方法。这个方法的任务就是给一个现有的日期加上一个特定的 calendar unit（由第一个参数指定），并将这个加法的结果做为一个新的日期返回。我们开始想的是在当前日期的基础上同时加两个不同的 calendar unit，但很显然这不现实。所以这里问题的关键是就要连续的调用该方法，每次设置其中的一个 calendar unit，从而得到最终结果。</p>
<p>下面是每次叠加之后 playground 显示的结果：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058716.3939843" alt=""></p>
<p>上面的方式不错，但是仅限于你要加的只有 1~2 个 calendar units，否则你得连续多次调用上面那个方法才行。</p>
<p>当需要叠加更多的 units 时，第二个，也是更倾向的方式是使用 <em>NSDateComponents</em> 这个类。为了演示，我们不会再引入其他的组成元素，除上面已经定好的月和日之外。在这儿要做的事情很简单：首先初始化一个新的 <em>NSDateComponents</em> 对象，并给它设置之前定好的月和日。然后调用 <em>NSCalendar</em> 类的另一个叫做 <em>dateByAddingComponents:toDate:options:</em> 的方法，我们会立即得到一个新的 <em>NSDate</em> 对象，这个新对象即代表了最终想要的日期。</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058158.1788666" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newDateComponents = <span class="type">NSDateComponents</span>()</span><br><span class="line">newDateComponents.month = monthsToAdd</span><br><span class="line">newDateComponents.day = daysToAdd</span><br><span class="line"></span><br><span class="line">calculatedDate = <span class="type">NSCalendar</span>.currentCalendar().dateByAddingComponents(newDateComponents, toDate: currentDate, options: <span class="type">NSCalendarOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p>注意到上面的两个代码段中，我都没给这两个新介绍方法的最后一个参数做任何设置。而如果你想对这个可设选项了解更多的话，就去参考<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/" target="_blank" rel="external"> <em>NSCalendar</em> 类的官方文档</a>。</p>
<p>第三种计算另一个日期方式不推荐对时间跨度大的情况使用，因为由于闰秒，闰年，夏令时等等会导致这种方式产生出错误结果。该方式的想法是给当前日期加上一个特定的时间间隔。我们会使用 <em>NSDate</em> 类的 <em>dateByAddingTimeInterval:</em> 方法来实现这个目的。下面的例子中我们算出来一个相当于是 1.5 小时的时间间隔，然后把它加到当前日期上：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hoursToAddInSeconds: <span class="type">NSTimeInterval</span> = <span class="number">90</span> * <span class="number">60</span></span><br><span class="line">calculatedDate = currentDate.dateByAddingTimeInterval(hoursToAddInSeconds)</span><br></pre></td></tr></table></figure>
<p>再强调一下，要做任何类型的日期计算的话，还是使用前两种方式更安全。但这还是取决于你，选择你更喜欢的那一种。</p>
<p>上面的三个例子都是给当前日期加上某些个组成元素。那现在用同样方式给当前日期减去几天，算出来那个过去的日期该怎么做？</p>
<p>下面的代码示范了该怎么做。首先给当前日期加上一个特定天数的<em>负</em>值，这就可以得到一个属于过去的日期了。然后把结果转换成一个有适当格式的字符串，最后的结果…很有意思：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058716.4647555" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numberOfDays = -<span class="number">5684718</span></span><br><span class="line">calculatedDate = <span class="type">NSCalendar</span>.currentCalendar().dateByAddingUnit(<span class="type">NSCalendarUnit</span>.<span class="type">Day</span>, value: numberOfDays, toDate: currentDate, options: <span class="type">NSCalendarOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>))</span><br><span class="line"> </span><br><span class="line">dateFormatter.dateFormat = <span class="string">"EEEE, MMM dd, yyyy GGG"</span></span><br><span class="line">dateAsString = dateFormatter.stringFromDate(calculatedDate!)</span><br></pre></td></tr></table></figure>
<p>以上所有的小代码段示例可以完全给你讲明白怎样通过给某个参考日期加上或正或负的 calendar unit 来算出一个新的日期。自己随便扩展一下上面的代码吧，写下你自己的代码，你就会对这些技巧更加熟悉。</p>
<h3 id="计算出日期的差值">计算出日期的差值</h3><p>和标题的意思一样，这节讲的是计算出两个日期之间的差值，它是在你编程生涯中某个时间肯定要做的一个任务，显然需要做不止一次。在这（教程的最后）一部分，我会告诉你计算出两个 <em>NSDate</em> 对象之间差值的三种方式，你可以根据需要选出最适合你的那一种。</p>
<p>开始之前先定义两个 <em>NSDate</em> 对象：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line">dateAsString = <span class="string">"2015-10-08 14:25:37"</span></span><br><span class="line">date1 = dateFormatter.dateFromString(dateAsString)!</span><br><span class="line"> </span><br><span class="line">dateAsString = <span class="string">"2018-03-05 08:14:19"</span></span><br><span class="line">date2 = dateFormatter.dateFromString(dateAsString)!</span><br></pre></td></tr></table></figure>
<p>有了上面的日期对象，我们再来看一下如何获取日期组成元素（date components）形式的日期差值（date difference ）。我们会再次用到 <em>NSCalendar</em> 类，还有它的一个之前我们没见过的方法。最后把日期组成元素打印出来看一下结果。很明显当有了它，这个代表了日期差值的元素之后，想怎么做都取决于你了。来看下示范：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058716.5368817" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> diffDateComponents = <span class="type">NSCalendar</span>.currentCalendar().components([<span class="type">NSCalendarUnit</span>.<span class="type">Year</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Month</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Day</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Hour</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Minute</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Second</span>], fromDate: date1, toDate: date2, options: <span class="type">NSCalendarOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The difference between dates is: <span class="subst">\(diffDateComponents.year)</span> years, <span class="subst">\(diffDateComponents.month)</span> months, <span class="subst">\(diffDateComponents.day)</span> days, <span class="subst">\(diffDateComponents.hour)</span> hours, <span class="subst">\(diffDateComponents.minute)</span> minutes, <span class="subst">\(diffDateComponents.second)</span> seconds"</span>)</span><br></pre></td></tr></table></figure>
<p>这种新方式就是使用 <em>components:fromDate:toDate:options:</em> 方法，同样它的第一个参数是一个 <em>NSCalendarUnit</em> 的数组。注意下如果第一个日期比第二个晚的话，返回值就会是负数。</p>
<p>在计算日期差值的另外两种方式中，我们会第一次用到 <em>NSDateComponentsFormatter</em> 类，这个类有很多方法，能自动做出差值计算，然后返回一个带有特定格式的字符串。先生成一个对象，并先指定它的一个属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateComponentsFormatter = <span class="type">NSDateComponentsFormatter</span>()</span><br><span class="line">dateComponentsFormatter.unitsStyle = <span class="type">NSDateComponentsFormatterUnitsStyle</span>.<span class="type">Full</span></span><br></pre></td></tr></table></figure>
<p><em>unitsStyle</em> 属性告诉 <em>dateComponentsFormatter</em> 描述日期差值的那个字符串的格式应该是什么样的，显示出的日期组成元素应该是怎样的样式。比如用 <em>Full</em> 这个样式，星期几、月份等等就会显示成常规的全写（full-length）单词。而如果我们用了 <em>Abbreviated</em> 样式的话，则会显示这些信息的缩写。从<a href="https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSDateComponentsFormatter_class/index.html#//apple_ref/c/tdef/NSDateComponentsFormatterUnitsStyle" target="_blank" rel="external">这里</a>你能看到关于单元样式（units style）的全说明列表。</p>
<p>回到日期差值中来，这次我们要先算出两个日期之间的时间间隔。然后这个间隔本身会作为一个参数传递给 <em>NSDateComponentFormatter</em> 类的 <em>stringFromTimeInterval:</em> 方法，结果就会以一个格式化好了的字符串形式返回。</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058159.4423432" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> interval = date2.timeIntervalSinceDate(date1)</span><br><span class="line">dateComponentsFormatter.stringFromTimeInterval(interval)</span><br></pre></td></tr></table></figure>
<p>最后，在计算日期差值的最后一个方式中，两个日期需要作为参数传递给 <em>NSDateComponentsFormatter</em> 类的 <em>stringFromDate:toDate:</em> 方法。然而用这个方法之前需要先满足一个条件：<em>allowedUnits</em> 属性必须要设置一个 calendar unit，否则该方法会返回一个 nil。所以我们就「告诉」这个方法我们想要怎样的 unit，之后就等它给我们差值结果：</p>
<p><img src="/img/articles/a-beginners-guide-to-nsdate-in-swift/12401450058716.6109412" alt=""></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateComponentsFormatter.allowedUnits = [<span class="type">NSCalendarUnit</span>.<span class="type">Year</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Month</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Day</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Hour</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Minute</span>, <span class="type">NSCalendarUnit</span>.<span class="type">Second</span>]</span><br><span class="line"><span class="keyword">let</span> autoFormattedDifference = dateComponentsFormatter.stringFromDate(date1, toDate: date2)</span><br></pre></td></tr></table></figure>
<h3 id="总结">总结</h3><p>简介部分中我说过，处理 <em>NSDate</em> 对象这件事在你项目中非常常见，而且肯定无法避免。不可否认它并不是程序员最喜欢讨论的话题，所以我就写了前面的那些，在小例子中告诉你其实处理日期是很容易的。这篇教程中 <em>NSDate</em> 的方方面面，以及其他相关的类都有一个共同目标：教你小巧高效的用法，两三行代码就让你把活儿搞定。希望这篇文章能给你做个指南，尤其如果你是一个新开发者。下篇文章出来之前，好好练习吧。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：gabriel theodoropoulos，<a href="http://www.appcoda.com/nsdate/">原文链接</a>，原文日期：2015-10-18<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles">ray16897188</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/Cee">Cee</a></p>
</blockquote>
<p>如果问我在做过的所有项目中做的最多的事情，那处理日期绝对是榜上有名（译注：本文中的「日期」是指代 NSDate 对象，同时包含「日（date）」 和「时（time）」这两个元素）。毋庸置疑，无论工作量是多是少，开发者迟早需要「玩」一下 NSDate 类，去按某种方式处理一下日期。从简单的将一个日期转换成一个字符串到对日期做计算，总会有一个不变的事实：开发者必须在 iOS 编程中学会这个知识点。这并不难掌握，而且可以为以后更重要任务节省时间。在新手看来，对日期的操作很麻烦；然而事实并非如此。你需要做的就是掌握它。</p>]]>
    
    </summary>
    
      <category term="AppCoda" scheme="http://swiftggteam.github.io/tags/AppCoda/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIAlertController 测试的修正]]></title>
    <link href="http://swiftggteam.github.io/2015/12/11/correction-on-testing-uialertcontroller/"/>
    <id>http://swiftggteam.github.io/2015/12/11/correction-on-testing-uialertcontroller/</id>
    <published>2015-12-10T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：dom，<a href="http://swiftandpainless.com/correction-on-testing-uialertcontroller/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-25<br>译者：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；校对：<a href="http://weibo.com/lfbWb" target="_blank" rel="external">lfb_CD</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>两个月前，我曾发布了一篇<a href="http://swiftandpainless.com/how-to-test-uialertcontroller-in-swift/" target="_blank" rel="external">如何测试 UIAlertController</a>的文章。一个读者发现测试没有如期地起作用：</p>
<a id="more"></a>
<blockquote>
<p><a href="https://twitter.com/dasdom" target="_blank" rel="external">@dasdom</a> 你的测试是正常的，但是在 <code>MockUIAction</code> 中的简便 <code>init</code> 方法没有被调用。你不能重写 <code>init</code> 方法，看起来像是 iOS 的bug。<br> — Larhythimx (@Larhythmix) <a href="https://twitter.com/Larhythmix/status/669456137041915905" target="_blank" rel="external">25. November 2015</a></p>
</blockquote>
<p>Larhythimx 说的完全正确。模拟程序的初始化方法从来没有调用。为什么我在写这个测试用例的时候没有发觉呢？那是因为 handler 确实被调用了，看起来就像 <code>UIAlertAction</code> 真的把 handler 作为内部变量去存储动作的 handler 闭包。这是非常脆弱的，并且 Larhythimx 在另一个 tweet 指出在他的测试程序中 handler 是 <code>nil</code>。</p>
<p>所以作为黄金通道（即编写不需要改变实现的测试）走不通，那就退而求其次用别的方法。</p>
<p>首先，我们在 <code>UIAlertAction</code> 中添加一个类方法去创建 action 。在 <code>ViewController.swift</code> 中增加如下扩展：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIAlertAction</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">makeActionWithTitle</span>(<span class="title">title</span>: <span class="title">String</span>?, <span class="title">style</span>: <span class="title">UIAlertActionStyle</span>, <span class="title">handler</span>: ((<span class="title">UIAlertAction</span>) -&gt; <span class="title">Void</span>)?) -&gt; <span class="title">UIAlertAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIAlertAction</span>(title: title, style: style, handler: handler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>MockAlertAction</code> 中增加这个重写方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">makeActionWithTitle</span>(<span class="title">title</span>: <span class="title">String</span>?, <span class="title">style</span>: <span class="title">UIAlertActionStyle</span>, <span class="title">handler</span>: ((<span class="title">UIAlertAction</span>) -&gt; <span class="title">Void</span>)?) -&gt; <span class="title">MockAlertAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">MockAlertAction</span>(title: title, style: style, handler: handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实现代码中，我们现在可以使用类方法去创建 alert 动作：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> okAction = <span class="type">Action</span>.makeActionWithTitle(<span class="string">"OK"</span>, style: .<span class="type">Default</span>) &#123; (action) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.actionString = <span class="string">"OK"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cancelAction = <span class="type">Action</span>.makeActionWithTitle(<span class="string">"Cancel"</span>, style: .<span class="type">Default</span>) &#123; (action) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.actionString = <span class="string">"Cancel"</span></span><br><span class="line">&#125;</span><br><span class="line">alertViewController.addAction(cancelAction)</span><br></pre></td></tr></table></figure>
<p>为了确保我们的测试用例正常，如我们预期地工作，将 <code>MockAlertAction</code> 的 <code>handler</code> 属性重命名为 <code>mockHandler</code>： </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mockHandler: <span class="type">Handler</span>?</span><br></pre></td></tr></table></figure>
<p>此外，我们为动作的模拟标题添加测试。取消动作的测试应该像这样： </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">testAlert_FirstActionStoresCancel</span><span class="params">()</span></span> &#123;</span><br><span class="line">  sut.<span class="type">Action</span> = <span class="type">MockAlertAction</span>.<span class="keyword">self</span></span><br><span class="line">  </span><br><span class="line">  sut.showAlert(<span class="type">UIButton</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> alertController = sut.presentedViewController <span class="keyword">as</span>! <span class="type">UIAlertController</span></span><br><span class="line">  <span class="keyword">let</span> action = alertController.actions.first <span class="keyword">as</span>! <span class="type">MockAlertAction</span></span><br><span class="line">  action.mockHandler!(action)</span><br><span class="line">  </span><br><span class="line">  <span class="type">XCTAssertEqual</span>(sut.actionString, <span class="string">"Cancel"</span>)</span><br><span class="line">  <span class="type">XCTAssertEqual</span>(action.mockTitle, <span class="string">"Cancel"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个测试在此前的版本将会失败，因为初始化方法没有被调用，因此模拟标题也没有得到设置。</p>
<p>你可以在 <a href="https://github.com/dasdom/TestingAlertExperiment" target="_blank" rel="external">github</a> 上找到修正的版本。</p>
<p>再次感谢 Larhythimx 的推特！</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：dom，<a href="http://swiftandpainless.com/correction-on-testing-uialertcontroller/">原文链接</a>，原文日期：2015-11-25<br>译者：<a href="http://daizi.me">小袋子</a>；校对：<a href="http://weibo.com/lfbWb">lfb_CD</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>两个月前，我曾发布了一篇<a href="http://swiftandpainless.com/how-to-test-uialertcontroller-in-swift/">如何测试 UIAlertController</a>的文章。一个读者发现测试没有如期地起作用：</p>]]>
    
    </summary>
    
      <category term="Swift and Painless" scheme="http://swiftggteam.github.io/tags/Swift-and-Painless/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[化零为整：Reduce 详解]]></title>
    <link href="http://swiftggteam.github.io/2015/12/10/reduce-all-the-things/"/>
    <id>http://swiftggteam.github.io/2015/12/10/reduce-all-the-things/</id>
    <published>2015-12-09T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Benedikt Terhechte，<a href="http://appventure.me/2015/11/30/reduce-all-the-things/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-30<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>即使早在 Swift 正式发布之前，iOS / Cocoa 开发者都可以使用诸如 ObjectiveSugar 或者 ReactiveCocoa 第三方库，实现类似 <code>map</code>、<code>flatMap</code> 或 <code>filter</code> 等函数式编程的构建。而在 Swift 中，这些家伙（<code>map</code> 等几个函数）已经入驻成为「头等公民」了。比起标准的 <code>for</code> 循环，使用函数式编程有很多优势。它们通常能够更好地表达你的意图，减少代码的行数，以及使用链式结构构建复杂的逻辑，更显清爽。</p>
<a id="more"></a>
<p>本文中，我将介绍附加于 Swift 中的一个非常酷的函数：「Reduce」。相对于 <code>map</code> / <code>filter</code> 函数，<code>reduce</code> 有时不失为一个更好的解决方案。</p>
<h3 id="一个简单的问题">一个简单的问题</h3><p>思考这么一个问题：你从 JSON 中获取到一个 persons 列表，意图计算所有来自 California 的居民的平均年龄。需要解析的数据如下所示：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> persons: [[<span class="type">String</span>: <span class="type">AnyObject</span>]] = [[<span class="string">"name"</span>: <span class="string">"Carl Saxon"</span>, <span class="string">"city"</span>: <span class="string">"New York, NY"</span>, <span class="string">"age"</span>: <span class="number">44</span>],</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"Travis Downing"</span>, <span class="string">"city"</span>: <span class="string">"El Segundo, CA"</span>, <span class="string">"age"</span>: <span class="number">34</span>],</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"Liz Parker"</span>, <span class="string">"city"</span>: <span class="string">"San Francisco, CA"</span>, <span class="string">"age"</span>: <span class="number">32</span>],</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"John Newden"</span>, <span class="string">"city"</span>: <span class="string">"New Jersey, NY"</span>, <span class="string">"age"</span>: <span class="number">21</span>],</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"Hector Simons"</span>, <span class="string">"city"</span>: <span class="string">"San Diego, CA"</span>, <span class="string">"age"</span>: <span class="number">37</span>],</span><br><span class="line"> [<span class="string">"name"</span>: <span class="string">"Brian Neo"</span>, <span class="string">"age"</span>: <span class="number">27</span>]] <span class="comment">//注意这家伙没有 city 键值</span></span><br></pre></td></tr></table></figure>
<p>注意最后一个记录，它遗漏了问题中 person 的居住地 city 。对于这些情况，默默忽略即可…</p>
<p>本例中，我们期望的结果是那三位来自 California 的居民。让我们尝试在 Swift 中使用 <code>flatMap</code> 和 <code>filter</code> 来实现这个任务。使用 <code>flatMap</code> 函数替代 <code>map</code> 函数的原因在于前者能够忽略可选值为 nil 的情况。例如 <code>flatMap([0,nil,1,2,nil])</code> 的结果是 <code>[0,1,2]</code>。处理那些没有 city 属性的情况这会非常有用。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">infoFromState</span><span class="params">(state state: String, persons: [[String: AnyObject]])</span></span> </span><br><span class="line">     -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">	   <span class="comment">// 先进行 flatMap 后进行 filter 筛选</span></span><br><span class="line">     <span class="comment">// $0["city"] 是一个可选值，对于那些没有 city 属性的项返回 nil</span></span><br><span class="line">     <span class="comment">// componentsSeparatedByString 处理键值，例如 "New York, NY" </span></span><br><span class="line">     <span class="comment">// 最后返回的 ["New York","NY"]，last 取到最后的 NY</span></span><br><span class="line">    <span class="keyword">return</span> persons.flatMap( &#123; $<span class="number">0</span>[<span class="string">"city"</span>]?.componentsSeparatedByString(<span class="string">", "</span>).last &#125;)</span><br><span class="line">	   .<span class="built_in">filter</span>(&#123;$<span class="number">0</span> == state&#125;)</span><br><span class="line">	   .<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line">infoFromState(state: <span class="string">"CA"</span>, persons: persons)</span><br><span class="line"><span class="comment">//#+RESULTS:</span></span><br><span class="line"><span class="comment">//: 3</span></span><br></pre></td></tr></table></figure>
<p>这非常简单。</p>
<p>不过，现在来思考另外一个难题：你想要获悉居住在 California 的人口数，接着计算他们的平均年龄。如果我们想要在上面函数的基础上尝试做修改，立马会发现难度不小。解决方法倒是有几种，不过大都看起来不适用函数式结构解决方案。倒是通过循环的方式能简单的解决这个问题。</p>
<p>这时候我们要琢磨为啥不适用了，原因很简单：数据的形式（Shape）改变了。而 <code>map</code>、<code>flatMap</code> 和 <code>filter</code> 函数能够始终保持数据形式的相似性。数组传入，数组返回。当然数组的元素个数和内容可以改变，不过始终是数组形式（Array-shape）。但是，上面所描述的问题要求我们最后转换成的结果是个结构体（Struct），或者说是以元组（Tuple）的形式包含<strong>一个整型平均值（平均年龄）</strong>和<strong>一个整型总和（人口数）</strong>。</p>
<p>对于这种类型的问题，我们可以使用 <code>reduce</code> 来救场。</p>
<h3 id="Reduce">Reduce</h3><p>Reduce 是 <code>map</code>、<code>flatMap</code> 或 <code>filter</code> 的一种扩展的形式（译者注：后三个函数能干嘛，reduce 就能用另外一种方式实现）。<strong>Reduce</strong> 的基础思想是将一个序列转换为一个不同类型的数据，期间通过一个<strong>累加器（Accumulator）</strong>来持续记录递增状态。为了实现这个方法，我们会向 reduce 方法中传入一个用于处理序列中每个元素的<strong>结合（Combinator）</strong>闭包 / 函数 / 方法。这听起来有点复杂，不过通过几个例子练手，你就会发现这相当简单。</p>
<p>它是 <code>SequenceType</code> 中的一个方法，看起来是这样的（简化版本）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">reduce</span><span class="generics">&lt;T&gt;</span><span class="params">(initial: T, combine: <span class="params">(T, <span class="keyword">Self</span>.Generator.Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure>
<p>此刻，我们拥有一个初始值（Initial value）以及一个闭包（返回值类型和初始值类型一致）。函数最后的返回值同样和初始值类型一致，为 <code>T</code>。</p>
<p>假设我们现在要实现一个 reduce 操作 — 对一个整数列表值做累加运算，方案如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">combinator</span><span class="params">(accumulator: Int, current: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> accumulator + current</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">reduce</span>(<span class="number">0</span>, combine: combinator)</span><br><span class="line"><span class="comment">// 执行步骤如下</span></span><br><span class="line">combinator(<span class="number">0</span>, <span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="number">0</span> + <span class="number">1</span> &#125; = <span class="number">1</span></span><br><span class="line">combinator(<span class="number">1</span>, <span class="number">2</span>) &#123; <span class="keyword">return</span> <span class="number">1</span> + <span class="number">2</span> &#125; = <span class="number">3</span></span><br><span class="line">combinator(<span class="number">3</span>, <span class="number">3</span>) &#123; <span class="keyword">return</span> <span class="number">3</span> + <span class="number">3</span> &#125; = <span class="number">6</span></span><br><span class="line">= <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><code>[1, 2, 3]</code> 中的每个元素都将调用一次<strong>结合（Combinator）</strong>函数进行处理。同时我们使用<strong>累加器（Accumulator）</strong>变量实时记录递增状态（递增并非是指加法），这里是一个整型值。</p>
<p>接下来，我们重新实现那些函数式编程的「伙伴」（自己来写 map、flatMap 和 filter 函数）。简便起见，所有这些方法都是对 <code>Int</code> 或 <code>Optional&lt;Int&gt;</code> 进行操作的；换言之，我们此刻不考虑泛型。另外牢记下面的实现只是为了展示 <code>reduce</code> 的实现过程。原生的 Swift 实现相比较下面 reduce 的版本，速度要快很多<a href="#1">1</a>。不过，Reduce 能在不同的问题中表现得很好，之后会进一步地详述。</p>
<h3 id="Map">Map</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重新定义一个 map 函数</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">rmap</span><span class="params">(elements: [Int], transform: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> elements.<span class="built_in">reduce</span>([<span class="type">Int</span>](), combine: &#123; (<span class="keyword">var</span> acc: [<span class="type">Int</span>], obj: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] <span class="keyword">in</span></span><br><span class="line">       acc.append(transform(obj))</span><br><span class="line">       <span class="keyword">return</span> acc</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(rmap([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], transform: &#123; $<span class="number">0</span> * <span class="number">2</span>&#125;))</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>
<p>这个例子能够很好地帮助你理解 <code>reduce</code> 的基础知识。</p>
<ul>
<li>首先，elements 序列调用 reduce 方法：<code>elements.reduce...</code>。</li>
<li>然后，我们传入初始值给累加器（Accumulator），即一个 Int 类型空数组（<code>[Int]()</code>）。</li>
<li>接着，我们传入 <code>combinator</code> 闭包，它接收两个参数：第一个参数为 accumulator，即 <code>acc: [Int]</code>；第二个参数为从序列中取得的当前对象 <code>obj: Int</code>（译者注：对序列进行遍历，每次取到其中的一个对象 obj）。</li>
<li><code>combinator</code> 闭包体中的实现代码非常简单。我们对 obj 做变换处理，然后添加到累加器 accumulator 中。最后返回 accumulator 对象。</li>
</ul>
<p>相比较调用 <code>map</code> 方法，这种实现代码看起来有点冗余。的确如此！但是，上面这个版本相当详细地解释了 <code>reduce</code> 方法是怎么工作的。我们可以对此进行简化。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">rmap</span><span class="params">(elements: [Int], transform: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">	<span class="comment">// $0 表示第一个传入参数，$1 表示第二个传入参数，依次类推...</span></span><br><span class="line">    <span class="keyword">return</span> elements.<span class="built_in">reduce</span>([<span class="type">Int</span>](), combine: &#123;$<span class="number">0</span> + [transform($<span class="number">1</span>)]&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(rmap([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], transform: &#123; $<span class="number">0</span> * <span class="number">2</span>&#125;))</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>
<p>依旧能够正常运行。这个版本都有哪些不同呢？实际上，我们使用了 Swift 中的小技巧，<code>+</code> 运算符能够对两个序列进行加法操作。因此 <code>[0, 1, 2] + [transform(4)]</code> 表达式将左序列和右序列进行相加，其中右序列由转换后的元素构成。</p>
<p>这里有个地方需要引起注意：<code>[0, 1, 2] + [4]</code> 执行速度要慢于 <code>[0, 1, 2].append(4)</code>。倘若你正在处理庞大的列表，应取代集合 + 集合的方式，转而使用一个可变的 accumulator 变量进行递增：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">rmap</span><span class="params">(elements: [Int], transform: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> elements.<span class="built_in">reduce</span>([<span class="type">Int</span>](), combine: &#123; (<span class="keyword">var</span> ac: [<span class="type">Int</span>], b: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] <span class="keyword">in</span> </span><br><span class="line">	<span class="comment">// 作者提倡使用这种，因为执行速度更快</span></span><br><span class="line">	ac.append(transform(b))</span><br><span class="line">	<span class="keyword">return</span> ac</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了进一步加深对 <code>reduce</code> 的理解，我们将继续重新实现 <code>flatMap</code> 和 <code>filter</code> 方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">rflatMap</span><span class="params">(elements: [Int], transform: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>?) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> elements.<span class="built_in">reduce</span>([<span class="type">Int</span>](), </span><br><span class="line">       combine: &#123; <span class="keyword">guard</span> <span class="keyword">let</span> m = transform($<span class="number">1</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> $<span class="number">0</span> &#125; </span><br><span class="line">		  <span class="keyword">return</span> $<span class="number">0</span> + [m]&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(rflatMap([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], transform: &#123; <span class="keyword">guard</span> $<span class="number">0</span> != <span class="number">3</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;; <span class="keyword">return</span> $<span class="number">0</span> * <span class="number">2</span>&#125;))</span><br><span class="line"><span class="comment">// [2, 8]</span></span><br></pre></td></tr></table></figure>
<p>这里 rflatMap 和 rmap 主要差异在于，前者增加了一个 <code>guard</code> 表达式确保可选类型始终有值（换言之，摒弃那些 nil 的情况）。</p>
<h3 id="Filter">Filter</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">rFilter</span><span class="params">(elements: [Int], <span class="built_in">filter</span>: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> elements.<span class="built_in">reduce</span>([<span class="type">Int</span>](), </span><br><span class="line">       combine: &#123; <span class="keyword">guard</span> <span class="built_in">filter</span>($<span class="number">1</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> $<span class="number">0</span> &#125; </span><br><span class="line">		  <span class="keyword">return</span> $<span class="number">0</span> + [$<span class="number">1</span>]&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(rFilter([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>], <span class="built_in">filter</span>: &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span>&#125;))</span><br><span class="line"><span class="comment">// [4, 6]</span></span><br></pre></td></tr></table></figure>
<p>依旧难度不大。我们再次使用 guard 表达式确保满足筛选条件。</p>
<p>到目前为止，<code>reduce</code> 方法看起来更像是 <code>map</code> 或 <code>filter</code> 的复杂版本，除此之外然并卵。不过，所结合的内容不需要是一个数组，它可以是其他任何类型。这使得我们依靠一种简单的方式，就可以轻松地实现各种 reduction 操作。</p>
<h3 id="Reduce_范例">Reduce 范例</h3><p>首先介绍我最喜欢的数组元素求和范例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始值 initial 为 0，每次遍历数组元素，执行 + 操作</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>仅传入 <code>+</code> 作为一个 <code>combinator</code> 函数是有效的，它仅仅是对 <code>lhs（Left-hand side，等式左侧）</code> 和 <code>rhs（Right-hand side，等式右侧）</code> 做加法处理，最后返回结果值，这完全满足 <code>reduce</code> 函数的要求。</p>
<p>另外一个范例：通过一组数字计算他们的乘积：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始值 initial 为 1，每次遍历数组元素，执行 * 操作</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="built_in">reduce</span>(<span class="number">1</span>, combine: *)</span><br><span class="line"><span class="comment">// 24</span></span><br></pre></td></tr></table></figure>
<p>甚至我们可以反转数组：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $0 指累加器（accumulator），$1 指遍历数组得到的一个元素</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="built_in">reduce</span>([<span class="type">Int</span>](), combine: &#123; [$<span class="number">1</span>] + $<span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 5, 4, 3, 2, 1</span></span><br></pre></td></tr></table></figure>
<p>最后，来点有难度的任务。我们想要基于某个标准对列表做划分（Partition）处理：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为元组定义个别名，此外 Acc 也是闭包传入的 accumulator 的类型</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Acc</span> = (l: [<span class="type">Int</span>], r: [<span class="type">Int</span>])</span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(lst: [Int], criteria: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; <span class="type">Acc</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> lst.<span class="built_in">reduce</span>((l: [<span class="type">Int</span>](), r: [<span class="type">Int</span>]()), combine: &#123; (ac: <span class="type">Acc</span>, o: <span class="type">Int</span>) -&gt; <span class="type">Acc</span> <span class="keyword">in</span> </span><br><span class="line">      <span class="keyword">if</span> criteria(o) &#123;</span><br><span class="line">	<span class="keyword">return</span> (l: ac.l + [o], r: ac.r)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (r: ac.r + [o], l: ac.l)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">partition</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], criteria: &#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">//: ([2, 4, 6, 8], [1, 3, 5, 7, 9])</span></span><br></pre></td></tr></table></figure>
<p>上面实现中最有意思的莫过于我们使用 <code>tuple</code> 作为 accumulator。你会渐渐发现，一旦你尝试将 <code>reduce</code> 进入到日常工作流中，<code>tuple</code> 是一个不错的选择，它能够将数据与 reduce 操作快速挂钩起来。</p>
<h3 id="执行效率对比：Reduce_vs-_链式结构">执行效率对比：Reduce vs. 链式结构</h3><p><code>reduce</code> 除了较强的灵活性之外，还具有另一个优势：通常情况下，<code>map</code> 和 <code>filter</code> 所组成的链式结构会引入性能上的问题，因为它们需要多次遍历你的集合才能最终得到结果值，这种操作往往伴随着性能损失，比如以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="built_in">map</span>(&#123; $<span class="number">0</span> + <span class="number">3</span>&#125;).<span class="built_in">filter</span>(&#123; $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span>&#125;).<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</span><br></pre></td></tr></table></figure>
<p>除了毫无意义之外，它还浪费了 CPU 周期。初始序列（即 [0, 1, 2, 3, 4]）被重复访问了三次之多。首先是 map，接着 filter，最后对数组内容求和。其实，所有这一切操作我们能够使用 <code>reduce</code> 完全替换实现，极大提高执行效率：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里只需要遍历 1 次序列足矣</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="built_in">reduce</span>(<span class="number">0</span>, combine: &#123; (ac: <span class="type">Int</span>, r: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> </span><br><span class="line">   <span class="keyword">if</span> (r + <span class="number">3</span>) % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> ac + r + <span class="number">3</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> ac</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这里给出一个快速的基准运行测试，使用以上两个版本以及 for-loop 方式对一个容量为 100000 的列表做处理操作：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for-loop 版本</span></span><br><span class="line"><span class="keyword">var</span> ux = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">Array</span>(<span class="number">0</span>...<span class="number">100000</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">3</span>) % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">	ux += (i + <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xiol9.com1.z0.glb.clouddn.com/pic测试结果.png" alt="测试结果"></p>
<p>正如你所看见的，<code>reduce</code> 版本的执行效率和 <code>for-loop</code> 操作非常相近，且是链式操作的一半时间。</p>
<p>不过，在某些情况中，链式操作是优于 <code>reduce</code> 的。思考如下范例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Array</span>(<span class="number">0</span>...<span class="number">100000</span>).<span class="built_in">map</span>(&#123; $<span class="number">0</span> + <span class="number">3</span>&#125;).<span class="built_in">reverse</span>().<span class="keyword">prefix</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 0.027 Seconds</span></span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Array</span>(<span class="number">0</span>...<span class="number">100000</span>).<span class="built_in">reduce</span>([], combine: &#123; (<span class="keyword">var</span> ac: [<span class="type">Int</span>], r: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] <span class="keyword">in</span></span><br><span class="line">    ac.insert(r + <span class="number">3</span>, atIndex: <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> ac</span><br><span class="line">&#125;).<span class="keyword">prefix</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 2.927 Seconds</span></span><br></pre></td></tr></table></figure>
<p>这里，注意到使用链式操作花费 0.027s，这与 reduce 操作的 2.927s 形成了鲜明的反差，这究竟是怎么回事呢？<a href="#2">2</a></p>
<p>Reddit 网站的搜索结果指出，从 reduce 的语义上来说，传入闭包的参数（如果可变的话，即 mutated），会对底层序列的每个元素都产生一份 copy 。在我们的案例中，这意味着 <strong>accumulator</strong> 参数 <code>ac</code> 将为 0…100000 范围内的每个元素都执行一次复制操作。有关对此更好、更详细的解释请看这篇 <a href="http://airspeedvelocity.net/2015/08/03/arrays-linked-lists-and-performance/" target="_blank" rel="external">Airspeedvelocity</a> 博客文章。</p>
<p>因此，当我们试图使用 <code>reduce</code> 来替换掉一组操作时，请时刻保持清醒，问问自己：reduction 在问题中的情形下是否确实是最合适的方式。</p>
<p>现在，可以回到我们的初始问题：计算人口总数和平均年龄。请试着用 <code>reduce</code> 来解决吧。</p>
<h3 id="再一次尝试来写_infoFromState_函数">再一次尝试来写 infoFromState 函数</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">infoFromState</span><span class="params">(state state: String, persons: [[String: AnyObject]])</span></span> </span><br><span class="line">      -&gt; (<span class="built_in">count</span>: <span class="type">Int</span>, age: <span class="type">Float</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在函数内定义别名让函数更加简洁</span></span><br><span class="line">      <span class="keyword">typealias</span> <span class="type">Acc</span> = (<span class="built_in">count</span>: <span class="type">Int</span>, age: <span class="type">Float</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// reduce 结果暂存为临时的变量</span></span><br><span class="line">      <span class="keyword">let</span> u = persons.<span class="built_in">reduce</span>((<span class="built_in">count</span>: <span class="number">0</span>, age: <span class="number">0.0</span>)) &#123;</span><br><span class="line">	  (ac: <span class="type">Acc</span>, p) -&gt; <span class="type">Acc</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">	  <span class="comment">// 获取地区和年龄</span></span><br><span class="line">	  <span class="keyword">guard</span> <span class="keyword">let</span> personState = (p[<span class="string">"city"</span>] <span class="keyword">as</span>? <span class="type">String</span>)?.componentsSeparatedByString(<span class="string">", "</span>).last,</span><br><span class="line">		personAge = p[<span class="string">"age"</span>] <span class="keyword">as</span>? <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 确保选出来的是来自正确的洲</span></span><br><span class="line">	    <span class="keyword">where</span> personState == state</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 如果缺失年龄或者地区，又或者上者比较结果不等，返回</span></span><br><span class="line">	    <span class="keyword">else</span> &#123; <span class="keyword">return</span> ac &#125;</span><br><span class="line"></span><br><span class="line">	  <span class="comment">// 最终累加计算人数和年龄</span></span><br><span class="line">	  <span class="keyword">return</span> (<span class="built_in">count</span>: ac.<span class="built_in">count</span> + <span class="number">1</span>, age: ac.age + <span class="type">Float</span>(personAge))</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我们的结果就是上面的人数和除以人数后的平均年龄</span></span><br><span class="line">  <span class="keyword">return</span> (age: u.age / <span class="type">Float</span>(u.<span class="built_in">count</span>), <span class="built_in">count</span>: u.<span class="built_in">count</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(infoFromState(state: <span class="string">"CA"</span>, persons: persons))</span><br><span class="line"><span class="comment">// prints: (count: 3, age: 34.3333)</span></span><br></pre></td></tr></table></figure>
<p>和早前的范例一样，我们再次使用了 <code>tuple</code> 作为 accumulator 记录状态值。除此之外，代码读起来简明易懂。</p>
<p>同时，我们在函数体中定义了一个别名 <strong>Acc</strong>：<code>typealias Acc = (count: Int, age: Float)</code>，起到了简化类型注释的作用。</p>
<h3 id="总结">总结</h3><p>本文是对 <code>reduce</code> 方法的一个简短概述。倘若你不想将过多函数式方法通过链式结构串联起来调用，<strong>亦或</strong>是数据的输出形式与传入数据的形式不一致时，reduce 就相当有用了。最后，我将向你展示通过使用 reduce 的各种范例来结束本文，希望能为你带来些许灵感。</p>
<h3 id="更多范例">更多范例</h3><p>以下范例展示了 <code>reduce</code> 的其他使用案例。请记住例子只作为展示教学使用，即它们更多地强调 reduce 的使用方式，而非为你的代码库提供通用的解决方法。大多数范例都可以通过其他更好、更快的方式来编写（即通过 extension 或 generics）。并且这些实现方式已经在许多 Swift 库中都有实现，诸如 <a href="https://github.com/oisdk/SwiftSequence" target="_blank" rel="external">SwiftSequence</a> 以及 <a href="https://github.com/ankurp/Dollar.swift" target="_blank" rel="external">Dollar.swift</a></p>
<h3 id="Minimum">Minimum</h3><p>返回列表中的最小项。显然，<code>[1, 5, 2, 9, 4].minElement()</code> 方法更胜一筹。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始值为 Int.max，传入闭包为 min：求两个数的最小值</span></span><br><span class="line"><span class="comment">// min 闭包传入两个参数：1. 初始值 2. 遍历列表时的当前元素</span></span><br><span class="line"><span class="comment">// 倘若当前元素小于初始值，初始值就会替换成当前元素</span></span><br><span class="line"><span class="comment">// 示意写法： initial = min(initial, elem)</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>].<span class="built_in">reduce</span>(<span class="type">Int</span>.<span class="built_in">max</span>, combine: <span class="built_in">min</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Unique">Unique</h3><p>剔除列表中重复的元素。当然，最好的解决方式是使用<code>集合（Set）</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>].<span class="built_in">reduce</span>([], combine: &#123; (a: [<span class="type">Int</span>], b: <span class="type">Int</span>) -&gt; [<span class="type">Int</span>] <span class="keyword">in</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">contains</span>(b) &#123;</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> a + [b]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// prints: 1, 2, 5, 7</span></span><br></pre></td></tr></table></figure>
<h3 id="Group_By">Group By</h3><p>遍历整个列表，通过一个鉴别函数对列表中元素进行分组，将分组后的列表作为结果值返回。问题中的鉴别函数返回值类型需要遵循 <code>Hashable</code> 协议，这样我们才能拥有不同的键值。此外保留元素的排序，而组内元素排序则不一定被保留下来。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">groupby</span><span class="generics">&lt;T, H: Hashable&gt;</span><span class="params">(items: [T], f: <span class="params">(T)</span></span></span> -&gt; <span class="type">H</span>) -&gt; [<span class="type">H</span>: [<span class="type">T</span>]] &#123;</span><br><span class="line">   <span class="keyword">return</span> items.<span class="built_in">reduce</span>([:], combine: &#123; (<span class="keyword">var</span> ac: [<span class="type">H</span>: [<span class="type">T</span>]], o: <span class="type">T</span>) -&gt; [<span class="type">H</span>: [<span class="type">T</span>]] <span class="keyword">in</span> </span><br><span class="line">	   <span class="comment">// o 为遍历序列的当前元素</span></span><br><span class="line">       <span class="keyword">let</span> h = f(o) <span class="comment">// 通过 f 函数得到 o 对应的键值</span></span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">var</span> <span class="built_in">c</span> = ac[h] &#123; <span class="comment">// 说明 o 对应的键值已经存在，只需要更新键值对应的数组元素即可</span></span><br><span class="line">	   <span class="built_in">c</span>.append(o)</span><br><span class="line">	   ac.updateValue(<span class="built_in">c</span>, forKey: h)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// 说明 o 对应的键值不存在，需要为字典新增一个键值，对应值为 [o]</span></span><br><span class="line">	   ac.updateValue([o], forKey: h)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ac</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(groupby([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], f: &#123; $<span class="number">0</span> % <span class="number">3</span> &#125;))</span><br><span class="line"><span class="comment">// prints: [2: [2, 5, 8, 11], 0: [3, 6, 9, 12], 1: [1, 4, 7, 10]]</span></span><br><span class="line"><span class="built_in">print</span>(groupby([<span class="string">"Carl"</span>, <span class="string">"Cozy"</span>, <span class="string">"Bethlehem"</span>, <span class="string">"Belem"</span>, <span class="string">"Brand"</span>, <span class="string">"Zara"</span>], f: &#123; $<span class="number">0</span>.characters.first! &#125;))</span><br><span class="line"><span class="comment">// prints: ["C" : ["Carl" , "Cozy"] , "B" : ["Bethlehem" , "Belem" , "Brand"] , "Z" : ["Zara"]]</span></span><br></pre></td></tr></table></figure>
<h3 id="Interpose">Interpose</h3><p>函数给定一个 <code>items</code> 数组，每隔 <code>count</code> 个元素插入 <code>element</code> 元素，返回结果值。下面的实现确保了 element 仅在中间插入，而不会添加到数组尾部。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">interpose</span><span class="generics">&lt;T&gt;</span><span class="params">(items: [T], element: T, <span class="built_in">count</span>: Int = <span class="number">1</span>)</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">   <span class="comment">// cur 为当前遍历元素的索引值 cnt 为计数器，当值等于 count 时又重新置 1</span></span><br><span class="line">   <span class="keyword">typealias</span> <span class="type">Acc</span> = (ac: [<span class="type">T</span>], cur: <span class="type">Int</span>, cnt: <span class="type">Int</span>)</span><br><span class="line">   <span class="keyword">return</span> items.<span class="built_in">reduce</span>((ac: [], cur: <span class="number">0</span>, cnt: <span class="number">1</span>), combine: &#123; (a: <span class="type">Acc</span>, o: <span class="type">T</span>) -&gt; <span class="type">Acc</span> <span class="keyword">in</span> </span><br><span class="line">       <span class="keyword">switch</span> a &#123;</span><br><span class="line">	  <span class="comment">// 此时遍历的当前元素为序列中的最后一个元素</span></span><br><span class="line">	  <span class="keyword">case</span> <span class="keyword">let</span> (ac, cur, <span class="number">_</span>) <span class="keyword">where</span> (cur+<span class="number">1</span>) == items.<span class="built_in">count</span>: <span class="keyword">return</span> (ac + [o], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	  <span class="comment">// 满足插入条件</span></span><br><span class="line">	  <span class="keyword">case</span> <span class="keyword">let</span> (ac, cur, <span class="built_in">c</span>) <span class="keyword">where</span> <span class="built_in">c</span> == <span class="built_in">count</span>:</span><br><span class="line">	     <span class="keyword">return</span> (ac + [o, element], cur + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">	  <span class="comment">// 执行下一步</span></span><br><span class="line">	  <span class="keyword">case</span> <span class="keyword">let</span> (ac, cur, <span class="built_in">c</span>):</span><br><span class="line">	     <span class="keyword">return</span> (ac + [o], cur + <span class="number">1</span>, <span class="built_in">c</span> + <span class="number">1</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;).ac</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(interpose([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], element: <span class="number">9</span>))</span><br><span class="line"><span class="comment">// : [1, 9, 2, 9, 3, 9, 4, 9, 5]</span></span><br><span class="line"><span class="built_in">print</span>(interpose([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], element: <span class="number">9</span>, <span class="built_in">count</span>: <span class="number">2</span>))</span><br><span class="line"><span class="comment">// : [1, 2, 9, 3, 4, 9, 5]</span></span><br></pre></td></tr></table></figure>
<h3 id="Interdig">Interdig</h3><p>该函数允许你有选择从两个序列中挑选元素合并成为一个新序列返回。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">interdig</span><span class="generics">&lt;T&gt;</span><span class="params">(list1: [T], list2: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">   <span class="comment">// Zip2Sequence 返回 [(list1, list2)] 是一个数组，类型为元组</span></span><br><span class="line">   <span class="comment">// 也就解释了为什么 combinator 闭包的类型是 (ac: [T], o: (T, T)) -&gt; [T]</span></span><br><span class="line">   <span class="keyword">return</span> <span class="type">Zip2Sequence</span>(list1, list2).<span class="built_in">reduce</span>([], combine: &#123; (ac: [<span class="type">T</span>], o: (<span class="type">T</span>, <span class="type">T</span>)) -&gt; [<span class="type">T</span>] <span class="keyword">in</span> </span><br><span class="line">	<span class="keyword">return</span> ac + [o.<span class="number">0</span>, o.<span class="number">1</span>]</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(interdig([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], list2: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="comment">// : [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<h3 id="Chunk">Chunk</h3><p>该函数返回原数组分解成长度为 <code>n</code> 后的多个数组：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">chunk</span><span class="generics">&lt;T&gt;</span><span class="params">(list: [T], length: Int)</span></span> -&gt; [[<span class="type">T</span>]] &#123;</span><br><span class="line">   <span class="keyword">typealias</span> <span class="type">Acc</span> = (stack: [[<span class="type">T</span>]], cur: [<span class="type">T</span>], cnt: <span class="type">Int</span>)</span><br><span class="line">   <span class="keyword">let</span> l = list.<span class="built_in">reduce</span>((stack: [], cur: [], cnt: <span class="number">0</span>), combine: &#123; (ac: <span class="type">Acc</span>, o: <span class="type">T</span>) -&gt; <span class="type">Acc</span> <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> ac.cnt == length &#123;</span><br><span class="line">	  <span class="keyword">return</span> (stack: ac.stack + [ac.cur], cur: [o], cnt: <span class="number">1</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="keyword">return</span> (stack: ac.stack, cur: ac.cur + [o], cnt: ac.cnt + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> l.stack + [l.cur]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], length: <span class="number">2</span>))</span><br><span class="line"><span class="comment">// : [[1, 2], [3, 4], [5, 6], [7]]</span></span><br></pre></td></tr></table></figure>
<p>函数中使用一个更为复杂的 <code>accumulator</code>，包含了 stack、current list 以及 count 。</p>
<p>译者注：有关 Reduce 底层实现，请看<a href="http://www.jianshu.com/p/06c90c0470b2" target="_blank" rel="external">这篇文章</a>。</p>
<p>2015/12/01 改动：</p>
<ol>
<li>修复 <code>rFlatMap</code> 类型签名</li>
<li>为代码范例新增注解</li>
<li>修复了变量属性为 lazy 时执行效率不一致的问题</li>
</ol>
<hr>
<p><a name="1">1、这么做的原因来看<a href="http://airspeedvelocity.net/2015/08/03/arrays-linked-lists-and-performance/" target="_blank" rel="external">这篇博文</a>。<br><a name="2">2、这篇文章的早期版本中，我错误地认为 Swift 的懒惰特性是造成这种差异的罪魁祸首。<a href="https://www.reddit.com/r/swift/comments/3uv1hy/reduce_all_the_things_alternatives_to_mapfilter/" target="_blank" rel="external">感谢 Reddit 的这个讨论指出了我的错误</a>。</a></a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Benedikt Terhechte，<a href="http://appventure.me/2015/11/30/reduce-all-the-things/">原文链接</a>，原文日期：2015-11-30<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>即使早在 Swift 正式发布之前，iOS / Cocoa 开发者都可以使用诸如 ObjectiveSugar 或者 ReactiveCocoa 第三方库，实现类似 <code>map</code>、<code>flatMap</code> 或 <code>filter</code> 等函数式编程的构建。而在 Swift 中，这些家伙（<code>map</code> 等几个函数）已经入驻成为「头等公民」了。比起标准的 <code>for</code> 循环，使用函数式编程有很多优势。它们通常能够更好地表达你的意图，减少代码的行数，以及使用链式结构构建复杂的逻辑，更显清爽。</p>]]>
    
    </summary>
    
      <category term="Benedikt Terhechte" scheme="http://swiftggteam.github.io/tags/Benedikt-Terhechte/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Realm 和 Swift 创建 ToDo 应用]]></title>
    <link href="http://swiftggteam.github.io/2015/12/08/building-a-todo-app-using-realm-and-swift/"/>
    <id>http://swiftggteam.github.io/2015/12/08/building-a-todo-app-using-realm-and-swift/</id>
    <published>2015-12-07T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Hossam Ghareeb，<a href="http://www.appcoda.com/realm-database-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015-10-28<br>译者：<a href="http://www.futantan.com" target="_blank" rel="external">Prayer</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>智能手机的快速发展的同时，涌现出了很多对开发者友好的开发工具。这些工具不仅使得开发变得更加简单和容易，同时也保证了性能和产品质量。如今想要在 App Store 中占据一席之地，并非易事。而且想要使得应用易于扩展就更加困难了。当你成功获得百万量级的用户时，应用中的每一个细节都不能放过，并且需要在很短的时间完成对细节的打磨。所以和数据库打交道，是很多开发者都会面临的一个问题。<a id="more"></a>相信我们每个人都会因为数据库引起的各种问题而头疼不已，对于数据库，我想如今我们只有两种选择：<a href="http://www.appcoda.com/sqlite-database-ios-app-tutorial/" target="_blank" rel="external">SQLite</a> 和 <a href="http://www.appcoda.com/introduction-to-core-data/" target="_blank" rel="external">Core Data</a>。我是 Core Data 的忠实粉丝，它对记录（records）的处理和持久化数据的能力非常强大，但是我意识到，在开发应用的过程中，我在 Core Data 上浪费了太多的时间。最近，我无意中发现了 Realm，一个可以替代 SQLite 和 Core Data 的更好的解决方案。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-db-1024x683.jpg" alt=""></p>
<!--more-->
<h2 id="Realm_是什么？">Realm 是什么？</h2><p>Realm 是一个跨平台的移动终端数据库，支持 iOS（Swift 和 Objective-C 语言都支持）和 Android。Realm 的目的就是提供比 SQLite 和 Core Data 更好更快的数据库支持。它不仅仅是更好和更快，而且更加易于使用，短短几行代码就可以完成很多操作。Realm 完全免费，你可以随意使用它。Realm 是为移动设备而生的，因为在过去的十年中，移动终端的数据库技术没有任何的革新。现在如果和移动终端的数据库打交道，你只有一种选择，使用 SQLite 或者是底层封装了 SQLite 的技术比如 Core Data。Realm 的目的是更加易用，它并不是一个建立在 SQLite 之上的 ORM，而是一个基于自己的持久化引擎，简单并且快速的面向对象移动数据库。</p>
<h2 id="为什么选择_Realm？">为什么选择 Realm？</h2><p><a href="https://realm.io/cn/" target="_blank" rel="external">Realm</a>拥有令人难以置信的速度并且使用起来非常简单，你会发现，无论是想完成数据库的读还是写操作，都只需要短短的几行代码。下面我会列出它的所有优势，并说明为什么 Realm 是你在移动应用上数据库的不二选择：</p>
<ul>
<li><p><strong>安装简单</strong>：在下一个章节 — 如何使用 Realm 中你会了解到，安装 Realm 会比你想象的更为简单。使用简单的 Cocoapods 命令，你就可以完成所有的安装工作。</p>
</li>
<li><p><strong>速度更快</strong>：使用 Realm 库操作数据库的速度非常快。它比 SQLite 和 CoreData 都更加快速，<a href="https://realm.io/news/introducing-realm/#fast" target="_blank" rel="external">这里</a>有它们之间的比较指标作为证据。</p>
</li>
<li><p><strong>跨平台</strong>：Realm 的数据库文件是跨平台的，可以在 iOS 和 Android 间共享。无论你是使用 Java、Objective-C 或者 Swift，都可以使用相同的抽象模型访问。</p>
</li>
<li><p><strong>易于扩展</strong>：如果你的移动应用需要处理大量的用户数据记录，数据库的可扩展性就显得十分重要。在开始着手开发应用之前，这一点就应该被考虑在内。Realm 提供很好的可扩展性，在操作大量的数据时，速度也非常之快。选择使用 Realm 可以为你的应用带来更快的速度和更加流畅的用户体验。</p>
</li>
<li><p><strong>规范的文档和很好的支持</strong>：Realm 提供了丰富的大量条理清晰、易于阅读的文档。如果你有任何的问题，你也可以通过 Twitter、Github 或 Stackoverflow 来获得帮助。</p>
</li>
<li><p><strong>可信任</strong>：Realm 已经被大量的初创公司和大公司用于它们的移动应用中，像 Pinterest、Dubsmash 和 Hipmunk。</p>
</li>
<li><p><strong>免费</strong>：除了以上这些极好的优点以外，它还是完！全！免！费！的！</p>
</li>
</ul>
<h2 id="让我们开始动手吧">让我们开始动手吧</h2><p>让我们开始学习 Realm，使用它来构建一个简单的使用 Swift 语言的 iPhone 应用。所完成的 demo 程序是一个简单的 Todo 应用。用户可以增加任务清单，每个任务清单都能够包含多个任务。任务拥有名称、备注、到期日期，可以添加图片，并且拥有一个布尔值来表示该任务是否已经完成。在开始创建 Xcode 项目之前，我们需要先配置好 Xcode，安装使用 Realm 所需的工具。</p>
<h2 id="环境要求">环境要求</h2><p>请注意需要满足下列要求</p>
<ul>
<li>iOS 8 及更高的版本，OS X 10.9 及更高的版本</li>
<li>Xcode 6.3 及更高版本</li>
<li>Realm 有两个发行版，一个针对 Swift 2.0，另一个针对 Swift 1.2。我们推荐您使用 Swift 2.0 的版本。当然你也可以使用针对 Swift 1.2 的版本，但是以后这个版本 Realm 不会再进行更新支持，所以为了保险起见，使用 Swift 2.0 对应的版本，是个更好的选择。</li>
</ul>
<h2 id="配置_Xcode_和所需的工具">配置 Xcode 和所需的工具</h2><p>在开始配置 Xcode 项目之前，请确保运行环境已经正确安装了 CocoaPods，我们将使用它来为项目安装 Realm。如果对 <a href="https://cocoapods.org/" target="_blank" rel="external">CocoaPods</a> 不熟悉，你可以查看在线的教程，这些教程的材料足够让你明白如何开始使用它。</p>
<p>现在，使用 <code>Single View Application</code> 项目模板创建一个 Xcode 工程，命名为 <code>RealmTasks</code> 或者其他你喜欢的名字。请确保选择 Swift 作为开发语言。之后在终端中进入到该工程目录，使用如下命令来初始化 CocoaPods：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure>
<p>然后使用 Xcode 打开生成的 Podfile 文件，在 target 之后，添加 <code>pod &#39;RealmSwift&#39;</code>，修改完之后，应该是下面这个样子：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-podfile-1024x430.png" alt=""></p>
<p>下面运行 <code>pod install</code> 命令来把 Realm 下载安装到项目中。完成之后，你会在你的工程文件目录发现一个新生成的 Xcode 工作空间。请确保打开 <strong>RealmTasks.xcworkspace</strong> 而不是 xcodeproj。打开工作空间后，你会看到像下面这样的情形：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-pod-folder-1024x446.png" alt=""></p>
<p>现在就可以在 Xcode 中使用 Realm 啦，但是我们将安装下面的小工具来让使用 Realm 的过程更加容易。</p>
<h2 id="在_Xcode_中安装_Realm_插件">在 Xcode 中安装 Realm 插件</h2><p>Realm 开发团队提供了一个生成 Realm 模型非常有用的插件。为了安装这个插件，我们要使用 <a href="http://alcatraz.io/" target="_blank" rel="external">Alcatraz</a>。如果你不知道 Alcatraz 是什么的话，这里解释一下，它是一个简单有用的开源包管理工具，它可以让你无需任何配置，自动地为 Xcode 安装插件、文件模板和颜色主题。为了安装 Alcatraz，你只需将以下代码复制到终端中执行，之后重启 Xcode：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/master/Scripts/install.sh | sh</span><br></pre></td></tr></table></figure>
<p>然后在 Xcode 中，选择 <code>Window</code> -&gt; <code>Package Manager</code>，如下图：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-package-manager-1024x334.png" alt=""></p>
<p>然后在弹出的窗口中，你可以选择安装你喜欢的插件或者文件模板，在搜索框中你可以搜索你喜欢的插件、配色。在搜索框输入「Realm」，在出现的结果中选择「RealmPlugin」，点击 <code>Install</code> 按钮</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-plugin-1024x996.png" alt=""></p>
<h2 id="Realm_浏览器">Realm 浏览器</h2><p>给大家介绍的最后一个工具是 Realm 浏览器。这个浏览器可以帮助你阅读和编辑你的 <code>.realm</code> 数据库文件。这些文件在应用程序中被创建，在数据库表中保存了所有的数据实体（entities）、属性（attributes）和记录（records）。之前我们说过，这些数据库文件可以在像 iOS 和 Android 这样不同的平台间共享。想要下载最新版本的 Realm 浏览器，请访问 <a href="https://itunes.apple.com/app/realm-browser/id1007457278" target="_blank" rel="external">iTunes store</a>。打开 Realm 浏览器，选择 <code>Tools</code> -&gt; <code>Generate demo database</code>。它会帮你生成 realm 数据库测试文件，你可以使用该浏览器打开和编辑它的内容。当你打开的时候，你会看到像下面的内容：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/browser.png" alt=""></p>
<p>正如你所见，在 RealmTestClass1 中，它拥有 1000 条记录，显示了多种不同的参数类型（即「列」）。我们会在下节介绍支持的属性类型。</p>
<p>现在，Realm 的所有准备工作都已就绪，那我们开始动手吧！</p>
<h2 id="数据模型类">数据模型类</h2><p>好戏才刚刚开始。首先我们来创建模型类或者说我们的数据库。为了创建 Realm 数据模型类，你只需要简单地新建一个普通的 Swift 类继承自 Object 就可以了。因为 Realm 数据模型类的基类是 Object，所以 Object 的子类都可以扩展为 Realm 的模型类。一旦创建类后，就可以添加属性了。Realm 支持以下多种数据类型：</p>
<p>– Int，Int8，Int16，Int32 和 Int64<br>– Boolean<br>– Float<br>– String<br>– NSDate<br>– NSData<br>– 继承自 Object 的类 =&gt; 作为一对一关系（Used for One-to-one relations）<br>– List<object> =&gt; 作为一对多关系（Used for one-to-many relations）</object></p>
<p>Realm 中的 List 可以包含多个 Object 实例，参考上面 demo 数据库的截图，最后一列表示在其他数据表中的存在的一组引用。在和 Realm 模型类打交道的时候，使用的方式和其他 Swift 类一样。例如，你可以添加方法或者遵循指定的协议。</p>
<p>多说无益，来看代码 😂</p>
<p>现在让我们使用之前在 Xcode 中安装的 Realm 插件来新建一个 Realm 类。打开 Xcode，新建文件，在右边的侧边栏选择 Realm：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm_model.png" alt=""></p>
<p>然后选择 Swift 语言，类名我们输入 Task。会得到如下结果：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Task_swift.png" alt=""></p>
<p>现在，可以向 Task 数据模型中添加属性了。</p>
<h2 id="属性">属性</h2><p>我们需要在数据模型中添加需要的属性。该例子中，Task 需要有 name（String），createdAt（NSDate)），notes（String），和 isCompleted（Bool）这些属性。添加这些之后，代码应该像下面这样子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> createdAt = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> notes = <span class="string">""</span></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> isCompleted = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明让 Realm 忽略的属性（Realm 将不持有这些属性）</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//  override static func ignoredProperties() -&gt; [String] &#123;</span></span><br><span class="line"><span class="comment">//    return []</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们已经为 Task 模型类添加了属性，所有的属性前面都加了 <code>dynamic var</code> 前缀，这使得属性可以被数据库读写。</p>
<p>接下来，我们要创建 TaskList 模型类，用来存储 Task 实例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskList</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> createdAt = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">let</span> tasks = <span class="type">List</span>&lt;<span class="type">Task</span>&gt;()</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 声明让 Realm 忽略的属性（Realm 将不持有这些属性）</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//  override static func ignoredProperties() -&gt; [String] &#123;</span></span><br><span class="line"><span class="comment">//    return []</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TaskList 模型类拥有 name，createAt 和一个包含 Task 的 List 属性。需要注意的是：</p>
<ol>
<li>List<object> 用来表示一对多的关系：一个 TaskList 中拥有多个 Task。</object></li>
<li>List 和 Array 在使用上非常相似，所用的方法和访问数据的方式（索引和下标）都相同。正如你所见的一样，List 后标明了数据类型，所包含的所有对象都应该是相同类型的。</li>
<li>List<t> 是泛型，这也是为什么我们没有在声明前面加上 dynamic 的原因，因为在 Objective-C 运行时无法表示泛型属性。</t></li>
</ol>
<p>就像在之前实现中你看到的一对多关系那样，在 Realm 中创建数据关系非常简单。在使用一对一的关系时，我们不使用 List<t> 而是使用 Object 类型，来看下面的例子：</t></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Object</span></span>&#123;</span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="title">Object</span></span>&#123;</span><br><span class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> owner:<span class="type">Person</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子中，owner 属性表示 Car 和 Person 之间的一对一数据关系。</p>
<p>现在基本的数据模型都已经创建好了。接下来我们会通过创建一个 ToDo 应用的过程，来讨论 Realm。首先，<a href="https://github.com/hossamghareeb/realmtasks" target="_blank" rel="external">从这里下载 app</a> 并且一窥究竟。在 Xcode 7 或更高的版本中运行，就像下面这样：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-todo-list-app-1024x661.png" alt=""></p>
<p>在项目中，我添加了两个视图控制器：TasksViewController 和 TaskListViewController。第一个视图控制器用来显示单个 task，第二个视图控制器用来显示所有的 TaskList。在 list 视图中，点击 + 按钮来添加一个任务清单。选择一个任务清单将会详情视图。你可以在这里添加多个 task。</p>
<p>了解了 demo 的大体思路之后，现在让我们来看看如何向 Realm 数据库中添加一个新的任务清单。为了实现这个功能，需要如下处理：</p>
<ol>
<li>创建 TaskList 实例对象，并将其保存到 Realm 数据库中。</li>
<li>向数据库中查询 list 数据，并更新 UI。</li>
</ol>
<p>为了在 Realm 中保存数据，你只需要实例化继承自 Object 的数据模型类，然后将对象写入到 Realm 中，下面是示例代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> taskListA = <span class="type">TaskList</span>()</span><br><span class="line">taskListA.name = <span class="string">"Wishlist"</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> wish1 = <span class="type">Task</span>()</span><br><span class="line">wish1.name = <span class="string">"iPhone6s"</span></span><br><span class="line">wish1.notes = <span class="string">"64 GB, Gold"</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> wish2 = <span class="type">Task</span>(value: [<span class="string">"name"</span>: <span class="string">"Game Console"</span>, <span class="string">"notes"</span>: <span class="string">"Playstation 4, 1 TB"</span>])</span><br><span class="line"><span class="keyword">let</span> wish3 = <span class="type">Task</span>(value: [<span class="string">"Car"</span>, <span class="type">NSDate</span>(), <span class="string">"Auto R8"</span>, <span class="literal">false</span>])</span><br><span class="line"> </span><br><span class="line">taskListA.tasks.appendContentsOf([wish1, wish2, wish3])</span><br></pre></td></tr></table></figure>
<p>通过实例化 TaskList 类，我们创建了一个任务清单，之后设置了它的属性。随后我们创建了 3 个 Task 类型的对象（即 wish1，wish2 和 wish3）。这里我们演示了创建 Realm 对象的三种途径：</p>
<ol>
<li>wish1 的实例化方式：简单的实例化 Realm 类，然后设置属性。</li>
<li>wish2 的实例化方式：传入一个字典，字典中的 key 为属性名，值为要设置的值。</li>
<li>wish3 的实例化方式：使用数组传入的方式。数组中值的顺序需要和模型类中的声明顺序一致。</li>
</ol>
<h3 id="嵌套对象">嵌套对象</h3><p>在 Realm 中还可以是使用嵌套的方式来创建对象。在一对一关系和一对多关系的时候，你可以使用这种方式，这时候，一个类型对象的初始化需要一个 Object 或多个另一个类型的对象 List<object>。面临这种情况的时候，你可以选择上面的第二或者第三种方法，使用一个字典或者一个数组来表示一个对象。下面是嵌套对象的一个例子：</object></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> taskListB = <span class="type">TaskList</span>(value: [<span class="string">"MoviesList"</span>, <span class="type">NSDate</span>(), [[<span class="string">"The Martian"</span>, <span class="type">NSDate</span>(), <span class="string">""</span>, <span class="literal">false</span>], [<span class="string">"The Maze Runner"</span>, <span class="type">NSDate</span>(), <span class="string">""</span>, <span class="literal">true</span>]]])</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们创建了一个电影清单，并设置了清单名称、创建时间和清单内容，清单内容包括多个 task。每个 task 使用数组的方式来创建，例如 <code>[&quot;The Maze Runner&quot;, NSDate(), &quot;&quot;, true]</code> 表示一个 task，内容分别对应了名称、创建时间、备注和是否已经完成。</p>
<h2 id="使用_Realm_持久化对象">使用 Realm 持久化对象</h2><p>现在你应该知道了如何在 Realm 中创建和使用对象，但是为了能够在应用程序重新启动的时候使用这些数据，需要使用写事务将它们持久化到 Realm 的数据库中。当使用 Realm 来持久化数据的时候，只要这些对象已经存储成功，你可以在任何线程中获取这些对象。一个 Realm 实例表示一个 Realm 数据库。可以像下面一样实例化它：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uiRealm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br></pre></td></tr></table></figure>
<p>我们常常将上面这行代码写在 <code>AppDelegate.swift</code> 文件的顶端（译者注：类之外，全局变量），这样就可以在整个项目中获得该对象的引用。之后便可以很方便地调用它的读和写方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">uiRealm.write &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">  uiRealm.add([taskListA, taskListB])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，uiRealm 对象已经在 AppDelegate 中创建，在整个 app 中都可以使用。Realm 对象在每个线程中都应该只被创建一次，因为它不是线程安全的，不能在不同的线程中共享。如果你想要在另一个线程中执行写操作，那么就需要创建一个新的 Realm 对象。我将这个实例命名为 <code>uiRealm</code>，就是因为它应该只在 UI 线程中被使用。</p>
<p>现在让我们回到我们的 app 中，我们需要在用户点击 Create 按钮的时候保存任务列表。在 <code>TasksViewController</code> 的 <code>displayAlertToAddTask</code>方法中，我们有一个 <code>createAction</code> 对象：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> createAction = <span class="type">UIAlertAction</span>(title: doneTitle, style: <span class="type">UIAlertActionStyle</span>.<span class="type">Default</span>) &#123; (action) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> taskName = alertController.textFields?.first?.text</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> updatedTask != <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="comment">// update mode</span></span><br><span class="line">        uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">            updatedTask.name = taskName!</span><br><span class="line">            <span class="keyword">self</span>.readTasksAndUpateUI()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> newTask = <span class="type">Task</span>()</span><br><span class="line">        newTask.name = taskName!</span><br><span class="line">        </span><br><span class="line">        uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>.selectedList.tasks.append(newTask)</span><br><span class="line">            <span class="keyword">self</span>.readTasksAndUpateUI()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们从 TextField 中获取到任务名称，调用 Realm 的写方法来保存任务列表。</p>
<p><em>请注意，当你同时进行多个写操作的时候，他们会相互阻塞，阻塞住他们所运行的线程。所以应当考虑在 UI 之外的线程中来进行操作。另外需要注意的是，在进行写事务的时候，读操作并不会造成阻塞。这非常有用，尤其是当你在后台进行写操作的时候，用户可能会在不同界面切换，而这时候可以进行读操作。</em></p>
<h2 id="检索数据">检索数据</h2><p>现在你已经学会了如何在 Realm 中写数据，下面我们来看看如何检索数据。在 Realm 中检索数据的方式非常直观。Realm 提供了很多选项来过滤出你想要的数据。在 Realm 中进行查找操作的时候，它将会返回一个 Results 对象。可以把 Results 简单地当做是 Swift 的数组，因为它们的接口非常类似。</p>
<p>当得到 Results 实例的时候，这代表你已经从磁盘中直接获取到了数据。对这些数据的任何操作（使用事务）将会影响到磁盘上的数据。在 Realm 中来检索数据，只需要调用对象的方法，并将类名作为参数传进去。让我们看看如何使用这种方式来读取 TaskLists 并更新 UI：</p>
<p>我们在 <code>TasksListsViewController</code> 中定义了该属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lists : <span class="type">Results</span>&lt;<span class="type">TaskList</span>&gt;!</span><br></pre></td></tr></table></figure>
<p>然后实现了 <code>readTasksAndUpdateUI</code> 方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">readTasksAndUpdateUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    lists = uiRealm.objects(<span class="type">TaskList</span>)</span><br><span class="line">    <span class="keyword">self</span>.taskListsTableView.setEditing(<span class="literal">false</span>, animated: <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">self</span>.taskListsTableView.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>tableView(_:cellForRowAtIndexPath:_)</code> 方法中，我们将显示列表的名称，还有每个列表内的任务个数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"listCell"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> list = lists[indexPath.row]</span><br><span class="line">    </span><br><span class="line">    cell?.textLabel?.text = list.name</span><br><span class="line">    cell?.detailTextLabel?.text = <span class="string">"<span class="subst">\(list.tasks.<span class="built_in">count</span>)</span> Tasks"</span></span><br><span class="line">    <span class="keyword">return</span> cell!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码逻辑非常直观吧。最后需要做的就是在 <code>viewWillAppear</code> 中调用 <code>readTasksAndUpdateUI</code> 方法，来确保总是显示数据更新之后的视图。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</span><br><span class="line">    readTasksAndUpdateUI()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面展示了如何使用 Realm 来进行任务列表的读写操作。接下来，我们来看看如何进行数据更新和删除操作。在开始之前，先来看看项目模板中的修改和删除部分的相关代码。</p>
<p>首先在 <code>TaskListsViewController</code> 中，我们用一个布尔值 <code>isEditingMode</code> 来表示是在正常状态还是编辑状态：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isEditingMode = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>当 Edit 按钮被点击的时候，将会调用 <code>didClickOnEditButton</code> 方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">didClickOnEditButton</span><span class="params">(sender: UIBarButtonItem)</span></span> &#123;</span><br><span class="line">    isEditingMode = !isEditingMode</span><br><span class="line">    <span class="keyword">self</span>.taskListsTableView.setEditing(isEditingMode, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法会使用 table view 的 <code>setEditing</code> 方法来启用或禁用 UITableView 的编辑模式。在表格视图中，默认的编辑操作是删除，但是从 iOS 8.0 开始，增加了一个 <code>editActionsForRowAtIndexPath</code> 方法来自定义一些操作，这些操作在在用户滑动表格 cell 的时候出现。</p>
<p>我们将使用该方法来添加两个功能 — 删除和编辑，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, editActionsForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; [<span class="type">UITableViewRowAction</span>]? &#123;</span><br><span class="line">    <span class="keyword">let</span> deleteAction = <span class="type">UITableViewRowAction</span>(style: <span class="type">UITableViewRowActionStyle</span>.<span class="type">Destructive</span>, title: <span class="string">"Delete"</span>) &#123; (deleteAction, indexPath) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里开始是删除</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> listToBeDeleted = <span class="keyword">self</span>.lists[indexPath.row]</span><br><span class="line">        uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">            uiRealm.delete(listToBeDeleted)</span><br><span class="line">            <span class="keyword">self</span>.readTasksAndUpdateUI()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> editAction = <span class="type">UITableViewRowAction</span>(style: <span class="type">UITableViewRowActionStyle</span>.<span class="type">Normal</span>, title: <span class="string">"Edit"</span>) &#123; (editAction, indexPath) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里开始是编辑</span></span><br><span class="line">        <span class="keyword">let</span> listToBeUpdated = <span class="keyword">self</span>.lists[indexPath.row]</span><br><span class="line">        <span class="keyword">self</span>.displayAlertToAddTaskList(listToBeUpdated)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [deleteAction, editAction]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们使用 <code>UITableViewRowAction</code> 添加了两个操作，方法中定义了操作的 <code>style</code>，<code>title</code> 和 <code>handler</code>。当在滑动 cell 或者以其他方式进入编辑模式的时候，会像下面这样：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/edit-mode-576x1024.png" alt=""></p>
<p>以上就是在进行删除和更新操作时候的 UI 代码逻辑。</p>
<h2 id="删除对象">删除对象</h2><p>想要从 Realm 数据库中删除对象或者数据，你只需要调用 Realm 对象的 <code>delete</code> 方法，同时将该对象作为参数传入。当然，这些操作会在写事务中完成。来看一下下面的代码的工作方式，我们从 Realm 数据库中删除了一个任务列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> listToBeDeleted = <span class="keyword">self</span>.lists[indexPath.row]</span><br><span class="line">uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">           uiRealm.delete(listToBeDeleted)</span><br><span class="line">           <span class="keyword">self</span>.readTasksAndUpdateUI()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>在删除之后，我们调用了 <code>readTasksAndUpdateUI</code> 方法来读取数据并更新 UI。</p>
<p>除了删除单个数据，在 Realm 中，还有一个方法叫做 <code>deleteAll</code>，它允许你删除数据库中所有 class 的所有数据。如果你想为当前用户持久化数据，但是在他退出登录的时候抹掉所有的相关数据，这个方法将会十分有用。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    uiRealm.deleteAll()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="更新_Objects">更新 Objects</h2><p>在 Realm 中有多种方式可以来更新 object，但是这些方法都应该在写事务中完成。下面我们来看一些更新对象的方式。</p>
<h3 id="使用属性（Property）">使用属性（Property）</h3><p>你可以通过直接在 Realm 的写闭包中设置属性的值来更新数据。例如，在 <code>TasksViewController</code> 中，我们可以简单地设置属性值来更新任务的状态信息：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    task.isCompleted = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="使用主键（Primary_Key）">使用主键（Primary Key）</h3><p>Realm 支持将某个 string 或 int 类型的属性设置为主键。当使用 <code>add()</code> 方法来创建 Realm 对象时，如果有相同主键的对象存在，就会更新这个对象的值。下面是示例代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="type">User</span>()</span><br><span class="line">user.firstName = <span class="string">"John"</span></span><br><span class="line">user.lastName = <span class="string">"Smith"</span></span><br><span class="line">user.email = <span class="string">"example@example.com"</span></span><br><span class="line">user.id = <span class="number">1</span></span><br><span class="line"><span class="comment">// 更新 id 是 1 的用户</span></span><br><span class="line">realm.write &#123;</span><br><span class="line">            realm.add(user, update: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>这里的 id 属性为主键。如果 id 为 1 的用户存在，Realm 会更新相应的对象。如果不存在，Realm 将会把该对象存入数据库中。</p>
<h3 id="使用_KVC（Key-Value_Coding）">使用 KVC（Key-Value Coding）</h3><p>如果你是 iOS 开发的老手，那么对 Key-Value Coding 肯定不会陌生。Realm 的类型，像是 Object、Results 和 List，都可以使用 Key-Value Coding。该特性可以帮助你在运行时设置或更新属性值。另外一个在 List 和 Results 中支持 KVC 的好处是，可以在无需遍历每个对象的情况下，批量更新对象数据。这么说你可能不是很理解，我们来看个例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tasks = uiRealm.objects(<span class="type">Task</span>)</span><br><span class="line">uiRealm.write &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    tasks.setValue(<span class="literal">true</span>, forKeyPath: <span class="string">"isCompleted"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，使用查询语句来请求所有的 Task 对象，之后将所有得到的对象的 <code>isCompleted</code> 属性设置为 true。可以看出，将 Realm 中的所有 tasks 标记为已完成，仅仅只用了一行代码。</p>
<p>让我们回过头来看看我们的 ToDo 应用。如果仔细观察 <code>displayAlertToAddTaskList</code> 方法，你会看到如下代码片段：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 更新状态</span></span><br><span class="line">uiRealm.write(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">          updatedList.name = listName!</span><br><span class="line">          <span class="keyword">self</span>.readTasksAndUpdateUI()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当用户遍历列表名称的时候，上面的代码会被调用。通过设置 name 属性的方式，就更新了数据库中的内容。</p>
<h2 id="显示任务项">显示任务项</h2><p>我们已经一起看过了 <code>TaskListViewController</code> 的绝大部分代码。现在让我们打开 <code>TasksViewController</code> 来看看，这个视图控制器用来显示任务清单中的任务项。视图控制器拥有一个 UITableView, 该视图有两个 section：完成的任务和未完成的任务。在 <code>TasksViewController</code> 中，有如下属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> selectedList : <span class="type">TaskList</span>!</span><br><span class="line"><span class="keyword">var</span> openTasks : <span class="type">Results</span>&lt;<span class="type">Task</span>&gt;!</span><br><span class="line"><span class="keyword">var</span> completedTasks : <span class="type">Results</span>&lt;<span class="type">Task</span>&gt;!</span><br></pre></td></tr></table></figure>
<p><code>selectedList</code> 用来存储 <code>TaskListsViewController</code> 传递过来的选中的任务列表。为了将完成和未完成的任务分开，声明了两个属性，<code>openTasks</code> 和 <code>completedTasks</code>。为了过滤出不同的任务完成状态，我们将使用 Realm 的方法 <code>filter()</code>。在解释该函数如何工作之前，让我们先来看看如何在代码中使用它：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">readTasksAndUpateUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    completedTasks = <span class="keyword">self</span>.selectedList.tasks.<span class="built_in">filter</span>(<span class="string">"isCompleted = true"</span>)</span><br><span class="line">    openTasks = <span class="keyword">self</span>.selectedList.tasks.<span class="built_in">filter</span>(<span class="string">"isCompleted = false"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.tasksTableView.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的方法中，我们使用 <code>filter</code> 方法来过滤 <code>results</code>。Realm 提供了 <code>filter()</code> 方法来过滤数据。该方法可以被 List、Result 和 Object 对象调用。方法会返回过满足滤条件参数的特定对象。你可以把 <code>filter</code> 当做 <code>NSPredicate</code>。基本上来说，你可以认为这两者差不多。就像上面的代码一样，你同样可以使用 string 作为参数创建一个 <code>NSPredicate</code> 对象，并把它作为参数传给 <code>filter</code> 方法。</p>
<p>让我们来看另外一个例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用断言字符串</span></span><br><span class="line"><span class="keyword">var</span> redCars = realm.objects(<span class="type">Car</span>).<span class="built_in">filter</span>(<span class="string">"color = 'red' AND name BEGINSWITH 'BMW'"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用 NSPredicate</span></span><br><span class="line"><span class="keyword">let</span> aPredicate = <span class="type">NSPredicate</span>(format: <span class="string">"color = %@ AND name BEGINSWITH %@"</span>, <span class="string">"red"</span>, <span class="string">"BMW"</span>)</span><br><span class="line">redCars = realm.objects(<span class="type">Car</span>).<span class="built_in">filter</span>(aPredicate)</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用 <code>filter</code> 方法来过滤 <code>color</code> 为 red，并且 <code>name</code> 以 “BMW” 开头的对象。第一行代码使用 string 作为参数来进行过滤。另外，你也可以使用 NSPredicate 获得同样的效果。下面的表格总结了 filter 方法的大部分常用操作：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/realm-database-info-1024x675.png" alt=""></p>
<h2 id="排序">排序</h2><p>既然我们谈到了 Realm 数据库的基本操作，在本教程结束之前，我还想给大家介绍另外一个特性。排序功能，这是 Realm 提供了另一个特别有用的特性。对于 List 和 Result 对象，你可以调用方法 <code>sorted（「排序标准」）</code> 来将一组数据进行排序。让我们来看看如何在任务列表中使用该方法让任务列表以字母表或者创建时间先后顺序排序。首先，在 UI 中，我们增加了一个 segment control，将会根据选择的情况来进行对应的排序。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Simulator-Screen-Shot-Oct-24-2015-8.47.06-PM-576x1024.png" alt=""></p>
<p>根据不同的选择来进行排序，代码逻辑如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">didSelectSortCriteria</span><span class="params">(sender: UISegmentedControl)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sender.selectedSegmentIndex == <span class="number">0</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 按 A-Z 排序</span></span><br><span class="line">            <span class="keyword">self</span>.lists = <span class="keyword">self</span>.lists.sorted(<span class="string">"name"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 按日期排序</span></span><br><span class="line">            <span class="keyword">self</span>.lists = <span class="keyword">self</span>.lists.sorted(<span class="string">"createdAt"</span>, ascending:<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.taskListsTableView.reloadData()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>Realm 是一个非常简单易用，直观的本地数据库解决方案。Realm 提供了很好的可扩展性，只用很少的几行代码就可完成操作。对于大部分的应用甚至是游戏来说，我觉得如果需要使用数据库的话，Realm 值得尝试。</p>
<h2 id="下一步？">下一步？</h2><p>学习了本教程，你应该可以在项目中使用 Realm 来进行增删改查等基本的操作。Realm 还具有一些高阶特性，值得深入学习。最好的学习资料就是 Realm 网站的官方文档，Realm 的小伙伴把文档写得非常赞！</p>
<p>如果想要教程 ToDo 应用的的完整代码，你可以在<a href="https://github.com/hossamghareeb/realmtasks" target="_blank" rel="external">这里下载</a>。</p>
<p>如果对代码有任何的问题，都欢迎留言反馈，我们会很乐意帮助到您。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Hossam Ghareeb，<a href="http://www.appcoda.com/realm-database-swift/">原文链接</a>，原文日期：2015-10-28<br>译者：<a href="http://www.futantan.com">Prayer</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>智能手机的快速发展的同时，涌现出了很多对开发者友好的开发工具。这些工具不仅使得开发变得更加简单和容易，同时也保证了性能和产品质量。如今想要在 App Store 中占据一席之地，并非易事。而且想要使得应用易于扩展就更加困难了。当你成功获得百万量级的用户时，应用中的每一个细节都不能放过，并且需要在很短的时间完成对细节的打磨。所以和数据库打交道，是很多开发者都会面临的一个问题。]]>
    
    </summary>
    
      <category term="AppCoda" scheme="http://swiftggteam.github.io/tags/AppCoda/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS：选择 Realm 而不是 CoreData]]></title>
    <link href="http://swiftggteam.github.io/2015/12/08/ios-realm-instead-of-coredata/"/>
    <id>http://swiftggteam.github.io/2015/12/08/ios-realm-instead-of-coredata/</id>
    <published>2015-12-07T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/ios-realm-instead-of-coredata/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-29<br>译者：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<blockquote>
<p>我已在网上多次看到「Realm」这个词。我甚至曾在十月时有机会参加由 Swift 用户组组织的 Realm 聚会。最终，我有机会用上了 Realm 这个框架。</p>
</blockquote>
<a id="more"></a>
<h2 id="案例">案例</h2><p>现在我正在节食。我需要减一些体重因为在加利福尼亚的时候胖了好多 – 好吃的食物实在是太多了:)！我浏览了一下 iTunes Store 中的那些能够追踪喝水记录的应用，但是在我看来这些应用要么看上去很糟糕，要么交互实在是很烂。我想：如果我决定做一个应用，岂不是一箭双雕吗 – 我又能写一个我想要的应用，又能选择使用 Realm 而不是 Core Data。所以我开工了。</p>
<p>你知道当我看完文档、开始使用 Realm 框架的第一感觉是什么吗？<strong>哇，这简直真是太棒了！这些开发的家伙做的简直超棒！</strong></p>
<p><strong>免责声明：</strong>接下来所写的仅仅只覆盖了 Realm 框架中最基本的一部分。我建议你们接下来可以去阅读<a href="https://realm.io/docs/swift/latest/" target="_blank" rel="external">官方文档</a>来获取更多的信息。在这儿我并不想向你们展示关于 Realm 框架的全部内容，因为这篇文章不可能像文档一样又臭又长，并且我自己也会避免这样的问题发生。官方的文档非常的棒，你在开工前可以先读一下它。</p>
<p>我的这个案例并不是很复杂而是非常简单的。整个 app 只有两个抽象模型（Model）类： <code>Day</code> 和 <code>DrinkLogEntry</code> 。此外，这个 app 也需要这些功能：添加、更新、筛选和排序存储的数据。正如我所说这是个简单的 app 。接下来我会呈现 app 中的一些代码片段。</p>
<h2 id="抽象模型（Model）">抽象模型（Model）</h2><p>Realm 中没有像 xcdatamodel-like 这样的文件。抽象模型仅仅是继承自 <code>Object</code> 类的文件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 表示了用户一天的生活。 Day 这个类的信息包含用户所喝的水和他们的每天喝水的目标。</span><br><span class="line">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Day</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> identifier: <span class="type">String</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 表示一天的开始的时间戳（UTC+0 时区）</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> timestamp: <span class="type">NSTimeInterval</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 用户所喝的水的量（毫升）</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> waterDrank: <span class="type">Float</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 用户每天喝水的目标（毫升）</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> dailyGoal: <span class="type">Float</span> = <span class="number">0</span> <span class="comment">// ml</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> drinkLogs = <span class="type">List</span>&lt;<span class="type">DrinkLogEntry</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(timestamp: <span class="type">NSTimeInterval</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.timestamp = timestamp</span><br><span class="line">        <span class="keyword">self</span>.identifier = <span class="type">Day</span>.convertTimestampIntoIdentifier(timestamp)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">primaryKey</span>() -&gt; <span class="title">String</span>? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"identifier"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">indexedProperties</span>() -&gt; [<span class="title">String</span>] </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"identifier"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">convertTimestampIntoIdentifier</span>(<span class="title">timestamp</span>: <span class="title">NSTimeInterval</span>) -&gt; <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(format: <span class="string">"%.0f"</span>, arguments: [timestamp])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有前有 <code>dynamic</code> 关键字的属性都会被转化成数据抽象层的一部分。Realm 也支持关系型数据。在这个例子中 Day 这个类中存在 drinkLogs 的一对多关系。一对一的关系就仅是类中的特定属性了。</p>
<p>Realm 也支持从 Core Data 中迁移数据。当你需要迁移的时候，可以定义一个闭包并且执行它，然后你就能顺利地执行迁移属性的所有步骤了（译者注：<a href="https://realm.io/news/migrating-from-core-data-to-realm/" target="_blank" rel="external">如何从 Core Data 迁移到 Realm</a>）。</p>
<h2 id="索引属性（Indexed_properties）和主键（Primary_keys）">索引属性（Indexed properties）和主键（Primary keys）</h2><p>Realm 框架有很多 Core Data 中没有的新特性（也有可能是我没找到，或者说我就是想提一下这点😊）。第一点就是「索引属性」了。你可以定义需要被索引的属性集合。当属性个数比较小的时候，搜索会变得很快。这有助于性能的提升。</p>
<p>接下来不得不提一下「主键」。你可以定义抽象模型中的一个属性作为它的主键。这能保证更加有效地更新数据以及保证数据的唯一性。</p>
<p>在我使用的这个例子中，主键和索引属性将作为「标识符」，被用于搜索和更新数据。</p>
<p>数据中也可以有被忽略的属性，那些属性将不被持久化保存。</p>
<h2 id="创建、更新并写入数据">创建、更新并写入数据</h2><p>你可以使用未被持久化过的抽象模型，而且这些数据可以被持久化时，你可以将它们写入 Realm 中。比起 Core Data，这就是我为什么喜欢 Realm 更多一点 – 因为它能够很好地解决一些临时数据的问题。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> day = <span class="type">Day</span>(timestamp: timestamp)</span><br><span class="line">day.dailyGoal = <span class="type">MenuSettings</span>().dailyGoal</span><br></pre></td></tr></table></figure>
<p>为了能够写入 Realm 或者从 Realm 中读取，你需要创建 <code>Realm</code> 实例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br></pre></td></tr></table></figure>
<p>这是如何将数据添加到数据库的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">    realm.add(day)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我特别喜欢 Realm 中更新数据的方式。我们假设一下有一部分数据是从网络上下载的，并且他们被映射过而且已经加进了数据库。在数据库中已经存在的数据仅需要更新而不是再次添加。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">fetchAll</span><span class="params">(completion: [Day] -&gt; Void)</span></span> &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     假设请求返回了 JSON 并且数据已经映射到了抽象数据层的 Day 类型。</span><br><span class="line">          </span><br><span class="line">     创建的数据还没有存入数据库 Realm 中。</span><br><span class="line">     数据的标识符是相等的时间戳。</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">let</span> day1 = <span class="type">Day</span>(timestamp: <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> day2 = <span class="type">Day</span>(timestamp: <span class="number">86400</span>)</span><br><span class="line">    <span class="keyword">let</span> day3 = <span class="type">Day</span>(timestamp: <span class="number">172800</span>)</span><br><span class="line">    </span><br><span class="line">    completion([day1, day2, day3])</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">sync</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fetchAll &#123; (days) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line">        <span class="keyword">try</span>! realm.write &#123;</span><br><span class="line">            <span class="comment">/// 如果有相同的标识符，那么它将会被更新。</span></span><br><span class="line">            realm.add(days, update: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一种比手动查询带有相同标识符然后更新值域更好的方法。</p>
<p>如果更新的参数被置为 false，那么新的数据将具有和在数据库中存在的数据相同的主键。异常会被抛出。</p>
<p>还有其他一些方法来更新数据，在这篇文章中我就不涉及了。</p>
<p>这是如何得到所有 Day 类型数据的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> days = realm.objects(<span class="type">Day</span>.<span class="keyword">self</span>)</span><br></pre></td></tr></table></figure>
<p>筛选数据也很简单：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">realm.objects(<span class="type">Day</span>.<span class="keyword">self</span>).<span class="built_in">filter</span>(<span class="string">"identifier == %@"</span>, dayIdentifier)</span><br></pre></td></tr></table></figure>
<p>按照时间戳升序排列这些数据：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> days = realm.objects(<span class="type">Day</span>.<span class="keyword">self</span>).sorted(<span class="string">"timestamp"</span>, ascending: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>当你每次执行 <code>object()</code>、<code>sorted()</code> 和 <code>filter()</code> 后均会得到一个 <code>Results&lt;T&gt;</code> 类型的数据。这能让你对结果进行额外的筛选排序等操作 - 这功能非常的强大而且非常好使。</p>
<h2 id="小结">小结</h2><p>在下一个有更加复杂的数据模型的 app 中<strong>我还会使用</strong> Realm 吗？答案是<strong>肯定</strong>的。因为整个框架使用起来非常的简单、集成起来非常的快速，而且 Realm 提供了非常多而且强大的功能特性。</p>
<p>P.S. 这个 app 正在等待过审 :)</p>
<p>2015/12/06更新<br>这个应用上架了 - <a href="https://itunes.apple.com/pl/app/water-intake-drink-more-water/id1062053347?mt=8" target="_blank" rel="external">Water Intake</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/ios-realm-instead-of-coredata/">原文链接</a>，原文日期：2015-11-29<br>译者：<a href="https://github.com/Cee">Cee</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<blockquote>
<p>我已在网上多次看到「Realm」这个词。我甚至曾在十月时有机会参加由 Swift 用户组组织的 Realm 聚会。最终，我有机会用上了 Realm 这个框架。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Tomasz Szulc" scheme="http://swiftggteam.github.io/tags/Tomasz-Szulc/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[几个 Swift 代码规范]]></title>
    <link href="http://swiftggteam.github.io/2015/12/07/a-handful-of-swift-style-rules-swiftlang/"/>
    <id>http://swiftggteam.github.io/2015/12/07/a-handful-of-swift-style-rules-swiftlang/</id>
    <published>2015-12-06T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/11/17/a-handful-of-swift-style-rules-swiftlang/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-17<br>译者：<a href="http://blog.csdn.net/mmoaay" target="_blank" rel="external">mmoaay</a>；校对：<a href="http://weibo.com/lfbWb" target="_blank" rel="external">lfb_CD</a>；定稿：<a href="http://codebuild.me/" target="_blank" rel="external">shanks</a></p>
</blockquote>
<p>我们需要经常带着新问题来重新审视一下以前的代码规范。</p>
<a id="more"></a>
<p><strong><a href="http://twitter.com/Eridius" target="_blank" rel="external">Kevin</a> 提供的一套规范</strong>：“如果尾部的闭包参数是函数式的就用圆括号。如果是程序式的就用花括号。”</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="tag">myCollection</span><span class="class">.map</span>(&#123;<span class="tag">blah</span>&#125;)<span class="class">.filter</span>(&#123;<span class="tag">blah</span>&#125;)<span class="class">.etc</span></span><br><span class="line"><span class="tag">myCollection</span><span class="class">.forEach</span> &#123;&#125; <span class="comment">// 或者 </span></span><br><span class="line"><span class="function">dispatch_after</span>(when, queue) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>样式一致性与闭包是否有返回值相关。目前存在的争议是我们是否应该在尾部花括号的左边留空格。</p>
<p><strong><code>self</code> 的使用规范</strong>：“当<a href="http://ericasadun.com/2015/04/21/swift-occams-code-razor/" target="_blank" rel="external">编译器可以自动推断</a>成员类型时，你就可以在使用隐式成员表达式时省略 <code>self</code>。但无论何时，只要一个方法调用会反射到一个实例，就要使用 <code>self</code>。“</p>
<p>仔细考虑下面 <code>for</code> 循环语句中的 <code>where</code> 分支。<code>contains</code> 方法就是在没有明确对象的情况下调用的。那是谁做了 <code>contains</code> 操作呢? 因为方法参数中没有传入容器对象，所以这个对象只能是调用这个方法的实例。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (flagLessOne, <span class="type">string</span>) <span class="keyword">in</span> strings.enumerate() </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">contains</span>(</span><br><span class="line">        Features(rawValue: <span class="number">1</span>&lt;&lt;(flagLessOne + <span class="number">1</span>))) &#123;</span><br><span class="line">    nameArray.append(<span class="type">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完全合格的调用明确指出了原本模糊不清的对象，同时极大滴提高了代码的可读性：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (flagLessOne, <span class="type">string</span>) <span class="keyword">in</span> strings.enumerate() </span><br><span class="line">    <span class="keyword">where</span> self.<span class="keyword">contains</span>(</span><br><span class="line">        Features(rawValue: <span class="number">1</span>&lt;&lt;(flagLessOne + <span class="number">1</span>))) &#123;</span><br><span class="line">    nameArray.append(<span class="type">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>条件级联绑定的规范</strong>：“除非你做的是 <code>var</code> 和 <code>let</code> 混合的条件绑定，只用一个 <code>if let</code> 或者 <code>if var</code> 就可以了，需要的话可以自由添加空格。“</p>
<p>不要使用下面的方式：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> x = x, <span class="keyword">let</span> y = y, <span class="keyword">let</span> z = z &#123;blah&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> x = x, y = y, z = z &#123;blah&#125;</span><br></pre></td></tr></table></figure>
<p>省略多余的 <code>let</code> 关键字可以让级联绑定更加简洁，而且 Xcode 会帮你对这些代码的格式进行很好的调整：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span></span><br><span class="line">    x = x,</span><br><span class="line">    y = y,</span><br><span class="line">    z = z &#123;</span><br><span class="line">    <span class="attribute">...</span>blah<span class="attribute">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尽管级联绑定避免了 pre-Swift 2 中的“鞭尸金字塔(pyramids of doom)“，但它们又导致了“恐怖便秘块(constipated blocks of horror)“的问题。这种问题主要出现在下面两种情况：</p>
<ul>
<li>存在大量的串行绑定，再加上空行和注释时（就像下面的代码）</li>
<li>使用了一系列 <code>guard</code> 语句时。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span></span><br><span class="line">    <span class="comment">// 以字典的方式访问 JSON </span></span><br><span class="line">    json = json <span class="keyword">as</span>? NSDictionary,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查结果数组</span></span><br><span class="line">    resultsList = json[<span class="string">"results"</span>] <span class="keyword">as</span>? NSArray,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取第一项</span></span><br><span class="line">    results = resultsList.firstObject <span class="keyword">as</span>? NSDictionary,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取名字和价格</span></span><br><span class="line">    name = results[<span class="string">"trackName"</span>] <span class="keyword">as</span>? <span class="built_in">String</span>, </span><br><span class="line">    price = results[<span class="string">"price"</span>] <span class="keyword">as</span>? NSNumber &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... blah blah ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><strong>模式匹配关键字的规范</strong>：“如果都是绑定，那就要把绑定组合起来。”</p>
<p>通过把关键字移动到元组外面的方式来把多模式匹配绑定组合起来。将下面的代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> (<span class="built_in">let</span> x?, <span class="built_in">let</span> y?) = myOptionalTuple &#123;</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>替换为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="built_in">let</span> (x?, y?) = myOptionalTuple &#123;</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>isEmpty</code> 的使用规范</strong>：“如果你在检测一个集合元素的个数，你可能就是在犯错。”用 <code>isEmpty</code> 替换 <code>count == 0</code>。</p>
<p><strong><code>void</code> 的使用规范</strong>：“使用 <code>void</code> 返回类型，而不是 <code>()</code>。”下面是一个返回 <code>-&gt; Void</code> 而不是 <code>-&gt; ()</code> 的方法。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doThis</span><span class="params">()</span> -&gt; <span class="title">Void</span> </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">notThis</span><span class="params">()</span> -&gt; <span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p><strong><code>!</code> 的使用规范</strong>：“每当你在 Swift 中用惊叹号的时候，一只小猫就会死。”尽可能的避免使用强制转换和强制解包。</p>
<p><strong>创建集合的规范</strong>：“使用显式类型和空集合。”类型在赋值操作符的左边，空实例在赋值操作符的右边。</p>
<p>把下面的代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">var x = [<span class="link_label">String: Int</span>](<span class="link_url"></span>) // 以及</span><br><span class="line">var y = [<span class="link_label">Double</span>](<span class="link_url"></span>)</span><br><span class="line">var z = Set<span class="xml"><span class="tag">&lt;<span class="title">String</span>&gt;</span></span>()</span><br><span class="line">var mySet = MyOptionSet()</span><br></pre></td></tr></table></figure>
<p>替换为：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> x</span>: [String: <span class="typename">Int</span>] = [:]</span><br><span class="line"><span class="variable"><span class="keyword">var</span> y</span>: [<span class="typename">Double</span>] = []</span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span>: Set<span class="type">&lt;String&gt;</span> = []</span><br><span class="line"><span class="variable"><span class="keyword">var</span> mySet</span>: MyOptionSet = []</span><br></pre></td></tr></table></figure>
<p><a href="https://twitter.com/_jackhl/status/646723367576276992" target="_blank" rel="external">引用</a></p>
<p>“<a href="http://mikeash.com/" target="_blank" rel="external">Mike Ash</a>”的冒号规范：“右侧加上空格，而左侧不需要。”Or no soup for you!</p>
<p>应该使用：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[key: <span class="keyword">value</span>] <span class="comment">// 以及</span></span><br><span class="line"><span class="keyword">struct</span> Foo: MyProtocol</span><br></pre></td></tr></table></figure>
<p>而不是：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[key : value]</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> : <span class="title">MyProtocol</span></span></span><br></pre></td></tr></table></figure>
<p><strong>从 Objective-C 过来的规范</strong>：</p>
<ul>
<li>不要在 if 和 switch 条件两边或者 return 关键词上加 Objective-C 样式的圆括号。</li>
<li>为所有常量使用“骆驼拼写法”，如 allTheConstants 而不是 ALL_CAPS</li>
<li>用 Swift 的构造器替代传统的，例如：用 <code>CGPoint(x: 1, y:1)</code> 替代 <code>CGPointMake(1, 1)</code></li>
<li>避免使用行尾分号，尽管这样是可以编译通过的。但是它们会让你的代码看起来很糟糕，而且用起来体验也很差。</li>
</ul>
<p><strong>更新</strong></p>
<p>当然，这不是说说而已，我已经在代码中进行了实践：</p>
<p><img src="/img/articles/a-handful-of-swift-style-rules-swiftlang/Screen-Shot-2015-11-18-at-10.31.13-AM.png1449449055.5795417" alt="这里写图片描述"></p>
<p>github <a href="https://github.com/erica/testlint" target="_blank" rel="external">代码地址</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/11/17/a-handful-of-swift-style-rules-swiftlang/">原文链接</a>，原文日期：2015-11-17<br>译者：<a href="http://blog.csdn.net/mmoaay">mmoaay</a>；校对：<a href="http://weibo.com/lfbWb">lfb_CD</a>；定稿：<a href="http://codebuild.me/">shanks</a></p>
</blockquote>
<p>我们需要经常带着新问题来重新审视一下以前的代码规范。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[斐波那契数列型-从数学角度学习 Swift 序列]]></title>
    <link href="http://swiftggteam.github.io/2015/12/04/the-fibonacci-sequencetype/"/>
    <id>http://swiftggteam.github.io/2015/12/04/the-fibonacci-sequencetype/</id>
    <published>2015-12-03T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Jacob Bandes-Storch，<a href="http://bandes-stor.ch/blog/2015/08/05/the-fibonacci-sequencetype/" target="_blank" rel="external">原文链接</a>，原文日期：2015/08/05<br>译者：<a href="undefined">Lou</a>；校对：<a href="http://codebuild.me/" target="_blank" rel="external">shanks</a>；定稿：<a href="http://codebuild.me/" target="_blank" rel="external">shanks</a></p>
<p>这篇博文启发自<a href="http://codereview.stackexchange.com/questions/60875/project-euler-2-even-fibonacci-numbers-in-swift" target="_blank" rel="external">Code Review.SE</a>上的一个讨论，同时<a href="https://xkcd.com/356/" target="_blank" rel="external">nerd-sniped</a>上的关于数学的有趣的学习。让我对数学和 Swift 的结合有了兴趣。所以我花了一段时间来把这些知识整理成一篇博文，特别是自从我完成了对我网站重建的第一步以后。更重要的是，我希望我能更勤勉的更新我的博客，这8年我只写了一篇而已，希望大家能对我的博客感兴趣。<br>这篇博文的目标对于初学者来讲，比较容易理解，同时也提供给那些已经对这个概念熟悉的人一些有用的细节和例子。希望大家能给我反馈。</p>
</blockquote>
<a id="more"></a> 
<p>假设你第一次学习 Swift，你实在是太兴奋了，花了一天时间反复练习，等到第二天就成了专家。于是第二天你就开始传授课程来教别人。</p>
<p>当然，我很愿意成为你的第一个学生。我也学的很快，一天学下来，我也可以教别人 Swift 了。我俩继续教别人，其他的学生也学的很快，马上跟上进度，都可以第二天就去教别人。</p>
<p>这是个多么让人兴奋的世界呀。但是问题来了，照这样的进度下去，Swift 学习者将大量涌入城市，基础设施将无法支撑庞大的人口。</p>
<p>市长叫来最好的科学家们：“我们需要精确的数学模型！<strong>每天到底有多少人会使用 Swift？什么时候这种疯狂会终止？</strong>”</p>
<h3 id="搭建数学模型">搭建数学模型</h3><p>为了方便理解问题，让我们画一副图来表示最初几天发生的事：<br><img src="/img/articles/fibonacci/1.png" alt=""></p>
<p>仔细观察我们发现，特定的一天总的 Swifters 数量（我们用 \(S_{今天}\) 来表示）等于前一天的数量加上每个老师可以所教的学生。</p>
<p>$$ S_{今天} = S_{昨天} + 老师数 $$</p>
<p>那么老师数目是多少呢？记住，一个人需要花一天时间学习才能变成 Swift 专家，所以前天的每一个人都能成为老师，都可以教一个学生：\(S_{今天} = S_{昨天} + S_{前天}\)。</p>
<p>这下公式就简单了！我们可以用手算了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> + <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">    <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br><span class="line">        <span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line">            <span class="number">2</span> + <span class="number">3</span> = <span class="number">5</span></span><br><span class="line">                <span class="number">3</span> + <span class="number">5</span> = <span class="number">8</span></span><br><span class="line">                	   ...</span><br></pre></td></tr></table></figure>
<p>如果这个数列看上去有点熟悉，那是因为这是<strong>斐波纳契数列</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">377</span>,<span class="number">610</span>,...</span><br></pre></td></tr></table></figure>
<p>不管你是否喜欢，我们的世界里处处都有斐波那契数的存在：<a href="http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibnat.html" target="_blank" rel="external">花瓣</a>的生长遵循斐波那契数列，大树的枝丫是斐波那契树丫，当然也有人吐槽说这不过是<a href="http://www.lhup.edu/~dsimanek/pseudo/fibonacc.htm" target="_blank" rel="external">确认偏误</a>罢了。我们发现，这个数列是基于非常简单的形式的，非常容易计算：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    (i, j) = (j, i + j)</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment">// 打印1, 然后打印1, 继续打印2, 3, 5, 8, 13, 21, 34, 55...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大功告成！</p>
<p>哈哈，骗你的。我们才刚刚开始。计算机美妙的地方就在于可以帮助我们快速的解决用手算很麻烦的问题。让我们尝试几个例子。</p>
<h4 id="42天后有多少个_Swifter？">42天后有多少个 Swifter？</h4><p>前面我们已经差不多解决了这个问题，只要在42那边停止循环即可。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">42</span> &#123;</span><br><span class="line">    (i, j) = (j, i + j)</span><br><span class="line">&#125;</span><br><span class="line">i <span class="comment">// returns 267914296</span></span><br></pre></td></tr></table></figure>
<h4 id="那么第_n_天呢？">那么第 n 天呢？</h4><p>和之前的问题类似，我们可以将其抽象成一个函数。用 n 来代替 42。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">nthFibonacci</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">        (i, j) = (j, i + j)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nthFibonacci(<span class="number">42</span>) <span class="comment">// 返回 267914296</span></span><br><span class="line">nthFibonacci(<span class="number">64</span>) <span class="comment">// 返回 10610209857723</span></span><br></pre></td></tr></table></figure>
<h4 id="第一周到底写了多少_Swift？">第一周到底写了多少 Swift？</h4><p>为了简化问题，假定每个人写代码的速度是一样的。知道每个人每天写的代码量后，我们只需要把斐波那契数加起来即可。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">fibonacciSumUpTo</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">        sum += nthFibonacci(i) </span><br><span class="line">        <span class="comment">// 第 i 天 使用 Swift 写代码的人数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibonacciSumUpTo(<span class="number">7</span>) <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<h4 id="逐步简化">逐步简化</h4><p>不要急，Swift 的标准库里面已经有了一个函数叫做 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_SequenceType_Protocol/index.html#//apple_ref/swift/intfm/SequenceType/s:FeRq_Ss12SequenceType_SsS_6reduceu__Rq_S__Fq_FTqd__7combineFTqd__qqq_S_9GeneratorSs13GeneratorType7Element_qd___qd__" target="_blank" rel="external">reduce</a>，可以将数字加在一起。我们该怎么写呢?</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>].<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +) <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<p>这样可行，但是我们需要把每个数字都写出来。要是能用 nthFibonacci() 就好了。</p>
<p>既然这些是连续的斐波那契数，我们可以简单的使用1到7的范围：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>].<span class="built_in">map</span>(nthFibonacci) </span><br><span class="line"><span class="comment">// 返回 [1, 1, 2, 3, 5, 8, 13]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>].<span class="built_in">map</span>(nthFibonacci).<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</span><br><span class="line"> <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<p>或者我们可以更简单，用 Swift 的<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_StandardLibrary_Operators/index.html" target="_blank" rel="external">range operator</a>(…):</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>...<span class="number">7</span>).<span class="built_in">map</span>(nthFibonacci).<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +) <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<p>这等同于 <code>fibonacciSumUpTo</code></p>
<h4 id="性能优化">性能优化</h4><p>看上去很不错，但是不要忘了 nthFibonacci(i) 从0开始加到 i，所需的工作量将随着i线性增加。</p>
<p>而且我们所写的 <code>(1...n).map(nthFibonacci).reduce(0, combine: +)</code> 从1到n每次凑要运行 nthFibonacci， 这将大大增加运算量。</p>
<blockquote>
<p>注意：计算越简单的斐波那契数，真实耗费每一步的时间几乎可以忽略不计（开启性能优化）。这篇文章之前的草稿版本包括了时间消耗的表格，但是我把表格去掉了，怕误导大家。取而代之的是，我们讨论的是一个相对的时间/性能的复杂度。</p>
</blockquote>
<p>让我们将 <code>nthFibonacci</code> 和 <code>fibonacciSumUpTo</code> 两个函数结合来减少一点运算量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">fastFibonacciSumUpTo</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">        (i, j) = (j, i + j) <span class="comment">// 计算下一个数</span></span><br><span class="line">        sum += i <span class="comment">// 更新总数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fastFibonacciSumUpTo(<span class="number">7</span>) <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<p>现在我们已经将 <code>fastFibonacciSumUpTo</code> 的复杂度从二次降为线性了。</p>
<p>但是为了实现这个，我们不得不写了一个更加复杂的方程。我们在分离相关度(把计算斐波那契数和求和分为2步) 和优化性能之间进行了权衡。</p>
<p>我们的计划是用 Swift 的标准库来简化和解开我们的代码。首先我们来总结一些我们要做什么。</p>
<ol>
<li>将前n个斐波那契数用线性时间(linear time)和常量空间(constant space)的方式<strong>加起来</strong>。</li>
<li>将<strong>前</strong>n个斐波那契数用<strong>线性时间(linear time)和常量空间(constant space)的方式</strong>加起来。</li>
<li>将前n个<strong>斐波那契数</strong>用线性时间(linear time)和常量空间(constant space)的方式加起来。</li>
</ol>
<p>幸运的是，Swift 正好有我们需要的功能！</p>
<p>1、 <code>reduce</code> 函数，用 <code>+</code> 操作符来结合。</p>
<p>2、 <code>prefix</code> 函数和<a href="https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC" target="_blank" rel="external">惰性求值</a>(Lazy Evaluation)</p>
<blockquote>
<p>注意：prefix只有在 Xcode 7 beta 4中可用，作为 CollectionTypes 的一个全局函数使用，但其实已经在 OS X 10.11 beta 5 API 作为 SequenceType 的扩展出现了。我期望在下一个 Xcode beta 有一个延迟实现的版本；现在这里有一个<a href="https://gist.github.com/jtbandes/d8a600c51fa7e93162fa" target="_blank" rel="external">自定义的实现</a>。</p>
</blockquote>
<p>3、 定制数列，使用数列型协议(<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_SequenceType_Protocol/index.html" target="_blank" rel="external">SequenceType protocol</a>)</p>
<h3 id="定制数列">定制数列</h3><p>Swift 的 <code>for-in</code> 循环的基础是 <code>SequenceType</code> 协议。所有遵循这个协议的可以循环。</p>
<p>想要成为一个 SequenceType 只有一个要求，就是提供一个创建器( <code>Generator</code> )：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Generator</span>: <span class="type">GeneratorType</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">generate</span><span class="params">()</span></span> -&gt; <span class="type">Generator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而成为一个 <code>GeneratorType</code> 只有一个要求，就是生产元素( <code>Elements</code> )</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">GeneratorType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以一个数列就是一个可以提供元素创建器的东西。</p>
<p>最快创建定制数列的方法就是用<code>AnySequence</code>。这是一个内建的结构体，可以响应<code>generate()</code>，去调用一个你在初始化时所给的闭包。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AnySequence</span>&lt;<span class="title">Element</span>&gt;: <span class="title">SequenceType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>&lt;<span class="type">G</span>: <span class="type">GeneratorType</span> <span class="keyword">where</span> <span class="type">G</span>.<span class="type">Element</span> == <span class="type">Element</span>&gt;</span><br><span class="line">    (<span class="number">_</span> makeUnderlyingGenerator: () -&gt; <span class="type">G</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似的，我们可以用 <code>AnyGenerator</code> 和 <code>anyGenerator</code> 函数来造创建器。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">anyGenerator</span><span class="generics">&lt;Element&gt;</span><span class="params">(body: <span class="params">()</span></span></span> -&gt; <span class="type">Element</span>?) -&gt; </span><br><span class="line"><span class="type">AnyGenerator</span>&lt;<span class="type">Element</span>&gt;</span><br></pre></td></tr></table></figure>
<p>所以写一个斐波那契数列就相当简单了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacciNumbers = <span class="type">AnySequence</span> &#123; () -&gt; <span class="type">AnyGenerator</span>&lt;<span class="type">Int</span>&gt; <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 为了创建一个生成器，我们首先需要建立一些状态...</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">anyGenerator</span> &#123;</span><br><span class="line">        <span class="comment">// ... 然后生成器进行改变</span></span><br><span class="line">        <span class="comment">// 调用 next() 一次获取每一项</span></span><br><span class="line">        <span class="comment">// (代码看起来是不是很熟悉？)</span></span><br><span class="line">        (i, j) = (j, i + j)</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在 <code>fibonacciNumbers</code> 是一个 <code>SequenceType</code>，我们可以使用 <code>for</code> 循环：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fibonacciNumbers &#123;</span><br><span class="line">    <span class="built_in">print</span>(f) <span class="comment">// 打印 1, 然后打印 1, 继续打印 2, 3, 5, 8, 13, 21, 34, 55...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而且我们可以自由的使用 <code>prefix</code>:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> fibonacciNumbers.<span class="keyword">prefix</span>(<span class="number">7</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(f) <span class="comment">// 打印 1, 1, 2, 3, 5, 8, 13, 然后停止.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们可以用 <code>reduce</code> 来加起来：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">fibonacciNumbers.<span class="keyword">prefix</span>(<span class="number">7</span>).<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +) <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<p>太棒了！这是线性时间的，常量空间的，最重要的是这非常清晰的展示了我们所要做的，而不需要使用 <code>...</code> 和 <code>map</code>。</p>
<blockquote>
<p>说明：如果你在playground里运行这段代码，可能会发现这个版本比之前的要慢。这个版本只改变了常数部分，复杂度本身没有变化，但是性能却有明显下降。和 fastFibonacciSumUpTo 进行对比可以发现，这段代码把单一的循环改成了函数调用，这可能就是性能降低的原因。没错，我们又需要进行权衡。</p>
</blockquote>
<h3 id="灵活度">灵活度</h3><p>目前的目标只是给了我们一个更好给工具去解答有关斐波那契数的问题。深入钻研来看，我们可能会问：为什么我要先研究斐波那契数？这不过是这个数列恰好符合我们所发现的规律：</p>
<p>$$S_{今天} = S_{昨天} + S_{前天}$$</p>
<p>这个公式在我们代码中表现为 <code>(i, j) = (j, i + j)</code>。但是这深藏了 <code>AnySequence</code> 和 <code>anyGenerator</code>。如果我们要写更加清晰的代码 — 可以描述我们想要解决的问题、不需要仔细分析 — 我们最好写的更加明显点。</p>
<p>斐波那契数列常写成这种形式：</p>
<p>$$F_{n} = F_{n-1} + F_{n-2}$$</p>
<p>这是类似的形式，但是最重要的是这表现出递推关系。这种数学关系指的是数列里某一个数的值取决于前面几个数的值。</p>
<p>定义递推关系的时候，首先要定义初始项。我们不能简单的利用 <code>(i, j) = (j, i + j)</code> 来计算斐波那契数如果我们不知道什么是 i 什么是 j。在我们的例子里，我们的初始项为 <code>i = 0</code> 和 <code>j = 1</code> —— 或者，我们可以把初始值定为1和1，因为我们是等第一个值返回以后才进行计算的。</p>
<p>递推关系的<strong>阶数</strong>(order)是指每一步所需的前面项的个数，而且初始项数目必须等于阶数（不然的话我们就没有足够的信息来计算下一项）。</p>
<p>现在我们可以来设计API了！你只需提供初始项和递推就可以创建递推关系了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RecurrenceRelation</span>&lt;<span class="title">Element</span>&gt;</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/// - Parameter initialTerms: The first terms of the sequence.</span></span><br><span class="line">    <span class="comment">///     The `count` of this array is </span></span><br><span class="line">    <span class="comment">///     the **order** of the recurrence.</span></span><br><span class="line">    <span class="comment">/// - Parameter recurrence: </span></span><br><span class="line">    			<span class="type">Produces</span> the `n`th term from the previous terms.</span><br><span class="line">    			</span><br><span class="line">    <span class="comment">/// - 参数 initialTerms: 序列的第一个元素集合.</span></span><br><span class="line">    <span class="comment">/// 数组的个数也就代表这个递推的排序。</span></span><br><span class="line">   	<span class="comment">/// - 参数 recurrence：根据前面的元素推算出第 n 个元素</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> initialTerms: [<span class="type">Element</span>], <span class="number">_</span> recurrence: </span><br><span class="line">    (<span class="type">T</span>: <span class="type">UnsafePointer</span>&lt;<span class="type">Element</span>&gt;, n: <span class="type">Int</span>) -&gt; <span class="type">Element</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（我们在使用 <code>UnsafePointer&lt;Element&gt;</code> 而不是 <code>[Element]</code>，这样我们就可以使用 <code>T[n]</code> 而不需要存储先前计算的项）。</p>
<p>现在，我们的初始任务变得更加简单了。<strong>多少人在使用Swift？</strong> 只要用这个公式即可：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> peopleWritingSwift = <span class="type">RecurrenceRelation</span>([<span class="number">1</span>, <span class="number">1</span>]) </span><br><span class="line">&#123; <span class="type">T</span>, n <span class="keyword">in</span> <span class="type">T</span>[n-<span class="number">1</span>] + <span class="type">T</span>[n-<span class="number">2</span>] &#125;</span><br><span class="line"></span><br><span class="line">peopleWritingSwift.<span class="keyword">prefix</span>(<span class="number">7</span>).<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +) <span class="comment">// 返回 33</span></span><br></pre></td></tr></table></figure>
<h4 id="那么，如何来实现这个API呢?">那么，如何来实现这个API呢?</h4><p>我们来做吧。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RecurrenceRelation</span>&lt;<span class="title">Element</span>&gt;: <span class="title">SequenceType</span>, <span class="title">GeneratorType</span></span><br><span class="line"></span>&#123;</span><br></pre></td></tr></table></figure>
<p>首先我们需要一些内存来存储元素，还需要一个引用来链接到我们所要传递的闭包。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> recurrence: (<span class="type">T</span>: <span class="type">UnsafePointer</span>&lt;<span class="type">Element</span>&gt;, n: <span class="type">Int</span>) -&gt; <span class="type">Element</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> storage: [<span class="type">Element</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">/// - 参数 initialTerms: 序列的第一个元素集合.</span></span><br><span class="line"><span class="comment">/// 数组的个数也就代表这个递推的排序。</span></span><br><span class="line"><span class="comment">/// - 参数 recurrence：根据前面的元素推算出第 n 个元素</span></span><br><span class="line"><span class="keyword">init</span>(<span class="number">_</span> initialTerms: [<span class="type">Element</span>], <span class="number">_</span> recurrence: (<span class="type">T</span>: <span class="type">UnsafePointer</span>&lt;<span class="type">Element</span>&gt;, n: <span class="type">Int</span>) -&gt; <span class="type">Element</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.recurrence = recurrence</span><br><span class="line">    storage = initialTerms</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了简单点，我们同时采用 <code>SequenceType</code> and <code>GeneratorType</code>。对于 <code>generate()</code>，我们只返回 <code>self</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SequenceType requirement</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">generate</span><span class="params">()</span></span> -&gt; <span class="type">RecurrenceRelation</span>&lt;<span class="type">Element</span>&gt; &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br></pre></td></tr></table></figure>
<p>接下来，每次调用 <code>next()</code>，我们调用 <code>recurrence</code> 来产生下一个值， 并且将其存在 <code>storage</code> 里。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// GeneratorType requirement</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> iteration = <span class="number">0</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Element</span>?</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 首先推算出所有的初始元素值</span></span><br><span class="line">        <span class="keyword">if</span> iteration &lt; storage.<span class="built_in">count</span> &#123; <span class="keyword">return</span> storage[iteration++] &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> newValue = storage.withUnsafeBufferPointer &#123; buf <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 调用闭包，传入内存地址中的指针的偏移量，知道 T[n-1] 是数组中最后一个元素</span></span><br><span class="line">            <span class="keyword">return</span> recurrence(<span class="type">T</span>: buf.baseAddress + </span><br><span class="line">            storage.<span class="built_in">count</span> - iteration, n: iteration)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存储下一个的值，丢弃到最旧的值</span></span><br><span class="line">        storage.removeAtIndex(<span class="number">0</span>)</span><br><span class="line">        storage.append(newValue)</span><br><span class="line">        iteration++</span><br><span class="line">        <span class="keyword">return</span> newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更新：<a href="https://twitter.com/oisdk/status/629296752538066945" target="_blank" rel="external">@oisdk</a>指出 <code>UnsafePointer</code> 不是必须的。在原来的版本中，我使用它是为了让 n 的值在 recurrence 中更加精确 - 但是自从 recurrence 只依赖与前一项，而不是 n 本身时，n 的值不再改变时，这是ok的。 所以这个版本运行良好。不使用 <code>UnsafePointer</code> 感觉更加安全了! </p>
</blockquote>
<p>记住：有许多种方法可以定义自定义数列。<code>CollectionType</code>，<code>SequenceType</code>，和 <code>GeneratorType</code> 只是协议，你可以按照自己所需的方式来遵循它们。也就是说，在实践中也许你很少需要这么做 —— Swift 的标准库里有大多数你所需的。不过如果你觉得需要自定义的数据结构，你可以使用 <code>CollectionType</code> 和 <code>SequenceType</code>。</p>
<h4 id="更多的例子">更多的例子</h4><p>现在我们已经归纳了递推关系，我们可以轻松地计算许多东西了。比如说卢卡斯数（<a href="https://en.wikipedia.org/wiki/Lucas_number" target="_blank" rel="external">Lucas Number</a>）。和斐波那契数类似，只不过初始项不同：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199, 322, 521...</span></span><br><span class="line"><span class="keyword">let</span> lucasNumbers = <span class="type">RecurrenceRelation</span>([<span class="number">2</span>, <span class="number">1</span>]) &#123; <span class="type">T</span>, n <span class="keyword">in</span> <span class="type">T</span>[n-<span class="number">1</span>] + <span class="type">T</span>[n-<span class="number">2</span>] &#125;</span><br></pre></td></tr></table></figure>
<p>或者”Tribonacci Numbers“，一个拥有<a href="http://math.stackexchange.com/a/1128994/21666" target="_blank" rel="external">有趣性质</a>的三阶递推：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504...</span></span><br><span class="line"><span class="keyword">let</span> tribonacciNumbers = <span class="type">RecurrenceRelation</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]) </span><br><span class="line">&#123; <span class="type">T</span>, n <span class="keyword">in</span> </span><br><span class="line">	<span class="type">T</span>[n-<span class="number">1</span>] + <span class="type">T</span>[n-<span class="number">2</span>] + <span class="type">T</span>[n-<span class="number">3</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>花一些额外的功夫，我们可以视觉化<a href="https://en.wikipedia.org/wiki/Logistic_map#Chaos_and_the_logistic_map" target="_blank" rel="external">单峰映像的混沌二根分支</a>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">logisticMap</span><span class="params">(r: Double)</span></span> -&gt; <span class="type">RecurrenceRelation</span>&lt;<span class="type">Double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">RecurrenceRelation</span>([<span class="number">0.5</span>]) &#123; x, n <span class="keyword">in</span> </span><br><span class="line">    	r * x[n-<span class="number">1</span>] * (<span class="number">1</span> - x[n-<span class="number">1</span>]) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">2.5</span>, to: <span class="number">4</span>, by: <span class="number">0.005</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">map</span> = logisticMap(r)</span><br><span class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">50</span> &#123; <span class="built_in">map</span>.next() &#125; </span><br><span class="line">    <span class="comment">// 处理一些得到的值</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Array</span>(<span class="built_in">map</span>.<span class="keyword">prefix</span>(<span class="number">10</span>))[<span class="type">Int</span>(arc4random_uniform(<span class="number">10</span>))] </span><br><span class="line">    <span class="comment">// 随机选择接下来 10 个值当中的一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/articles/fibonacci/2.png" alt=""></p>
<p>是不是很有数学的简洁性呀？</p>
<h4 id="相关推荐">相关推荐</h4><ul>
<li>TED 演讲，<a href="https://www.ted.com/talks/arthur_benjamin_the_magic_of_fibonacci_numbers" target="_blank" rel="external">The magic of Fibonacci numbers</a>, 演讲者，Arthur Benjamin.</li>
<li><a href="http://mathworld.wolfram.com/BinetsFibonacciNumberFormula.html" target="_blank" rel="external">Binet’s Formula</a>, 使用一个几乎常量时间的公式来计算斐波那契数。</li>
<li><a href="http://airspeedvelocity.net/2015/08/03/arrays-linked-lists-and-performance/" target="_blank" rel="external">Arrays, Linked Lists, and Performance</a>，作者 Airspeed Velocity, 对序列使用其他有意思的方法，包括对ManagedBuffer的讨论。<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Jacob Bandes-Storch，<a href="http://bandes-stor.ch/blog/2015/08/05/the-fibonacci-sequencetype/">原文链接</a>，原文日期：2015/08/05<br>译者：<a href="undefined">Lou</a>；校对：<a href="http://codebuild.me/">shanks</a>；定稿：<a href="http://codebuild.me/">shanks</a></p>
<p>这篇博文启发自<a href="http://codereview.stackexchange.com/questions/60875/project-euler-2-even-fibonacci-numbers-in-swift">Code Review.SE</a>上的一个讨论，同时<a href="https://xkcd.com/356/">nerd-sniped</a>上的关于数学的有趣的学习。让我对数学和 Swift 的结合有了兴趣。所以我花了一段时间来把这些知识整理成一篇博文，特别是自从我完成了对我网站重建的第一步以后。更重要的是，我希望我能更勤勉的更新我的博客，这8年我只写了一篇而已，希望大家能对我的博客感兴趣。<br>这篇博文的目标对于初学者来讲，比较容易理解，同时也提供给那些已经对这个概念熟悉的人一些有用的细节和例子。希望大家能给我反馈。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Jacob Bandes-Storch" scheme="http://swiftggteam.github.io/tags/Jacob-Bandes-Storch/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 iOS 中实现一个可展开的 Table View]]></title>
    <link href="http://swiftggteam.github.io/2015/12/03/expandable-table-view/"/>
    <id>http://swiftggteam.github.io/2015/12/03/expandable-table-view/</id>
    <published>2015-12-02T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：AppCoda，<a href="http://www.appcoda.com/expandable-table-view/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-16<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>几乎所有的应用程序都有一个共同的特点：允许用户在多个视图控制器之间导航和协同工作。这些视图控制器应用非常广泛，例如简单显示某些形式的信息到屏幕上，或从用户处收集复杂的输入数据。为了实现一款应用的不同功能，经常需要创建新的视图控制器，且多数任务比较艰巨。不过，倘若你利用<code>expandable tableviews</code>（之后统一译为可展开的 tableview ） ，我们就能避免创建新的视图控制器（以及相关的界面和 storyboard）。</p>
<a id="more"></a>
<p>顾名思义，可展开的 tableview “允许”其单元格展开和折叠，显示和隐藏那些始终可见的单元格下的其他单元格。当需要收集简单数据或向用户显示请求信息时，创建可展开的 tableview 是一个不错的选择。通过这种方式，我们无需再创建新的视图控制器，只需给定几种选项供用户抉择（只能选其一）。例如，利用可展开的 tableview ，你可以显示和隐藏用于收集数据的表格选项，而不再需要其他额外的视图控制器。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/expandable-uitableview.jpg" alt=""></p>
<p>是否应该使用可展开的 tableview 取决于你所开发的应用程序的性质。应用程序的外观和体验通常来说不需要考虑，我们可以继承 <code>UITableViewCell</code> 并自定义单元格的 UI，还可以创建额外的 xib 文件。总之，它仅仅和需求有关。</p>
<p>本教程中，我将向你展示一种简单但实用的可展开 <code>tableview</code> 创建方式。注意，实现 tableview 展开功能并不是只有本文介绍的这种方法。大部分实现都要考虑应用的具体需求，但我旨在提供一个相对通用的可以在大多数情况下重用的方法。好了，下面我们来看看本文要实现什么应用。</p>
<h3 id="关于演示应用">关于演示应用</h3><p>我们将看到如何创建并使用一个可展开的 tableview ，我们会用一个包含 tableview 的视图控制器来实现整个应用。首先，我们来制作一个表单供用户输入数据，该 tableview 包含以下三个部分：</p>
<ol>
<li>个人信息（ Personal ）</li>
<li>爱好（ Preferences ）</li>
<li>工作经验（ Work Experience ）</li>
</ol>
<p>每个 section 包含一些可展开的单元格，用于触发显示或隐藏当前 section 中其他单元格。每个 section 的顶级单元格（用于展开和折叠其他单元格）具体描述如下：</p>
<p>“Personal” section 内容如下：</p>
<ol>
<li><em>Full name</em>：显示用户的全名，当点击展开时，显示两个可用的子单元格用于键入 first name 以及 last name。</li>
<li><em>Data of birth</em>：显示用户的出生日期。当展开该单元格时，提供一个日期选择视图（<code>date pickerview</code>）供用户选择日期，以及一个提交按钮将所选日期显示到对应的顶级单元格中。</li>
<li><em>Martial status</em>：显示用户是已婚还是单身。展开时，提供一个开关控件（switch control）用于设置用户婚姻状态。</li>
</ol>
<p>“Preferences” section 内容如下：</p>
<ol>
<li><em>Favorite sport</em>：我们的表单还应要求用户选择最喜欢的运动,选中后显示在该单元格中。当该单元格呈展开状态时,出现四个运动条目可供选择,当其中一个子条目选中后，单元格自动折叠。</li>
<li><em>Favorite color</em>：基本和上面一致，这里我们将显示三个不同的颜色条目供用户选择。</li>
</ol>
<p>“Work Experience” section 内容如下：</p>
<ol>
<li><em>Level</em>：当点击展开这个顶级单元格时，显示另外一个包含滑动控件（slider control）的单元格，要求用户指定一个大概的工作经验水平。值的范围限定在 [0,10] 之间，以整型数据保存。</li>
</ol>
<p>下面的动画图形展示了我们将要实现的内容：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_7_expand_collapse.gif" alt="gif"></p>
<p>上面的动画中可以看到 tableview 展开时显示了各式各样的单元格。所有这些都能在<a href="https://www.dropbox.com/s/37qu76zlzg8yg8p/ExpandableTableStarter.zip?dl=0" target="_blank" rel="external">初始项目</a>中找到，项目中已经预先做好了一些准备工作。所有自定义单元格均采用 xib 文件设计，指定它们的 Custom Class 为自定义 CustomCell 类，继承自 <code>UITableViewCell</code>: </p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_2_custom_class.png" alt="img1"></p>
<p>项目中你可以找到以下单元格的 xib 文件：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_3_cell_list.png" alt="img2"></p>
<p>它们的文件名已经表明了每一个单元格的用途，你也可以对它们做深入探究。</p>
<p>除了单元格之外，你还可以找到一些已经实现的代码。尽管它们非常重要，完成了演示应用程序的功能，但是那些代码并不包含本教程的核心部分，所以我选择直接跳过，只是提供实现代码。教程中我们感兴趣的代码将随着章节学习逐步添加进来。</p>
<p>好了，现在你已经知道我们的最终目标是什么了，是时候去创建一个可展开的 tableview 了。</p>
<h3 id="描述单元格">描述单元格</h3><p>本教程中，我向你展示的所有有关可展开 tableview 的实现和技术都遵循一个单一和简单的思想：描述应用中每个单元格的细节。通过这种方式，你就可以知晓哪些单元格是可展开的、哪些是可见的、每一个单元格中的标签值是什么等等。确切来说，整体思想如下：为每一个单元格分配一组描述信息、描述属性或特定的值，接着向应用提供这些描述来正确显示每一个单元格。</p>
<p>对于这个演示应用程序，我创建和使用的所有属性都显示在下面列表中。注意，你可以新增属性，也可以修改现有项。不管怎样，最重要的是你能统筹全局，这样你才能够执行所有你需要的改动。属性列表如下：</p>
<ul>
<li>isExpandable：这是一个布尔类型值，表明单元格是否允许被展开。它在本教程中是一个相当重要的属性值。</li>
<li>isExpanded：依旧是一个布尔类型值，指示一个可展开的单元格的当前状态（展开或折叠）。顶级单元格默认是折叠的，因此所有顶级单元格的初始值均将设置为<code>NO</code>。</li>
<li>isVisible：顾名思义，指示单元格是否可见。它将在之后起到举足轻重的作用，我们将根据该属性在 tableview 中显示合适的单元格。</li>
<li>value：这个属性对于保存 UI 控件的值（例如婚姻状况中的<code>switch</code>控件的状态值）相当有用。不是所有的单元格都有这样的控件,所以它们中的绝大部分的 value 属性值为空。</li>
<li>primaryTitle：用于显示单元格主标题标签（main title label）中的文本内容，还包含一些应该显示在单元格中的实际值。</li>
<li>secondaryTitle：用于显示单元格子标题标签（subtitle lable）或二级标签的文本内容，</li>
<li>cellIdentifier：自定义单元格的标识符所匹配的当前描述。通过使用 cellIdentifier，应用程序不仅能够出列合适的单元格（tableview 中的 dequeue 方法），而且可以根据显示的单元格来确定应该执行的 action ，以及指定每个单元格的高度。</li>
<li>additionalRows：它包含的附加行总数，即那些当单元格展开式需要显示的额外行数。</li>
</ul>
<p>我们将使用上文介绍的属性集合来描述 tableview 中的每一个单元格。在应用层面我们只需一个属性列表（plist）文件即可实现，简单易用。在 plist 文件中，我们将为所有单元格正确地填充上述属性的值，这样从应用角度来说，我们最终只要一份完整的技术描述，无需编写一行代码。这是不是灰常棒呢？</p>
<p>通常来说，我们会在项目中创建一个新的属性列表文件，接着开始往里面填充适当的数据。但这里无需自己动手，我已经为你提供了<a href="https://www.dropbox.com/s/8bjwn3k1e84xkmw/CellDescriptor.plist.zip?dl=0" target="_blank" rel="external">.plist</a>文件。所以，你只需下载并将它添加到启动项目即可。为所有单元格设置属性非常麻烦并且毫无意义，那些填充缺省值的复制粘贴行为只可能会让你感觉疲劳和枯燥。不过，我们还是需要介绍一下 plist 文件内容：</p>
<p>首先，你下载的文件名应该为 <code>CellDescriptor.plist</code>（希望没有错）。基础结构（请见下图中的 Root 键名）是一个数组，其中每个条目项分别对应 tableview 中所呈现的 section。这意味着 plist 文件包含三个条目项，和 tableview 中显示的 section 数目保持一致。</p>
<p>每个 section 中包含的条目项同样是一个数组（类型为字典），分别用于描述当前 section 中的每一个单元格。实际上，我们采用字典形式对上述属性进行分组，每一个字典匹配一个单独的单元格描述。下面是属性列表文件的一个示例：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_4_plist_sample.png" alt="img3"></p>
<p>现在是最佳时机，抽点时间出来，透彻地理解下所有我们将要显示到 tableview 中的单元格描述属性以及相关值。显然，通过使用单元格描述，能够帮助我们明显减少创建和管理可展开单元格的代码，此外我们无需告知应用关于这些单元格的状态（例如，哪些单元格是可扩展的，它是否允许特定单元格进行展开，在代码中确定单元格是否可见等等这些问题）。所有这些信息已经存储在你刚刚下载的属性列表文件之中。</p>
<h3 id="加载单元格描述">加载单元格描述</h3><p>终于可以开始编写代码了，尽管我们描述单元格的方式（即 plist 文件）节省了大量时间，但依旧需要向项目中添加代码。现在单元格的描述属性列表文件已经处于项目之中,我们首先要做的就是以编程方式把它的内容加载到一个数组中。这个数组将在下一小节作为 tableview 的数据源（datasource）。</p>
<p>首先，请打开项目中 ViewController.swift 文件，在类顶部声明如下属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cellDescriptors: <span class="type">NSMutableArray</span>!</span><br></pre></td></tr></table></figure>
<p>该数组将包含所有单元格字典类型的描述，从属性列表文件加载得到。</p>
<p>接着，让我们实现一个自定义函数，用于实现加载文件内容到数组中。我们为该函数命名为 <code>loadCellDescription()</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">loadCellDescriptors</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> path = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"CellDescriptor"</span>, ofType: <span class="string">"plist"</span>) &#123;</span><br><span class="line">        cellDescriptors = <span class="type">NSMutableArray</span>(contentsOfFile: path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们这里的实现方法相当简单：首先我们确保属性列表文件在 bundle 中的路径是有效的，接着我们加载文件内容并初始化 <code>cellDescriptors</code> 数组。</p>
<p>下一步我们将调用上述方法，在视图将要显示之前、tableview 配置之后调用函数（我们希望先对 tableview 进行配置，然后在它上面显示数据）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">    <span class="comment">// 先配置tableview</span></span><br><span class="line">    configureTableView()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后加载数据</span></span><br><span class="line">    loadCellDescriptors()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你在上面代码最后一行键入<code>print(cellDescriptors)</code>命令，运行应用，你将看到命令控制台处打印了 plist 文件的所有内容。这意味着它们已经成功被加载到内存中了。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_5_console_plist.png" alt="img4"></p>
<p>按照惯例，我们本节的任务应该到此结束，但恰恰相反；我们将继续下去，接下来的部分至关重要。到目前为止，你已经发现（特别是打印 <code>CellDescriptor.plist</code> 文件内容之后），当应用程序启动之后并不是所有单元格都是可见的（译者注： plist 文件中单元格的 Visible 属性，有些为 YES，有些则为 NO）。实际上，我们不能知晓它们究竟是否将同时可见，因为只有当每次用户要求时，它们才进行展开或折叠。</p>
<p>从编程角度来说，这意味着每个单元格的行索引值（row index）不允许为常量（一般我们处理单元格时，都喜欢使用<code>IndexPath.row</code>这种编程方式），所以我们不能通过单元格行号遍历数据源数组（cellDescriptors）并显示单元格。解决方式如下：仅提供可见的单元格行索引值。任何尝试显示描述中标记为不可见的单元格都会出错，当然还会导致其他异常应用行为。</p>
<p>所以，为此我们将要实现一个新函数<code>getIndicesOfVisibleRows()</code>。它的名字已经说明了它的作用: 它仅获取那些已经标记为可见的单元格。在我们继续执行之前，请再次回到类的顶部，新增如下声明：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> visibleRowsPerSection = [[<span class="type">Int</span>]]()</span><br></pre></td></tr></table></figure>
<p>该二维数组将用于存储每个 section 中可见的单元格行索引值（一维用作 section,另一维用作 rows）。</p>
<p>现在，让我们来看新函数的实现。你可能已经猜到，我们将检查所有单元格的描述信息，接着将那些“isVisible”属性值为<code>YES</code>的单元格索引值添加到二维数组中。很显然，我们不得不通过一个嵌套循环来处理，但是它用起来不难。这里是函数实现:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">getIndicesOfVisibleRows</span><span class="params">()</span></span> &#123;</span><br><span class="line">    visibleRowsPerSection.removeAll()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历单元格描述数组</span></span><br><span class="line">    <span class="keyword">for</span> currentSectionCells <span class="keyword">in</span> cellDescriptors &#123;</span><br><span class="line">        <span class="comment">// 暂存每个 section 中，isVisible = true 的行号</span></span><br><span class="line">        <span class="keyword">var</span> visibleRows = [<span class="type">Int</span>]()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="number">0</span>...((currentSectionCells <span class="keyword">as</span>! [[<span class="type">String</span>: <span class="type">AnyObject</span>]]).<span class="built_in">count</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查每个单元格的isVisible属性是否为true</span></span><br><span class="line">            <span class="keyword">if</span> currentSectionCells[row][<span class="string">"isVisible"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">                visibleRows.append(row)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将所有标记为可见的单元格行号保存到该数组中</span></span><br><span class="line">        <span class="comment">// 首次加载描述文件后 该数组值为 [[0, 3, 5], [0, 5], [0]]</span></span><br><span class="line">        visibleRowsPerSection.append(visibleRows)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，函数一开始需要清空<code>visibleRowsPerSection</code>数组中之前的所有内容，否则后续调用该函数我们将最终得到错误的数据。除此之外，实现方式非常简单，所以我不会过多介绍细节。</p>
<p>首次调用上述函数位置应该在从文件加载单元格描述信息操作之后（我们将在之后再次调用它）。因此，重新审视我们在这一部分中实现的第一个函数，我们修改如下:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">loadCellDescriptors</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> path = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"CellDescriptor"</span>, ofType: <span class="string">"plist"</span>) &#123;</span><br><span class="line">        cellDescriptors = <span class="type">NSMutableArray</span>(contentsOfFile: path)</span><br><span class="line">        getIndicesOfVisibleRows()</span><br><span class="line">        tblExpandable.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尽管 tableview 目前还不能正常使用（要知道还未实现 Datasource 方法！），但我们提前调用<code>reloadData()</code>进行 tableview 重载，确保应用程序启动后，能够正确显示单元格内容。</p>
<h3 id="显示单元格">显示单元格</h3><p>别忘了每一次应用程序启动时都要加载单元格描述，下面我们准备处理和显示这些单元格。本小节中，我们首先创建另一个新函数，在 <code>cellDescriptors</code> 数组中查找并返回适当的单元格描述信息。如你即将在下面代码片段中看到的一样，从 <code>visibleRowsPerSection</code> 数组中获取数据（即可见行的索引值）是新函数工作的先决条件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">getCellDescriptorForIndexPath</span><span class="params">(indexPath: NSIndexPath)</span></span> -&gt; [<span class="type">String</span>: <span class="type">AnyObject</span>] &#123;</span><br><span class="line">    <span class="comment">// 步骤一：</span></span><br><span class="line">    <span class="keyword">let</span> indexOfVisibleRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line">    <span class="comment">// 步骤二：</span></span><br><span class="line">    <span class="keyword">let</span> cellDescriptor = cellDescriptors[indexPath.section][indexOfVisibleRow] <span class="keyword">as</span>! [<span class="type">String</span>: <span class="type">AnyObject</span>]</span><br><span class="line">    <span class="keyword">return</span> cellDescriptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述函数接受某个单元格的路径索引值（<code>NSIndexPath</code>），且该单元格此刻是 tableview 的处理项；函数返回值为一个字典，包含匹配单元格的所有属性。函数内部实现的首要任务在给定路径索引值（即 index path）的条件下，找到匹配的可见行的索引值,这一步很简单，只需要传入每个单元格的 section 和 row 即可（请见步骤一）。到目前为止，我们还未接触到 tableview 的代理方法，对上述内容也一知半解，但是我可以提前给你打个“预防针”：每个 section 的 row 总数将与每个 section 中的可见单元格数目保持一致。这意味着，上述实现中任意一个 indexPath.row 值（译者注：section是固定的），在 visibleRowsPerSection 数组中都能找到一个可见单元格的索引值与之匹配。</p>
<p>通过每个单元格的行索引值，我们可以从 <code>cellDescriptors</code> 数组中“提取”到单元格描述信息（字典类型）。请注意提取过程中，数组的第二个维度值为 <code>indexOfVisibleRow</code>，而不是 <code>indexPath.row</code>。倘若使用第二个将导致返回错误数据。</p>
<p>我们再次构建了一个非常有用的函数，事实证明在之后的开发中非常好用。现在我们开始实现 <code>viewController</code> 类中的已存在的 tableview 方法。首先，我们需要指定 tableview 的 section 数量。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> cellDescriptors != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cellDescriptors.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你要知道我们不能忽视 <code>cellDescriptors</code> 数组为<code>nil</code>的情况。当数组已经初始化完毕且填充了单元格描述信息，我们返回数组的元素个数。</p>
<p>接着，我们指定每个 section 的行数。正如我之前所说的，行数和可见单元格数量保持一致，所以我们可以仅用一行代码返回该信息。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> visibleRowsPerSection[section].<span class="built_in">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后，确定 tableview 中每个 section 的标题：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">    <span class="keyword">switch</span> section &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Personal"</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Preferences"</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Work Experience"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着，是时候指定每一行的高度了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">switch</span> currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"idCellNormal"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60.0</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"idCellDatePicker"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">270.0</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">44.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我需要强调一些东西：这部分中我们首次调用早前实现的 <code>getCellDescriptorForIndexPath:</code>函数。我们需要获得正确的单元格描述信息，紧接着有必要取得“cellIdentifier”属性，只有依靠它的值才能指定行高。你可以在每个 xib 文件中检查每种类型的单元格行高（就是如下所示的行高）。</p>
<p>最后是显示实际的单元格。起初，每个单元格必须被 <code>dequeued</code>:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 每个单元格都是通过出列得到</span></span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">CustomCell</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次，我们传入当前路径索引值获得正确的单元格描述。通过使用”cellIdentifier”属性出列一个正确的单元格，这样我们能够对每个单元格的特殊处理作进一步的深入探讨（译者注：说白了就是根据 cellIdentifier 标识符对单元格做分支处理）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentCellDescriptor = getCellDescriptorForIndexPath(indexPath)</span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">CustomCell</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellNormal"</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> primaryTitle = currentCellDescriptor[<span class="string">"primaryTitle"</span>] &#123;</span><br><span class="line">            cell.textLabel?.text = primaryTitle <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> secondaryTitle = currentCellDescriptor[<span class="string">"secondaryTitle"</span>] &#123;</span><br><span class="line">            cell.detailTextLabel?.text = secondaryTitle <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellTextfield"</span> &#123;</span><br><span class="line">        cell.textField.placeholder = currentCellDescriptor[<span class="string">"primaryTitle"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellSwitch"</span> &#123;</span><br><span class="line">        cell.lblSwitchLabel.text = currentCellDescriptor[<span class="string">"primaryTitle"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> value = currentCellDescriptor[<span class="string">"value"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        cell.swMaritalStatus.on = (value == <span class="string">"true"</span>) ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellValuePicker"</span> &#123;</span><br><span class="line">        cell.textLabel?.text = currentCellDescriptor[<span class="string">"primaryTitle"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> currentCellDescriptor[<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellSlider"</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = currentCellDescriptor[<span class="string">"value"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">        cell.slExperienceLevel.value = (value <span class="keyword">as</span> <span class="type">NSString</span>).floatValue</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于普通的单元格来说，我们仅需要设置 textLabel 标签的文本值为 primaryTitle，以及设置 detailTextLabel 标签的文本值为 secondaryTitle即可。在我们的演示应用中，使用 idCellNormal 标示符的单元格实际上就是顶级单元格（ top-level cells）,点击可展开和折叠内容。</p>
<p>对于那些包含 textfiled 的单元格，我们仅需将它的占位符值（placeholder value）设置为单元格描述信息中的 primaryTitle 即可。</p>
<p>对于那些包含 switch 控件的单元格，我们需要做两件事：首先指定 switch 控件前面的显示文本内容（示例中是常量，你可以通过修改 CellDescriptor.plist 文件改变它），其次我们需要为 switch 控件设置合适的状态，根据描述信息来决定“on”还是“off”。注意之后我们将有可能改变该值。</p>
<p>这里还有一些标识符为“idCellValuePicker”的单元格，这些单元格旨在提供一个选项列表。当点击选中某个选项时，父单元格会自动折叠当前内容。此时父单元格的文本标签值设置为选中值。</p>
<p>最后，有单元格包含了 slider 控件。这里我们从 currentCellDescriptor 字典中获取到当前值，将其转换为 float 类型的数字，再赋值给 slider 控件，这样它在可视情况下总能呈现正确的值。稍后我们会改变这个值，以及更新相应的单元格描述。</p>
<p>而那些没有添加上述几种情况标识符的单元格，在本演示应用中不会起任何作用。但是，倘若你想以不同的方式处理它们,可以随意修改代码并添加任何缺失的部分。</p>
<p>现在你可以运行应用，看看目前的成果。期望不要过高，因为你仅仅看到的只是顶级单元格内容。别忘了我们还未启用展开功能，所以当你点击它们时什么都不会出现。然而，不要气馁，正如你所看到的，到目前为止我们一切进展顺利。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_6_top_level_cells.png" alt=""></p>
<h3 id="展开和折叠">展开和折叠</h3><p>我猜想本节内容你可能期盼已久了，毕竟这是本教程实际目的所在。下面我们将通过每次点击顶级单元格控制展开和折叠，以及按要求显示或隐藏正确的子单元格。</p>
<p>首先，我们需要知道点击行的索引值（记住，不是实际的 indexPath.row,而是可见单元格中的行索引值），我们会首先将它分配给一个局部变量，如下 tableview 代理方法中所示：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然实现单元格展开和折叠的代码量不大，但是我们还是会逐步深入，这样你能理解每个步骤的作用。现在我们获取到了点击行的实际索引值，我们必须检查 cellDescriptors 数组中该单元格是否允许展开。如果它允许展开，且当前处于折叠状态时，我们将指示（我们将使用一个 flag 标志位）这个单元格必须展开，反之这个单元格必须折叠：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> shouldExpandAndShowSubRows = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpanded"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">false</span> &#123;</span><br><span class="line">            <span class="comment">// In this case the cell should expand.</span></span><br><span class="line">            shouldExpandAndShowSubRows = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦上面的 flag 标志位设置为相应值，指示当前单元格的展开状态，这时候我们有责任将标志位值保存到单元格描述集合中，即更新 cellDescriptors 数组。我们要为选中的单元格更新 “isExpanded” 属性<br>，这样在随后的点击中它都能正常运行（当它处于展开时点击折叠，当折叠时点击展开）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> shouldExpandAndShowSubRows = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpanded"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">false</span> &#123;</span><br><span class="line">            shouldExpandAndShowSubRows = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        cellDescriptors[indexPath.section][indexOfTappedRow].setValue(shouldExpandAndShowSubRows, forKey: <span class="string">"isExpanded"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此刻，这里还有一个相当重要的细节不容我们忽视：如果你还记得，前文中指定了一个名为“isVisible”的属性表明单元格的显示状态，就存在于单元格的描述中。该属性必须随着上文 flag 值改变而改变，所以当单元格展开时，显示其他附加的不可见行，反之当单元格折叠时，隐藏那些附加行。实际上，通过更改该属性的值我们实现了单元格展开和折叠的效果。所以一旦点击了顶级单元格，需要立即更新附加单元格的信息，以下是修改后的代码片段：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> shouldExpandAndShowSubRows = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpanded"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">false</span> &#123;</span><br><span class="line">            shouldExpandAndShowSubRows = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        cellDescriptors[indexPath.section][indexOfTappedRow].setValue(shouldExpandAndShowSubRows, forKey: <span class="string">"isExpanded"</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (indexOfTappedRow + <span class="number">1</span>)...(indexOfTappedRow + (cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"additionalRows"</span>] <span class="keyword">as</span>! <span class="type">Int</span>)) &#123;</span><br><span class="line">            cellDescriptors[indexPath.section][i].setValue(shouldExpandAndShowSubRows, forKey: <span class="string">"isVisible"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们距离追寻已久的功能实现仅一步之遥，但是我们首先必须关注一个更重要的事情：在上面代码片段中，我们仅改变了一些单元格的“isVisible”属性值，这意味着所有可见行的总数也随之改变了。所以，在我们重载 tableview 之前，我们必须重新向应用询问可见行的索引值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> shouldExpandAndShowSubRows = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpanded"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">false</span> &#123;</span><br><span class="line">            shouldExpandAndShowSubRows = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        cellDescriptors[indexPath.section][indexOfTappedRow].setValue(shouldExpandAndShowSubRows, forKey: <span class="string">"isExpanded"</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (indexOfTappedRow + <span class="number">1</span>)...(indexOfTappedRow + (cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"additionalRows"</span>] <span class="keyword">as</span>! <span class="type">Int</span>)) &#123;</span><br><span class="line">            cellDescriptors[indexPath.section][i].setValue(shouldExpandAndShowSubRows, forKey: <span class="string">"isVisible"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    getIndicesOfVisibleRows()</span><br><span class="line">    tblExpandable.reloadSections(<span class="type">NSIndexSet</span>(index: indexPath.section), withRowAnimation: <span class="type">UITableViewRowAnimation</span>.<span class="type">Fade</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正如你看见的那样，我仅对属于点击单元格的 section 部分进行动画重载，倘若你不喜欢这种方式的话，可以自己来实现。</p>
<p>现在快启动应用试试。点击顶级单元格进行展开和折叠，和子单元格互动下，尽管啥都不会发生，但是结果看起来相当棒！</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_7_expand_collapse.gif" alt=""></p>
<h3 id="取值">取值</h3><p>从现在开始，我们将把注意力完全集中在处理数据输入以及用户与子单元格内的控件的交互上。首先我们将为那些标识符为 “idCellValuePicker” 的单元格实现逻辑事务，处理点击事件。在我们的演示应用中，这些单元格都属于 tableview 中的 “Preferences” 部分，罗列最喜欢的运动和颜色选项内容。即使早前已经提及过，但是我觉得还是有必要重新让你回忆下，再次重申：当你点击选择某个选项后，相应的顶级单元格应该随之折叠（隐藏那些选项），并将选中的值显示到顶级单元格中。<br>。</p>
<p>我之所以选择处理这种类型的单元格为先，原因在于我可以继续在上部分的 tableview 代理方法中进行工作。方法中，我们将添加一个 <code>else</code> 分支处理 non-expandable 单元格的情况，接着检查点击单元格的标识符。如果标识符为“idCellValuePicker”，这就是我们感兴趣的单元格。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellValuePicker"</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    getIndicesOfVisibleRows()</span><br><span class="line">    tblExpandable.reloadSections(<span class="type">NSIndexSet</span>(index: indexPath.section), withRowAnimation: <span class="type">UITableViewRowAnimation</span>.<span class="type">Fade</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>if</code> 分支内，我们将执行四种不同的任务：</p>
<ol>
<li>首先，我们需要找到顶级单元格的行索引值，即你点击选中的单元格的“父母”。事实上，我们采用自下而上（即从点击选中的单元格开始向上遍历）的方式对单元格描述数组执行一次搜索，首个属性<code>isExpandable = true</code>的单元格就是我们想要的家伙。</li>
<li>接着，将顶级单元格中的 textLabel 标签值设置为选中单元格的值。</li>
<li>然后，设置顶级单元格的 isExpanded 等于 false ，即折叠状态。</li>
<li>最后，标记顶级单元格下的所有子单元格为不可见状态。</li>
</ol>
<p>现在代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> indexOfTappedRow = visibleRowsPerSection[indexPath.section][indexPath.row]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> cellDescriptors[indexPath.section][indexOfTappedRow][<span class="string">"cellIdentifier"</span>] <span class="keyword">as</span>! <span class="type">String</span> == <span class="string">"idCellValuePicker"</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> indexOfParentCell: <span class="type">Int</span>!</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 任务一</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">var</span> i=indexOfTappedRow - <span class="number">1</span>; i&gt;=<span class="number">0</span>; --i &#123;</span><br><span class="line">                <span class="keyword">if</span> cellDescriptors[indexPath.section][i][<span class="string">"isExpandable"</span>] <span class="keyword">as</span>! <span class="type">Bool</span> == <span class="literal">true</span> &#123;</span><br><span class="line">                    indexOfParentCell = i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 任务二</span></span><br><span class="line">            cellDescriptors[indexPath.section][indexOfParentCell].setValue((tblExpandable.cellForRowAtIndexPath(indexPath) <span class="keyword">as</span>! <span class="type">CustomCell</span>).textLabel?.text, forKey: <span class="string">"primaryTitle"</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 任务三</span></span><br><span class="line">            cellDescriptors[indexPath.section][indexOfParentCell].setValue(<span class="literal">false</span>, forKey: <span class="string">"isExpanded"</span>)</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 任务四</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> (indexOfParentCell + <span class="number">1</span>)...(indexOfParentCell + (cellDescriptors[indexPath.section][indexOfParentCell][<span class="string">"additionalRows"</span>] <span class="keyword">as</span>! <span class="type">Int</span>)) &#123;</span><br><span class="line">                cellDescriptors[indexPath.section][i].setValue(<span class="literal">false</span>, forKey: <span class="string">"isVisible"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    getIndicesOfVisibleRows()</span><br><span class="line">    tblExpandable.reloadSections(<span class="type">NSIndexSet</span>(index: indexPath.section), withRowAnimation: <span class="type">UITableViewRowAnimation</span>.<span class="type">Fade</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再次修改了单元格中的“isVisible”属性，所有可见行的数量也随之改变。显然调用上述代码中的最后两个函数是非常有必要的。</p>
<p>现在如果你运行应用，实现效果如下：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/09/t45_8_select_preferences.gif" alt=""></p>
<h3 id="Responding_to_Other_User_Actions（求翻译）">Responding to Other User Actions（求翻译）</h3><p>打开 CustomCell.swift 文件，找到 CustomCellDelegate 的协议声明，其中定义了一系列需要的协议方法。通过在 ViewController 类中实现它们，我们将设法使应用程序响应所有缺省的用户操作。</p>
<p>让我们再次回到 ViewController.swift 文件，首先我们需要遵循该协议。定位到类的头部声明行，添加如下内容：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span>, <span class="title">CustomCellDelegate</span></span></span><br></pre></td></tr></table></figure>
<p>接着，在 <code>tableView:cellForRowAtIndexPath:</code> 函数中，我们必须将每个自定义单元格的代理设置为 ViewController 类（即 self）。定位到那里，就在<code>return cell</code> 的上方添加一行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置代理</span></span><br><span class="line">    cell.delegate = <span class="keyword">self</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>干得不错，现在我们开始实现代理方法。首先，我们将 date picker 控件中选中的日期显示到相应顶级单元格中：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">dateWasSelected</span><span class="params">(selectedDateString: String)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dateCellSection = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> dateCellRow = <span class="number">3</span></span><br><span class="line"> </span><br><span class="line">    cellDescriptors[dateCellSection][dateCellRow].setValue(selectedDateString, forKey: <span class="string">"primaryTitle"</span>)</span><br><span class="line">    tblExpandable.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦我们指定了正确的 section 和 row, 直接赋值字符串类型的日期值。注意该字符串是代委托方法中的一个参数。</p>
<p>接着，我们处理有关 switch 控件的事务。当 switch 控件值改变时，我们需要做两件事：首先，将顶级单元格内容设置为结果值（“Single” 或 “Married”），接着更新 cellDescriptor 数组中的 switch 控件值，这样每次 tableview 刷新时它都拥有正确的状态。下面的代码片段中，你会注意我们首次根据 switch 控件状态来确定适当的值，接着将它们赋值给相应属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">maritalStatusSwitchChangedState</span><span class="params">(isOn: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> maritalSwitchCellSection = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> maritalSwitchCellRow = <span class="number">6</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> valueToStore = (isOn) ? <span class="string">"true"</span> : <span class="string">"false"</span></span><br><span class="line">    <span class="keyword">let</span> valueToDisplay = (isOn) ? <span class="string">"Married"</span> : <span class="string">"Single"</span></span><br><span class="line"> </span><br><span class="line">    cellDescriptors[maritalSwitchCellSection][maritalSwitchCellRow].setValue(valueToStore, forKey: <span class="string">"value"</span>)</span><br><span class="line">    cellDescriptors[maritalSwitchCellSection][maritalSwitchCellRow - <span class="number">1</span>].setValue(valueToDisplay, forKey: <span class="string">"primaryTitle"</span>)</span><br><span class="line">    tblExpandable.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是包含了 textField 控件的单元格。此处一旦有 first name 或 last name 输入，我们会动态组合成 full name。出于需要，我们将获取到包含 textField 控件单元格的行索引值，这样就能为 full name 设置给定值了（first name + last name）。最后我们更新顶级单元格内的显示本文内容（full name）和刷新 tableview 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">textfieldTextWasChanged</span><span class="params">(newText: String, parentCell: CustomCell)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> parentCellIndexPath = tblExpandable.indexPathForCell(parentCell)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> currentFullname = cellDescriptors[<span class="number">0</span>][<span class="number">0</span>][<span class="string">"primaryTitle"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> fullnameParts = currentFullname.componentsSeparatedByString(<span class="string">" "</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> newFullname = <span class="string">""</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> parentCellIndexPath?.row == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> fullnameParts.<span class="built_in">count</span> == <span class="number">2</span> &#123;</span><br><span class="line">            newFullname = <span class="string">"<span class="subst">\(newText)</span> <span class="subst">\(fullnameParts[<span class="number">1</span>])</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newFullname = newText</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newFullname = <span class="string">"<span class="subst">\(fullnameParts[<span class="number">0</span>])</span> <span class="subst">\(newText)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cellDescriptors[<span class="number">0</span>][<span class="number">0</span>].setValue(newFullname, forKey: <span class="string">"primaryTitle"</span>)</span><br><span class="line">    tblExpandable.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在 “Work Experience” 部分中，我们处理那些内含 slider 控件的单元格。当用户改变 slider 控件值的同时，我们需要做两件事：<br>首先将顶级单元格中的文本标签内容设置为新的 slider 控件值，接着将 slider 控件值保存到对应的单元格描述中，这样即使刷新 tableview 后，它始终是最新数据。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">sliderDidChangeValue</span><span class="params">(newSliderValue: String)</span></span> &#123;</span><br><span class="line">    cellDescriptors[<span class="number">2</span>][<span class="number">0</span>].setValue(newSliderValue, forKey: <span class="string">"primaryTitle"</span>)</span><br><span class="line">    cellDescriptors[<span class="number">2</span>][<span class="number">1</span>].setValue(newSliderValue, forKey: <span class="string">"value"</span>)</span><br><span class="line"> </span><br><span class="line">    tblExpandable.reloadSections(<span class="type">NSIndexSet</span>(index: <span class="number">2</span>), withRowAnimation: <span class="type">UITableViewRowAnimation</span>.<span class="type">None</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后的缺省代码添加完毕，运行应用。</p>
<h3 id="总结">总结</h3><p>正如一开始我所说的，创建一个可展开的 tableview 有时真的很有用，它可以将你从麻烦中拯救出来，无须再为应用各部分创建一个新的视图控制器。本教程的前部分中，我向你介绍了一种创建可展开的 tableview 的方法，其主要特点是所有单元格的描述都存放在属性列表文件（plist 文件）中。教程中，我向你展示了如何在显示、展开和选中单元格情况下，编写代码处理单元格描述列表；另外，我还向你提供了一种方式来直接更新用户输入的数据。尽管演示应用中的伪造表格在实际应用开发中所有作为，但想要作为一个完整的组件之前，你还需要实现一些功能（比如，把表单描述列表保存到文件中）。不过，这已经超出了我们的教学范畴；一开始我们只想要实现一个可展开的 tableview ，随心所欲地显示或隐藏单元格，最终也得以实现。我确信你会找到本教程<br>的价值。通过已有的代码，你肯定能在此基础上改进，并根据需求使用它。现在留点时间给你；玩得开心，切记学无止境！</p>
<p><strong>参考：</strong> <a href="https://github.com/appcoda/expandable-table-view" target="_blank" rel="external">完整项目代码下载地址.</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：AppCoda，<a href="http://www.appcoda.com/expandable-table-view/">原文链接</a>，原文日期：2015-11-16<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>几乎所有的应用程序都有一个共同的特点：允许用户在多个视图控制器之间导航和协同工作。这些视图控制器应用非常广泛，例如简单显示某些形式的信息到屏幕上，或从用户处收集复杂的输入数据。为了实现一款应用的不同功能，经常需要创建新的视图控制器，且多数任务比较艰巨。不过，倘若你利用<code>expandable tableviews</code>（之后统一译为可展开的 tableview ） ，我们就能避免创建新的视图控制器（以及相关的界面和 storyboard）。</p>]]>
    
    </summary>
    
      <category term="AppCoda" scheme="http://swiftggteam.github.io/tags/AppCoda/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 中的 weak 和 unowned]]></title>
    <link href="http://swiftggteam.github.io/2015/12/02/swift-weak-and-unowned/"/>
    <id>http://swiftggteam.github.io/2015/12/02/swift-weak-and-unowned/</id>
    <published>2015-12-01T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-weak-and-unowned/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-30<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a></p>
</blockquote>
<!--此处开始正文-->
<p>使用 weak 和 unowned 关键字，我们可以避免所谓的循环引用。在这篇文章中，我们将讨论两者之间的差异。</p>
<a id="more"></a> 
<h3 id="何为循环引用？">何为循环引用？</h3><p>我曾在 <a href="http://www.thomashanning.com/a-trick-to-discover-retain-cycles/" target="_blank" rel="external">“A Trick To Discover Retain Cycles”</a> 博客一文中强调了内存管理的重要性，即使 ARC  已经为你分忧解难了：</p>
<p>首先，我们创建两个视图控制器：<code>RootViewController</code> 和 <code>SecondViewController</code>。如果点击了 <code>RootViewController</code> 视图中的按钮，就呈现 <code>SecondViewController</code>。我们可以通过在 storyboard 使用 segue 来简单实现这个目的。另外，我们还创建了一个名为 <code>ModelObject</code> 的类，内含一个类型为 <code>ModelObjectDelegate</code> 的委托对象（译者注：你也可以说这个对象遵循 ModelObjectDelegate 协议）。如果 <code>SecondViewController</code> 的视图加载完毕，当前视图控制器就将自己任命（译者注：即 self）为 <code>ModelObject</code> 的代理。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ModelObject 类内容</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ModelObjectDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> delegate: <span class="type">ModelObjectDelegate</span>?</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SecondViewController 类内容</span></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondViewController</span>: <span class="title">UIViewController</span>, <span class="title">ModelObjectDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> modelObject: <span class="type">ModelObject</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        modelObject = <span class="type">ModelObject</span>()</span><br><span class="line">        modelObject!.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">closeButtonPressed</span><span class="params">(sender: UIButton)</span></span> &#123;</span><br><span class="line">        dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>准备工作完毕，现在来测试下内存管理：首先我们释放掉（dismiss）<code>SecondViewController</code> 视图控制器，你会发现使用内存并未有所下降。这是为什么呢？按照期望应该是释放掉 <code>SecondViewController</code> 对象,内存被释放才对。让我们首先来了解下对象之间的关系。假设 <code>SecondViewController</code> 加载完毕，对象之间关系应该看起来这样：</p>
<p><img src="/img/articles/swift-weak-and-unowned/retainc1.jpg1449449056.5054061" alt=""></p>
<p>现在，释放掉 <code>SecondViewController</code>，看起来应该这样：</p>
<p><img src="/img/articles/swift-weak-and-unowned/retain2c.jpg1449449057.561948" alt=""></p>
<p>如图所示：<code>RootViewController</code> 不再对 <code>SecondViewController</code> 拥有强引用关系。但是 <code>SecondViewController</code> 和 <code>ModelObject</code> 对象之间始终保持相互强引用。所以它们不会被释放掉。</p>
<h3 id="Weak">Weak</h3><p>为了避免这种情况发生，我们可以将引用关系声明为 <code>weak</code> ，它不会阻止 ARC 释放内存。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ModelObjectDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">ModelObjectDelegate</span>?</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在对象关系图应该看起来这样：</p>
<p><img src="/img/articles/swift-weak-and-unowned/retainc3.jpg1449449058.1724997" alt=""></p>
<p>由于 <code>SecondViewController</code> 和 <code>ModelObject</code> 对象之间仅存一个强引用关系，毫无疑问可以成功释放内存。</p>
<h3 id="Unowned">Unowned</h3><p>此外你还可以使用 <code>unowned</code> 关键字替换掉 <code>weak</code>,那么两者的区别在哪里？倘若你使用 <code>weak</code>,属性可以是可选类型，即允许有 <code>nil</code> 值的情况。另一方面，倘若你使用 <code>unowned</code>，它不允许设为可选类型。因为一个 unowned 属性不能为可选类型，那么它必须在 init 方法中初始化值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ModelObjectDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//译者注：swift 要求变量一定要有初始值</span></span><br><span class="line">    <span class="comment">//        可选类型默认初始值为 nil</span></span><br><span class="line">    <span class="keyword">unowned</span> <span class="keyword">var</span> delegate: <span class="type">ModelObjectDelegate</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(delegate:<span class="type">ModelObjectDelegate</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.delegate = delegate</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据属性是否为可选类型，你可以在 <code>weak</code> 和 <code>unowned</code> 之间进行选择。</p>
<h3 id="参考">参考</h3><p><a href="http://www.thomashanning.com/a-trick-to-discover-retain-cycles/" target="_blank" rel="external">A Trick To Discover Retain Cycles</a><br><a href="http://www.thomashanning.com/optionals-in-swift/" target="_blank" rel="external">Optionals In Swift</a><br><a href="https://itunes.apple.com/us/book-series/swift-programming-series/id888896989?mt=11" target="_blank" rel="external">Swift Programming Series (iBook Store)</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-weak-and-unowned/">原文链接</a>，原文日期：2015-11-30<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="https://github.com/Cee">Cee</a></p>
</blockquote>
<!--此处开始正文-->
<p>使用 weak 和 unowned 关键字，我们可以避免所谓的循环引用。在这篇文章中，我们将讨论两者之间的差异。</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xcode:用于管理多个 target 配置的 XCConfig 文件]]></title>
    <link href="http://swiftggteam.github.io/2015/12/01/xcode-xcconfig-files-for-managing-targets-configurations/"/>
    <id>http://swiftggteam.github.io/2015/12/01/xcode-xcconfig-files-for-managing-targets-configurations/</id>
    <published>2015-11-30T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/xcode-xcconfig-files-for-managing-targets-configurations/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-14<br>译者：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<p>让我们来看看 XCConfig 文件如何才能在多个拥有不同配置的 target 中良好地工作。</p>
<p>今天我本计划学习一些新东西，因此我搜索了 <a href="https://github.com/mozilla/firefox-ios" target="_blank" rel="external">mozilla/firefox-ios</a> 库（译者：这是在火狐浏览器在 github 的一个开源项目）的相关信息，接着我发现他们会在项目中使用大量的配置文件。</p>
<a id="more"></a>
<p>我曾经在几个项目中使用过 XCConfig ，但是我并没有在现在开发的项目中使用它。因为这个项目有多个不同配置的 target，因此我开始思考如何才能有效且简单地管理这些 target 。</p>
<h3 id="用例">用例</h3><p>这个项目现在已经被我的团队接手了。客户的团队先开发了大约半年的时间，最后决定将项目完全外包出去。这个项目一个麻烦的事就是 target 有不同的配置，因此如何更好地解决，是个棘手的问题。</p>
<p>项目由十个应用 target 组成，2个总的 target 做些业务，以及一个测试 target 。每一个 target 使用不同的尾部和不同的 “api keys”，以及其他像用于 hockeyapp（HockeyApp 是一个用来分发你的程序并收集应用的崩溃报告的收集框架，类似友盟） token 的键（key）。每一个 target 有自己的预处理宏，如：“TARGET_A”, “TARGET_B”等…（虚构的名字）。然后，token，api keys，后端的 url 被存储在 plist 文件中。因此很自然需要一些类来封装这个文件，并且有语法分析程序以及可以提供给我们适当的键。这个类有超过200行的代码，对我来说仅仅阅读这些数据就要花费很多时间。</p>
<p>因此，我想或许可以使用 XCConfig 文件来简化和替代，而不是使用语法分析程序和十个个预处理宏（一个 target）去决定从 plist 文件应该返回什么值。你可以在下面找到我的解决方案。可能不是最好的方案，但是此刻应该是最好的。如果你有更好的方案，我很愿意去拜读 :)</p>
<h3 id="概述">概述</h3><p>核心思想是使用一些有层级的配置文件。第一层是用于存储最普通的数据，第二层用于区分 debug 和 release 模式，最后一层用于关联特殊 target 的设置。</p>
<p><img src="/img/articles/xcode-xcconfig-files-for-managing-targets-configurations/diagram_1.png1449449060.446657" alt=""></p>
<h3 id="Common-xcconfig">Common.xcconfig</h3><p>这个文件存储着类似应用名称，应用版本，bundle version，以及其他 debug和 release target 中通用的常见配置。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Common.xcconfig</span></span><br><span class="line"><span class="comment">//  &lt;truncated&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="type">APP_NAME</span> = <span class="type">App</span></span><br><span class="line"><span class="type">APP_VERSION</span> = <span class="number">1.6</span></span><br><span class="line"><span class="type">APP_BUNDLE_ID</span> = <span class="number">153</span></span><br></pre></td></tr></table></figure>
<p>考虑到为十个 target 改变相应的应用版本和 bundle 可能会消耗很多时间。其他的选项可能会创建聚合的 target ，这样可以在每次 Cmd+B的时候更新Info-plist 文件，但是我会避免这样的情况并且让项目不会比现在更复杂。</p>
<h3 id="Common-debug_和_Common-release">Common.debug 和 Common.release</h3><p>这个文件能够存储可用于 debug 和 release target 的最常用配置。文件包含 Common.xcconfig 并且能够重写它的变量。例如：你可以通过重写一个变量，轻易地把每个 debug target 的应用名称改为 “App Debug” 。对于存储常见的用于开发和发行版本 target 的 API Key，这里也是很好的地方。</p>
<p><strong>提示：使用通用配置文件和 CocoaPods</strong></p>
<p>如果你使用 CocoaPods，你应该相应地在你的配置文件之一中包括（include）Pods.debug.xcconfig 或者 Pods.release.xcconfig。我推荐先在项目信息标签中设置你的配置文件然后执行 <code>pod install</code> 去让 Pod 项目重新配置。在安装之后，你应该及时地把 Pod 配置文件中的其中一个包括（include）到你自己的文件中去。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Error</span>:</span><br><span class="line">[!] <span class="type">CocoaPods</span> did not <span class="keyword">set</span> the base configuration of your project because your project already has a custom config <span class="keyword">set</span>. <span class="type">In</span> order <span class="keyword">for</span> <span class="type">CocoaPods</span> integration to work at all, please either <span class="keyword">set</span> the base configurations of the target <span class="type">TARGET_NAME</span> to <span class="type">Pods</span>/<span class="type">Target</span> <span class="type">Support</span> <span class="type">Files</span>/<span class="type">Pods</span>/<span class="type">Pods</span>.debug.xcconfig or include the <span class="type">Pods</span>/<span class="type">Target</span> <span class="type">Support</span> <span class="type">Files</span>/<span class="type">Pods</span>/<span class="type">Pods</span>.debug.xcconfig <span class="keyword">in</span> your build configuration.</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Common.debug.xcconfig</span></span><br><span class="line"><span class="comment">//  &lt;truncated&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"Common.xcconfig"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"Pods/Target Support Files/Pods/Pods.debug.xcconfig"</span></span></span><br><span class="line"></span><br><span class="line">APP_NAME = App Debug</span><br><span class="line">API_KEY_A = API_KEY_HERE</span><br><span class="line">API_KEY_B = API_KEY_HERE</span><br></pre></td></tr></table></figure>
<h3 id="PerTarget-xcconfig">PerTarget.xcconfig</h3><p>我确实不需要在这个层级使用 debug/release 配置文件（因为项目中的其他遗留问题），所以我只是用包括适当的 Common.debug.xcconfig 或者 Common.release.xcconfig 的 PerTarget.xcconfig 文件。但是最好应该有 debug 和 release 配置文件。在这个层级，你可以配置关联到特殊 target 的东西。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//&#10;//  Develop.xcconfig&#10;//  &#60;truncated&#62;&#10;//&#10;&#10;#include &#34;Common.debug.xcconfig&#34;&#10;&#10;BACKEND_URL = http:\/\/develop.api.szulctomasz.com&#10;SOME_KEY_A = VALUE_HERE&#10;SOME_KEY_B = VALUE_HERE</span><br></pre></td></tr></table></figure>
<h3 id="访问变量">访问变量</h3><p>所有的配置文件被存储了。现在是时候去使用他们了。像我例子中有这么多的 target，我可以把 Info.plist 文件的数量减少到只有1个，由于所有的不同的地方都已经在 xcconfig 文件中了，所以这一个文件可以替代多个文件。</p>
<p>你可以看到在你通过这些配置文件构建应用之后，有一些值出现在项目的 Build Setting 的 “User-Defined” 部分。</p>
<p>如果你想要使用配置文件中的变量，例如，在一个target的 Info.plist 文件中，你需要使用这种写法：<code>$(VARIABLE)</code>。使用这种方式，你可以设置 “Bundle Identifier” , “Bundle name” , “Bundle version” 以及其他你想要配置的事项。</p>
<p>在代码中访问其他变量看起来有点不一样，我发现最简单的方法就是在 Info.plist 中创建附加的区域，通过使用相同的变量名称和使用上述的写法去设置值。这样你就可以在你的代码中读到这些值。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dictionary = <span class="type">NSBundle</span>.mainBundle().infoDictionary &#123;</span><br><span class="line">    <span class="keyword">let</span> appName = dictionary[<span class="string">"APP_NAME"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> appVersion = dictionary[<span class="string">"APP_VERSION"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> appBuildVersion = dictionary[<span class="string">"APP_BUILD_VERSION"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(appName)</span> <span class="subst">\(appVersion)</span> (<span class="subst">\(appBuildVersion)</span>)"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> backend = (dictionary[<span class="string">"BACKEND_URL"</span>] <span class="keyword">as</span>! <span class="type">String</span>).stringByReplacingOccurrencesOfString(<span class="string">"\\"</span>, withString: <span class="string">""</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"backend: <span class="subst">\(backend)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是 <a href="https://github.com/tomkowz/demo-xcconfig" target="_blank" rel="external">tomkowz/demo-xcconfig</a> 的代码，从里面你可以看到一些使用 xcconfig 文件的例子。</p>
<h3 id="总结">总结</h3><p>Xcode 配置文件给出了配置 target 的简易方式，并且支持方便地维护项目配置。在我用例中，可以很棒地切换到这些文件，因为现在维护项目配置和我没有使用这个解决方案之前比起来简单了很多。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/xcode-xcconfig-files-for-managing-targets-configurations/">原文链接</a>，原文日期：2015-11-14<br>译者：<a href="http://daizi.me">小袋子</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<p>让我们来看看 XCConfig 文件如何才能在多个拥有不同配置的 target 中良好地工作。</p>
<p>今天我本计划学习一些新东西，因此我搜索了 <a href="https://github.com/mozilla/firefox-ios">mozilla/firefox-ios</a> 库（译者：这是在火狐浏览器在 github 的一个开源项目）的相关信息，接着我发现他们会在项目中使用大量的配置文件。</p>]]>
    
    </summary>
    
      <category term="Tomasz Szulc" scheme="http://swiftggteam.github.io/tags/Tomasz-Szulc/"/>
    
      <category term="Xcode" scheme="http://swiftggteam.github.io/categories/Xcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你应该把 Objective-C 的代码转为 Swift 吗？]]></title>
    <link href="http://swiftggteam.github.io/2015/11/30/should-you-migrate-objective-c-code-to-swift/"/>
    <id>http://swiftggteam.github.io/2015/11/30/should-you-migrate-objective-c-code-to-swift/</id>
    <published>2015-11-29T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/should-you-migrate-objective-c-code-to-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-23<br>译者：<a href="http://blog.csdn.net/yake_099" target="_blank" rel="external">Yake</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<h1 id="你应该把_Objective-C_的代码转为_Swift_吗？">你应该把 <code>Objective-C</code> 的代码转为 <code>Swift</code> 吗？</h1><p>未来是 <code>swift</code> 的，但是这就意味着你需要把 <code>Objective-C</code> 的代码都转为 <code>Swift</code> 吗？</p>
<a id="more"></a>
<h2 id="选择一：不转代码坚持使用_Objective-C">选择一：不转代码坚持使用 <code>Objective-C</code></h2><p>乍一看这似乎是最简单的方法了。既然你已经有了一个 <code>Objective-C</code> 编写的项目，继续用OC写下去肯定不是问题。不过。这会产生一些问题：</p>
<p>未来可能不会有很多优秀的 <code>Objective-C</code> 开发者，因为会有许多 <code>iOS</code> 开发者将注意力放在了 <code>Swift</code> 上面。如果你的项目依赖于其他的开发者，未来你想要继续维持纯粹的 <code>Objective-C</code> 的项目恐怕不是一件容易的事儿。</p>
<p>但是即使你自己可以维护一个项目，这种方法也有害处。如果你没有 <code>Swift</code> 方面的实践，你可能会错失许多苹果通过 <code>iOS SDK</code> 引入的最新的开发技术。如果你想跟得上时代的步伐，你不得不学习 <code>Swift</code> 。</p>
<h2 id="选择二：将_Objective-C_的代码转为_Swift">选择二：将 <code>Objective-C</code> 的代码转为 <code>Swift</code></h2><p>这是最激进的一种方法。但是想要将一个完整的项目从 <code>Objective-C</code> 转为 <code>Swift</code> 意味着要写一个新的项目了。虽然 <code>Objective-C</code> 与 <code>Swift</code> 有很好的互操作性，但是他们的编程规范是完全不同的。所以如果你想要将 <code>Objective-C</code> 转为 <code>Swift</code> ，使用错误的编程范式是很危险的。</p>
<p>你还需要投入大量的时间和金钱。所以如果你不打算重写你的项目，这个方法就有点太夸张了。</p>
<h2 id="选择三：将新的代码用_Swift_来写">选择三：将新的代码用 <code>Swift</code> 来写</h2><p>这是一种不错的折中办法。由于 <code>Objective-C</code> 与 <code>Swift</code> 之间的互用性很好，你可以用 <code>Swift</code> 来创建你新的类并让它们与你已有的 <code>Objective-C</code> 的代码交互。</p>
<p>使用这种方法你可以将你的项目一步步转为 <code>Swift</code> 而不需要投入过多的时间和金钱。更多的是这对于学习的过程也是很好的。与其重写一个完整的项目，不如将注意力集中在应用的某些部分。</p>
<p>并且这个方法的风险也小得多。如果采取这种方法你可能会发现自己一点儿都不喜欢 <code>Swift</code> （尽管不太可能会发生这种情况），你完全可以再回到 <code>Objective-C</code> 并且不会损失过多的时间和金钱。</p>
<h2 id="结论">结论</h2><p>虽然有些情况下值得你将 <code>Objective-C</code> 的代码转为 <code>Swift</code> ，但最好的折中的办法就是将新代码用 <code>Swift</code> 来写并与你旧的 <code>Objective-C</code> 的代码进行交互。</p>
<p>参考：<a href="http://www.thomashanning.com/should-you-use-objective-c-or-swift/" target="_blank" rel="external">Should You Use Objective-C or Swift?</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/should-you-migrate-objective-c-code-to-swift/">原文链接</a>，原文日期：2015-11-23<br>译者：<a href="http://blog.csdn.net/yake_099">Yake</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<h1 id="你应该把_Objective-C_的代码转为_Swift_吗？">你应该把 <code>Objective-C</code> 的代码转为 <code>Swift</code> 吗？</h1><p>未来是 <code>swift</code> 的，但是这就意味着你需要把 <code>Objective-C</code> 的代码都转为 <code>Swift</code> 吗？</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实现可打印内容的 try? 和 try!]]></title>
    <link href="http://swiftggteam.github.io/2015/11/27/implementing-printing-versions-of-try-and-try-on-steroids-in-swiftlang/"/>
    <id>http://swiftggteam.github.io/2015/11/27/implementing-printing-versions-of-try-and-try-on-steroids-in-swiftlang/</id>
    <published>2015-11-27T01:20:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/11/05/implementing-printing-versions-of-try-and-try-on-steroids-in-swiftlang/" target="_blank" rel="external">原文链接</a>，原文日期：2015/11/5<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 2 中的<code>try?</code>运算符在可选类型(optionals)和错误处理机制中抛出 error 转换为输出 nil 结果值之间建立了桥接。这样你就可以使用 guard 语句和条件绑定，只关注处理成功的用例(case)。<br><a id="more"></a></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// try? 没有错误输出正确结果值</span></span><br><span class="line"><span class="comment">///      有错误发生，输出nil值</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> foo = <span class="keyword">try</span>? somethingThatMayThrow <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//处理错误情况并退出作用域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>倘若你使用这种方式进行错误处理，需要注意，它并不会返回 error 信息。本文想说的是：抛弃错误信息是一件让人郁闷的事情！为什么不有选择地使用<code>try?</code>和<code>try!</code>来自动建立上下文并打印错误信息呢？</p>
<p>前阵子，我分享了一个模仿<code>try?</code>语句的基础实现，可以保留错误信息。下面的实现首先打印返回的错误，接着继续返回你想要得到的<code>try?</code>的处理结果：结果是一个值或 nil。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">attempt</span><span class="generics">&lt;T&gt;</span><span class="params">(block: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) -&gt; <span class="type">Optional</span>&lt;<span class="type">T</span>&gt;&#123; </span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="keyword">return</span> <span class="keyword">try</span> block() &#125; </span><br><span class="line">    <span class="keyword">catch</span> &#123; <span class="built_in">print</span>(error); <span class="keyword">return</span> <span class="literal">nil</span> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这很有效，尤其是当你想要进一步使用返回值却发现 guard 语句在失败时无法返回错误信息。使用 attemp 函数就可以打印错误信息。举个例子，如果我们要使用 NSFileManager 来删除文件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSFileManager</span>.defaultManager().removeItemAtURL(someURL)</span><br></pre></td></tr></table></figure>
<p>你应该这样做：将上述代码包裹到<code>do-catch</code>的 block 中(略显冗长)，在 attempt 函数中使用<code>try?</code>，接着处理返回 nil 值的情况，或者使用<code>try!</code>忽视所有错误信息(译者注:倘若实际有错误发生，程序会直接崩溃，使用它之前你必须确保不会有错误产生)。</p>
<p>当然这里还有另外一种方式。在文章的最后，我构建了一个 attemptFailable 函数，它把 throwing 声明封装到 guard/try 的迷你打印系统中，后者会返回一个布尔类型值。下面是使用方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="type">NSFileManager</span>.defaultManager().fileExistsAtPath(myPath) &#123;</span><br><span class="line">    <span class="keyword">guard</span> (attemptFailable&#123;<span class="keyword">try</span> <span class="type">NSFileManager</span>.defaultManager()</span><br><span class="line">         .removeItemAtURL(myURL)&#125;) <span class="keyword">else</span> &#123;abort()&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然不是很理想，但是在 playground 中写一些小东西时相当方便，最近我经常使用。(Playground 相当不错，作者书籍<a href="https://itunes.apple.com/us/book/playground-secrets-power-tips/id982838034?mt=11" target="_blank" rel="external">购买链接</a>)。</p>
<p>你可以使用类似的方式增强<code>try!</code>。相比 Swift 的可选值，<code>doOrDie</code>函数提供了更多信息。就像<code>attemp</code>和<code>attemptFailable</code>函数一样，它能够捕获上下文，在继续使用标准<code>try!</code>终止执行前抛出并打印错误。</p>
<p>以下是完整代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;<span class="keyword">let</span> reason: <span class="type">String</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Printing version of try? Call either with standard or autoclosure approach</span><br><span class="line"> </span><br><span class="line"> let contents = attempt&#123;try NSFileManager.defaultManager().contentsOfDirectoryAtPath(fakePath)&#125;</span><br><span class="line"> let contents = attempt&#123;try NSFileManager.defaultManager().contentsOfDirectoryAtPath(XCPlaygroundSharedDataDirectoryURL.path!)&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> - Returns: Optional that is nil when the called closure throws</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">attempt</span><span class="generics">&lt;T&gt;</span><span class="params">(source source: String = <span class="keyword">__FUNCTION__</span>, file: String = <span class="keyword">__FILE__</span>, line: Int = <span class="keyword">__LINE__</span>, closure: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) -&gt; <span class="type">Optional</span>&lt;<span class="type">T</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> closure()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</span><br><span class="line">        <span class="keyword">let</span> report = <span class="string">"Error <span class="subst">\(fileName)</span>:<span class="subst">\(source)</span>:<span class="subst">\(line)</span>:\n    <span class="subst">\(error)</span>"</span></span><br><span class="line">        <span class="built_in">print</span>(report)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> 可以打印内容并返回布尔值的 try? 可选实现</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> let success = attemptFailable&#123;try "Test".writeToFile(fakePath, atomically: true, encoding: NSUTF8StringEncoding)&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> - Returns: Boolean 值，如果被调用的闭包抛出错误返回 false，否则返回 true</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">attemptFailable</span><span class="params">(source source: String = <span class="keyword">__FUNCTION__</span>, file: String = <span class="keyword">__FILE__</span>, line: Int = <span class="keyword">__LINE__</span>, closure: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> closure()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileName = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</span><br><span class="line">        <span class="keyword">let</span> report = <span class="string">"Error <span class="subst">\(fileName)</span>:<span class="subst">\(source)</span>:<span class="subst">\(line)</span>:\n    <span class="subst">\(error)</span>"</span></span><br><span class="line">        <span class="built_in">print</span>(report)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> 另外一个包含更多信息的 try! 版本。shouldCrash 是 false 时，即使有错误抛出，也会继续执行</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> doOrDie(shouldCrash: false, closure: &#123;try "Test".writeToFile(fakePath, atomically: true, encoding: NSUTF8StringEncoding)&#125;)</span><br><span class="line"> // 或</span><br><span class="line"> doOrDie(shouldCrash:false)&#123;try NSFileManager.defaultManager().removeItemAtURL(fakeURL)&#125;</span><br><span class="line"> // 或</span><br><span class="line"> doOrDie&#123;try "Test".writeToFile(fakePath, atomically: true, encoding: NSUTF8StringEncoding)&#125;</span><br><span class="line"> </span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">doOrDie</span><span class="params">(source: String = <span class="keyword">__FUNCTION__</span>,</span><br><span class="line">    file: String = <span class="keyword">__FILE__</span>, line: Int = <span class="keyword">__LINE__</span>, shouldCrash: Bool = <span class="literal">true</span>, closure: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> success = attemptFailable(source: source, file: file, line: line, closure: closure)</span><br><span class="line">        <span class="keyword">if</span> shouldCrash &amp;&amp; !success &#123;<span class="built_in">fatalError</span>(<span class="string">"Goodbye cruel world"</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/11/05/implementing-printing-versions-of-try-and-try-on-steroids-in-swiftlang/">原文链接</a>，原文日期：2015/11/5<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 2 中的<code>try?</code>运算符在可选类型(optionals)和错误处理机制中抛出 error 转换为输出 nil 结果值之间建立了桥接。这样你就可以使用 guard 语句和条件绑定，只关注处理成功的用例(case)。<br>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift：map 和 flatMap 基础入门]]></title>
    <link href="http://swiftggteam.github.io/2015/11/26/swift-map-and-flatmap/"/>
    <id>http://swiftggteam.github.io/2015/11/26/swift-map-and-flatmap/</id>
    <published>2015-11-25T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-map-and-flatmap/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-16<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>借助于 map和flapMap 函数能够很轻易地将数组转换成另外一个新数组。</p>
<a id="more"></a>
<h1 id="Map">Map</h1><p><code>map</code>函数能够被数组调用，它接受一个闭包作为参数，作用于数组中的每个元素。闭包返回一个变换后的元素，接着将所有这些变换后的元素组成一个新的数组。</p>
<p>这听起来有些复杂，但它是相当简单的。想象你拥有一个string类型的数组:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testArray = [<span class="string">"test1"</span>,<span class="string">"test1234"</span>,<span class="string">""</span>,<span class="string">"test56"</span>]</span><br></pre></td></tr></table></figure>
<p><code>map</code>函数的闭包接收一个字符串(类型为<code>string</code>)作为参数，原因在于我们调用函数处理的数组元素类型为<code>String</code>。本例中，我们想要返回一个整型数组，逐个对应字符串元素成员的字符长度。因此闭包的返回类型为<code>Int?</code>.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anotherArray = testArray.<span class="built_in">map</span> &#123; (string:<span class="type">String</span>) -&gt; <span class="type">Int</span>? <span class="keyword">in</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">let</span> length = string.characters.<span class="built_in">count</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">guard</span> length &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> string.characters.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(anotherArray) <span class="comment">//[Optional(5), Optional(8), nil, Optional(6)]</span></span><br></pre></td></tr></table></figure>
<h1 id="FlatMap">FlatMap</h1><p><code>flatMap</code>很像<code>map</code>函数，但是它摒弃了那些值为<code>nil</code>的元素。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anotherArray2 = testArray.flatMap &#123; (string:<span class="type">String</span>) -&gt; <span class="type">Int</span>? <span class="keyword">in</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">let</span> length = string.characters.<span class="built_in">count</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">guard</span> length &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> string.characters.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(anotherArray2) <span class="comment">//[5, 8, 6]</span></span><br></pre></td></tr></table></figure>
<p>另外一个与<code>map</code>函数不同之处在于：倘若元素值不为nil情况下，<code>flapMap</code>函数能够将可选类型(<code>optional</code>)转换为非可选类型(<code>non-optionals</code>)。</p>
<h1 id="引用">引用</h1><p>Image:@ Fly_dragonfly / shutterstock.com</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-map-and-flatmap/">原文链接</a>，原文日期：2015-11-16<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>借助于 map和flapMap 函数能够很轻易地将数组转换成另外一个新数组。</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tvOS 入门：开发你的第一个 tvOS 应用]]></title>
    <link href="http://swiftggteam.github.io/2015/11/25/tvos-introduction/"/>
    <id>http://swiftggteam.github.io/2015/11/25/tvos-introduction/</id>
    <published>2015-11-24T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：gregg mojica，<a href="http://www.appcoda.com/tvos-introduction/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-02<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<p>上月在旧金山举办的苹果发布会中,苹果公司发布了第四代苹果电视。然而，此次更新不同于以往任何版本，苹果新电视将允许用户从 App Store 下载应用和游戏。</p>
<p>这样的声明无疑给开发者打了一剂鸡血。新苹果电视中，位于 Cupertino(译者注:苹果电脑的全球总公司所在地，位于美国旧金山)的巨人介绍了一个新的操作系统，有别于 iOS 系统，新系统名为 tvOS。tvOS 基于 iOS 开发，有少许改动。 我们将使用通用框架和你最喜欢编程语言(当然是 Swift 喽，毫无疑问！)来编写几个简单应用，初步了解 tvOS。</p>
<a id="more"></a>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/IMG_3302-1024x683.jpg" alt="image"></p>
<h2 id="了解_tvOS">了解 tvOS</h2><p>tvOS 基于 iOS 系统开发而成。你使用的许多框架可能都适用于 tvOS。然而，苹果删除了几个 iOS 框架，使得 tvOS 独一无二 (最有名的就是 WebKit)。</p>
<p>苹果支持两种类型的 tvOS 应用程序。第一个是传统的应用程序-这类应用程序会打包代码和图片等等资源。这基本上与 iOS 或 OS X 应用程序一样。tvOS 新增对<strong>client-server(客户端-服务器)</strong>应用的支持，即第二种类型。<strong>client-server</strong>应用程序简单地把服务器请求和网络开发过程集中到应用中来。换句话说，这些应用可以同常见的数据库，服务器等交互。例如，如果你使用 Node.js(一款基于 Chrome V8 引擎开发的 JavaScript 框架)实现了后端，接着你可以考虑使用<strong>client-server</strong>技术，使它更易于管理应用程序(即我们的客户端)和后端(又称之为服务器)。<strong>client-server</strong>应用程序可以直接与 JavaScript 进行交互。然而，由于这些应用程序比较特别，在本教程中我们将不讨论<strong>client-server</strong>应用程序，重点介绍传统应用的开发。</p>
<p>请将这些概念牢记于心，开始我们的教程!</p>
<h2 id="必备条件">必备条件</h2><p>在本教程中，我假设你已经了解常见的 iOS 框架、术语和网络知识。 我将在整个教程中使用 storyboard 进行讲解，希望你知道如何使用 storyboard。同样，我不会对 storyboard 中一些常见的操作做详细深入地讲解(例如改变背景颜色，修改对象尺寸等等)。如果你对 storyboard 还不太了解或者还只是个 iOS 的初学者，我建议你去 AppCoda 教程网站先学习下，再回过头来学习本教程。</p>
<p>开发环境为 Xcode7.1 以上。当然最好还是在苹果电视真机上进行调试(译者表示呵呵)，当然模拟器也足够了。</p>
<h2 id="创建一个新的_tvOS_工程">创建一个新的 tvOS 工程</h2><p>为了开发 tvOS 应用，你必须在你的 Mac 上安装 Xcode7.1。Xcode7.1 内置了 tvOS SDK,除此之外还有 iOS9.1 以及 Swift2.1。</p>
<p>启动 Xcode,创建一个新工程，选中一个新的 tvOS 应用。在右侧面板，选中击 Single View Application 并点击 next。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-10-31-at-11.07.02-PM-1024x732.png" alt="image2"></p>
<p>接着为新应用命名。对于第一个应用来说，我们习惯以一个 Hello World App 作为教程的开始。命名该工程为 HelloWorld，接着点击创建并选择项目存储位置。</p>
<h2 id="Hello,_tvOS">Hello, tvOS</h2><p>由于 tvOS 继承自 iOS，许多你熟悉的 iOS 开发基本概念在 tvOS 中都适用。</p>
<p>在你的 Main.storyboard 文件中，添加一个 button，将 title 修改为“Click Me!”，接着在其下方添加一个标签 label,如下所示：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-10-31-at-11.26.45-PM-1024x558.png" alt="image3"></p>
<p>注意到 tvOS 中的按钮与 iOS 的按钮稍有不同。此外，当你添加多个按钮时，苹果已经允许用户在按钮间无缝切换，比如向右，向左，向上或向下滑动。开发者只需要在 storyboard 中为按钮布局来利用该特性(稍后详述)。</p>
<p>和 iOS 一样，我们通过 control-drag 标签(label)和按钮(button)来创建 IBOutlet 以及 IBAction。这里分别命名 outlet 为 myLabel，IBAction 为 buttonPressed。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-10-31-at-11.32.31-PM-1024x647.png" alt=""></p>
<p>在 buttonPressed 动作中，请键入如下代码行:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.myLabel.text = <span class="string">"Hello,World"</span></span><br></pre></td></tr></table></figure>
<p>你应该很熟悉这行代码了。如果你不熟悉，上述代码实现了点击按钮，为标签(label)的 text 字段赋值”Hello,World”字符串值。</p>
<p>请在模拟器中运行应用。</p>
<p>你可能想要通过鼠标来点击按钮，但与模拟器中的 iOS 应用不同，苹果电视未配备触摸屏，仅仅依靠一个遥控器罢了。因此，单击Hardware &gt;Show Apple TV Remote 或者 Command + Shift + R 快捷键显示遥控器。通过遥控器实现按钮的点击，你的第一个 tvOS 应用就此完成了！<br><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-10-31-at-11.58.52-PM-1024x575.png" alt=""></p>
<h2 id="猜谜游戏_App">猜谜游戏 App</h2><p>接下来,我们将使用现有的 tvOS 知识开发一款简单的猜谜应用。这将是一个非常基本的猜谜应用(只有一个问题),这个迷你项目主要是像你展示按钮和遥控器之间是如何交互的。在接下来的项目中，我们将探索更多有关控制 tvOS 的知识。</p>
<p>再次启动 Xcode，依葫芦画瓢创建一个新的 tvOS 项目。不过请重新命名项目名称。</p>
<p>模仿我下面的布局做一些 storyboard 的基础操作。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-12.14.40-AM-1024x564.png" alt=""></p>
<p>如果你不确定我是如何实现的，下面是我使用的组件的列表:</p>
<ol>
<li>4 个 UIButton，尺寸为 960 X 325</li>
<li>1 个 UILabel，尺寸为 1400 X 120</li>
</ol>
<p>接着为 4 个按钮添加 text 并更改它们的背景颜色，均在 storyboard 完成(任何 iOS 应用都可以这么实现)。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-12.21.16-AM-1024x564.png" alt=""></p>
<p>像以前一样,让我们将这些按钮绑定到代码中。为了代码简洁和易于理解,我将创建 4 个 IBAction(虽然这并不一定是最优雅的解决方案,但它是最简单的)。</p>
<p>将这些按钮逐一连接到 ViewController.swift 文件中(通过拖拉方式创建 IBAction)，暂且命名为 :button0Tapped、button1Tapped、button2Tapped 和 button3Tapped，你可以随时修改这些名称。</p>
<p>上面图片中显示的 label 内容是询问加州的首府是哪个。给出四个选项供你选择(有关加州首都的知识)，答案是 Sacramento。其中 button1Pressed 动作响应 Sacramento 按钮的点击事件。</p>
<p>根据点击的按钮,我们想向用户显示一个警告信息,告知他们选择了正确还是错误的按钮。接着我们创建一个名为 showAlert 的函数来处理这件事,让我们的代码 DRY(DRY 是 Don’t Repeat YourSelf 的缩写，对于软件工程师来说这是惯例用法，确保代码可重用性和可维护性)。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">showAlert</span><span class="params">(status: String, title:String)</span></span> &#123; <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">let</span> alertController = <span class="type">UIAlertController</span>(title: status, message: title, preferredStyle: .<span class="type">Alert</span>) <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"Cancel"</span>, style: .<span class="type">Cancel</span>) &#123; (action) <span class="keyword">in</span> <span class="comment">//3 </span></span><br><span class="line">        &#125;</span><br><span class="line">        alertController.addAction(cancelAction)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> ok = <span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>) &#123; (action) <span class="keyword">in</span></span><br><span class="line">        &#125; <span class="comment">// 4</span></span><br><span class="line">        alertController.addAction(ok)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.presentViewController(alertController, animated: <span class="literal">true</span>) &#123; <span class="comment">// 5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上述函数接受两个参数，一个是用户的输入状态(表面他们回答问题的正确或者错误)，以及警告提示框中要显示的信息或者标题。</p>
<p>第二行创建并初始化一个新的 UIAlertController 对象。第三和第四行代码为 alert 警告框添加一个 cancel 取消按钮和 ok 确认按钮，第五行代码用于呈现这些内容。</p>
<p>如果你不确定这段代码是如何工作的,我强烈建议你先看看<a href="http://www.appcoda.com/uialertcontroller-swift-closures-enum/" target="_blank" rel="external">UIAlertController</a>教程,这里提供了有关该类的详细信息。</p>
<p>现在，请在不同的 IBActions 中调用这个方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button0Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        showAlert(<span class="string">"Wrong!"</span>, title: <span class="string">"Bummer, you got it wrong!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是唯一正确的</span></span><br><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button1Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">    showAlert(<span class="string">"Correct!"</span>, title: <span class="string">"Whoo! That is the correct response"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button2Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">    showAlert(<span class="string">"Wrong!"</span>, title: <span class="string">"Bummer, you got it wrong!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button3Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">    showAlert(<span class="string">"Wrong!"</span>, title: <span class="string">"Bummer, you got it wrong!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正如你所看到的，仅在 button1Tapped 函数中传入“Correct”的标题，剩下都传入“Wrong”。</p>
<p>你的代码应该看起来和下面的代码一样。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button0Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        showAlert(<span class="string">"Wrong!"</span>, title: <span class="string">"Bummer, you got it wrong!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button1Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        showAlert(<span class="string">"Correct!"</span>, title: <span class="string">"Whoo! That is the correct response"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button2Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        showAlert(<span class="string">"Wrong!"</span>, title: <span class="string">"Bummer, you got it wrong!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">button3Tapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        showAlert(<span class="string">"Wrong!"</span>, title: <span class="string">"Bummer, you got it wrong!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">showAlert</span><span class="params">(status: String, title:String)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> alertController = <span class="type">UIAlertController</span>(title: status, message: title, preferredStyle: .<span class="type">Alert</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"Cancel"</span>, style: .<span class="type">Cancel</span>) &#123; (action) <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        alertController.addAction(cancelAction)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> ok = <span class="type">UIAlertAction</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Default</span>) &#123; (action) <span class="keyword">in</span></span><br><span class="line">        &#125;</span><br><span class="line">        alertController.addAction(ok)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.presentViewController(alertController, animated: <span class="literal">true</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在模拟器中运行你的应用。如果一切顺利，你应当会看到类似下面的截图。</p>
<p>单机遥控器，选中 Cupertino 选项</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-12.49.37-AM-1024x552.png" alt=""></p>
<p>你应该看到弹出一个 UIAlertController。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-12.49.27-AM-1024x557.png" alt=""></p>
<p>不幸的是，模拟器并不支持 swiping，因此你可能需要在真机中测试成功的 alert 警告框。不过，你可以在模拟器(遥控)中通过按住 option 键 swipe 选项。在 Apple TV 真机中，你能够在所有按钮中无缝切换。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-12.53.00-AM-1024x575.png" alt=""></p>
<p>恭喜！ 你已经完成了第二个项目。</p>
<h2 id="在_tvOS_中使用_TableViews">在 tvOS 中使用 TableViews</h2><p>在 iOS 操作系统中，苹果大量使用 tableview。事实上，苹果在许多自家应用(包括信息、联系人等)都使用了它。随着 watchOS SDK 的发布，tableview 可用于 Apple Watch 开发。自然地，新的苹果电视和 tvOS 同样支持这个流行的 API。</p>
<p>依葫芦画瓢创建一个新的工程项目，命名为 TableViewPractice。</p>
<p>和先前创建的工程一样，Xcode 默认自动生成 ViewController.swift 文件。请在文件的第 11 行代码处添加如下声明(译者注:就是让 ViewController 遵循两个 tableView 的协议)：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">UITableViewDataSource</span>, <span class="type">UITableViewDelegate</span></span><br></pre></td></tr></table></figure>
<p>第 11 行的代码应该看起来这样:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>由于 Swift 是一门注重安全的语言，编译器会报告说没有遵循 UITableView 的 Datasource 和 Delegate 协议。我们会很快解决这个问题。</p>
<p>接着在 storyboard 中添加一个 tableView 视图并拖拽到 ViewController 文件中生成一个 IBOutlet，将其命名为 tableView。同时在这个 IBOutlet 声明下方新增一个数组。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataArray = [<span class="string">"San Francisco"</span>, <span class="string">"San Diego"</span>, <span class="string">"Los Angeles"</span>, <span class="string">"San Jose"</span>, <span class="string">"Mountain View"</span>, <span class="string">"Sacramento"</span>]</span><br></pre></td></tr></table></figure>
<p>数组囊括了所有我们要在 tableView 显示的元素。</p>
<p>现在请在v iewDidLoad 方法的下方添加如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// section数量</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个section的cell数量    </span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataArray.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 填充每个cell的内容    </span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: .<span class="type">Subtitle</span>, reuseIdentifier: <span class="literal">nil</span>)</span><br><span class="line">        </span><br><span class="line">    cell.textLabel?.text = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.dataArray[indexPath.row])</span>"</span></span><br><span class="line">    cell.detailTextLabel?.text = <span class="string">"Hello from sub title <span class="subst">\(indexPath.row + <span class="number">1</span>)</span>"</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可能发现了，tvOS 中的 tableview 和 iOS 中的 tableView 非常相似。在上面的代码片段中，我们告诉 tableview 有多少行(rows),多少个部分(section)，以及每个单元格要显示的内容。</p>
<p>在 viewDidLoad 方法中，确保你把 tableview 的 delegate 和 datasource 设置为自身 self。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.dataSource = <span class="keyword">self</span></span><br><span class="line"><span class="keyword">self</span>.tableView.delegate = <span class="keyword">self</span></span><br></pre></td></tr></table></figure>
<p>在模拟器中运行应用。</p>
<p>不出意外，你应该看到一个 tableview 出现在界面中。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-9.21.21-AM-1024x567.png" alt=""></p>
<p>现在，我们将在 tableView 的右侧添加一个按钮(UIButton)。在模拟或者真机上构建并运行，Whoo<br>！我们现在可以在按钮和 tableview 之间无缝切换了。</p>
<h2 id="创建一个天气_App">创建一个天气 App</h2><p>在下一个小项目中，我们将开发一个简单的天气应用程序，显示当前的天气预报。在这个项目中，我们将使用非常稳定的天气 API：<strong>forecast.io</strong>，它为包括 Dark Sky 在内许多 iOS 应用提供 API 支持。</p>
<p>首先你需要在 developer.forecast.io 注册一个开发者账号。我们只是测试，免费的 API 调用(1000 次/天)应该足够使用了。</p>
<p>注意下面 url:<br><a href="https://api.forecast.io/forecast/d3250bf407f0579c8355cd39cdd4f9e1/37.7833,122.4167" target="_blank" rel="external">https://api.forecast.io/forecast/d3250bf407f0579c8355cd39cdd4f9e1/37.7833,122.4167</a></p>
<p><strong>forecast/</strong>之后的一串数字(即 d3250bf40…)是 API Key 键值(千万不要将项目的 API Key 透露给别人)；紧跟着 API Key 字符串后的是你想要解析天气数据位置的经度和纬度坐标。我选择 San Francisco，但是你可以通过简单修改经纬坐标值来显示其他地方的天气。</p>
<p>倘若在浏览器中打开该链接，你将注意到反馈数据为 JSON 格式。这是一个 Get请求。在 HTTP 世界中，GET 用于获取和下载数据。</p>
<p>为了理解数据并将其显示到应用中,我们需要解析它。解析 JSON 在 Swift 中一直是一个热议话题。目前有各种各样的 JSON 解析库，诸如 SwiftyJSON、Alamofire 等。它们都是很棒的资源，我强烈建议你先看看。然而，在本教程中我们将使用 NSJSONSerialization，一个 iOS 内置的类。首先，打开 ViewController.swift 文件。<code>didRecieveMemory</code>警告函数在本项目中没有存在的意义，所以删除它吧！</p>
<p>现在，在 ViewDidLoad 中键入如下代码:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://api.forecast.io/forecast/d3250bf407f0579c8355cd39cdd4f9e1/37.7833,122.4167"</span>) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>这里我们使用可选类型声明一个 url 变量。</p>
<p>NSJSONSerialization 需要传入 NSData 进行解析。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: url)&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>接着，在上面 data 花括号作用域中键入如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> parsed = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: <span class="type">NSJSONReadingOptions</span>.<span class="type">AllowFragments</span>) <span class="comment">// 1</span></span><br><span class="line">                    </span><br><span class="line">     <span class="keyword">let</span> newDict = parsed <span class="keyword">as</span>? <span class="type">NSDictionary</span> <span class="comment">// 2</span></span><br><span class="line">     <span class="built_in">print</span>(newDict![<span class="string">"currently"</span>]![<span class="string">"summary"</span>])</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">"A JSON parsing error occurred, here are the details:\n <span class="subst">\(error)</span>"</span>) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们把 NSJSONSerialization 对象包裹在 do-catch 语句中。你可能对 do 语句不太了解，这是 Swift 2 中的新特性。Do-Catch 语句是一个新的改进性错误处理机制。Do-Catch 语句的使用方式如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> expression <span class="comment">// 不是必要的内容</span></span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">catch</span> pattern <span class="number">1</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">catch</span> pattern <span class="number">2</span> <span class="keyword">where</span> condition &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第一行代码中，我们设定了一个 NSJSONSerialization 对象，并传入 data 对象。注意，对象(parsed)在使用之前必须先转换成一个 NSDictionary 字典。</p>
<p>接着，在第二行代码中，我们指定一个名为 newDict 的变量并使用<code>as</code>关键字将其转换 NSDictionary。</p>
<p>最后，在第三行代码中，我们捕获任何错误并打印到终端中。</p>
<p>你的整个 ViewController 文件应该类似于下面的代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"https://api.forecast.io/forecast/d3250bf407f0579c8355cd39cdd4f9e1/37.7833,122.4167"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: url)&#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> parsed = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: <span class="type">NSJSONReadingOptions</span>.<span class="type">AllowFragments</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">let</span> newDict = parsed <span class="keyword">as</span>? <span class="type">NSDictionary</span></span><br><span class="line">                    <span class="built_in">print</span>(newDict![<span class="string">"currently"</span>]![<span class="string">"summary"</span>])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"A JSON parsithng error occurred, here are the details:\n <span class="subst">\(error)</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检查终端输出。你应该看到一个包裹了值的可选类型(你得到的值应该稍有不同，会根据不同的地理位置和天气来显示)。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-11.21.02-AM1.png" alt=""></p>
<p>现在我们将一些 UILabel 链接到应用中。拖拽两个 UILabel，一个叫 currentTemp，另一个叫 currentSummary。仔细看下 forecast 的 API，你会注意到它返回当前天气温度以及天气的概况(当然还有其他数据)。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-12.26.11-PM-1024x565.png" alt=""></p>
<p>在 newDict 变量下面放置如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.currentTemp.text = <span class="string">"<span class="subst">\(newDict!["currently"]!["temperature"]!!)</span>"</span></span><br><span class="line"><span class="keyword">self</span>.currentSummary.text = <span class="string">"<span class="subst">\(newDict!["currently"]!["summary"]!!)</span>"</span></span><br></pre></td></tr></table></figure>
<p>代码实现了获取天气数据并正确显示到界面。每一行语句最后都使用了双重叹号符号(!!)，用于强制解包 JSON 数据(否则它将被包裹到 Optional 中)。</p>
<p>在模拟器中构建并运行。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/10/Screen-Shot-2015-11-01-at-11.41.44-AM-1024x549.png" alt=""></p>
<p>干的不错！你已经完成了天气预报项目！</p>
<h2 id="其他_tvOS_特性">其他 tvOS 特性</h2><p>我们只不过接触了点 tvOS 的皮毛。正如你所知道的，tvOS 建立在各种 iOS API 之上。但是，许多框架已经从 tvOS 中移除了。完整列表请看这篇<a href="https://developer.apple.com/library/prerelease/tvos/releasenotes/General/tvOS90APIDiffs/" target="_blank" rel="external">文章</a>。</p>
<p>除此之外，tvOS 的基础是焦点事件(按钮、单元格、标签等在选中状态时会凸显出来，此时为聚焦状态)。幸运的是，系统自动处理大多数聚焦事件。只要你使用了 storyboard，默认会自动聚焦。你可以在谷歌中找到一些聚焦<a href="https://www.google.com/search?sourceid=chrome-psyapi2&amp;ion=1&amp;espv=2&amp;ie=UTF-8&amp;q=tvOS%20focus&amp;oq=tvOS%20focus&amp;aqs=chrome..69i57j0l4j69i60.2140j0j7" target="_blank" rel="external">API</a>。</p>
<p>正如教程开始所提到的，苹果支持 client-server 应用。这些应用使用 TVML、TVJS 以及 TVMLKit，它们的基础是当下最为流行的 web 技术(HTML、JavaScript 等)。</p>
<p>当前需要考虑的最大挑战是创建的 tvOS 应用中，SDK 并不支持数据持久化存储。这是和 iOS 不同，你不能保存任何大小超过 1MB 的照片、图标等内容。因此你必须配备一个后端服务，如 CloudKit、Parse、iCloud 等。建议你先了解下 tvOS 中对资源的需求(之前我写的<a href="http://www.appcoda.com/app-thinning/" target="_blank" rel="external">App 瘦包教程</a>)。此外，应用大小限制在 200MB 以内。</p>
<p>显然，tvOS 应用中有太多限制条件，我们需要多加小心。</p>
<h3 id="总结">总结</h3><p>在本教程中我们大致了解了 tvOS 以及它的各种特性。通过四个例子项目我们看到了 tvOS 的强大之处，当然还有局限性。tvOS 与 iOS 共享许多相似之处，但一些iOS框架却已经被移除了。</p>
<p><a href="https://www.dropbox.com/sh/83i9ahb3nabc698/AAAJ00LBMDEnbJWPy2gF3Iyza?dl=0" target="_blank" rel="external">这里</a>提供了完整的项目文件。</p>
<p>在项目一中，我们实现了一个 hello，world 应用程序；随后项目二中实现了简单的猜谜游戏应用，向你展示聚焦引擎；项目三详细介绍了在 tvOS 中如何使用 tableView；最后，我们结合已有知识在项目四中构建了一个简单的天气应用程序，可以从互联网上下载天气数据。</p>
<p>苹果的 tvOS 应用商店于上周推出，授权世界各地的开发者分享他们的作品。</p>
<p>你将作为见证者，看到 tvOS 和新的苹果电视永久性地改变 TV 行业！</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：gregg mojica，<a href="http://www.appcoda.com/tvos-introduction/">原文链接</a>，原文日期：2015-11-02<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<p>上月在旧金山举办的苹果发布会中,苹果公司发布了第四代苹果电视。然而，此次更新不同于以往任何版本，苹果新电视将允许用户从 App Store 下载应用和游戏。</p>
<p>这样的声明无疑给开发者打了一剂鸡血。新苹果电视中，位于 Cupertino(译者注:苹果电脑的全球总公司所在地，位于美国旧金山)的巨人介绍了一个新的操作系统，有别于 iOS 系统，新系统名为 tvOS。tvOS 基于 iOS 开发，有少许改动。 我们将使用通用框架和你最喜欢编程语言(当然是 Swift 喽，毫无疑问！)来编写几个简单应用，初步了解 tvOS。</p>]]>
    
    </summary>
    
      <category term="AppCoda" scheme="http://swiftggteam.github.io/tags/AppCoda/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
      <category term="Apple TV 开发" scheme="http://swiftggteam.github.io/categories/Apple-TV-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用闭包初始化来加速 Swift 的 playground]]></title>
    <link href="http://swiftggteam.github.io/2015/11/24/speeding-up-swift-playgrounds-with-closure-initialization-swiftlang/"/>
    <id>http://swiftggteam.github.io/2015/11/24/speeding-up-swift-playgrounds-with-closure-initialization-swiftlang/</id>
    <published>2015-11-23T16:00:00.000Z</published>
    <updated>2015-12-18T08:30:16.601Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/11/15/speeding-up-swift-playgrounds-with-closure-initialization-swiftlang/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-15<br>译者：<a href="undefined">JackAlan</a>；校对：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 的 Playground 可能会莫名其妙地变慢，尤其当你使用 SpriteKit 或 SceneKit 时。尽可能的把代码迁移到外部资源文件中，可以优化编译并获得更好的运行时速度。</p>
<a id="more"></a>
<p>这种方法的最大问题在于，你会因此失去在 Playground 中的线性流 <code>linear flow</code>。模块编译不支持修改变量的顶层指令。比如，你有类似如下的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">let</span> lightNode = <span class="type">SCNNode</span>()</span><br><span class="line">lightNode.light = <span class="type">SCNLight</span>()</span><br><span class="line">lightNode.light!.type = <span class="type">SCNLightTypeOmni</span></span><br><span class="line">lightNode.position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: <span class="number">10</span>, z: <span class="number">10</span>)</span><br><span class="line">scnscene.rootNode.addChildNode(lightNode)</span><br></pre></td></tr></table></figure>
<p>(我很抱歉使用强制解包，但是这是来自苹果的示例代码。)</p>
<p>你不能将这些代码直接移到一个模块文件中，因为你使用的是顶级调用，这些代码不会在外部 Swift 文件中被编译。你可能会把这些代码放在一个函数里，来作为一种变通的方法，例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="func"><span class="keyword">func</span> <span class="title">setupLightNode</span><span class="params">()</span></span> -&gt; <span class="type">SCNNode</span> &#123;</span><br><span class="line"><span class="keyword">let</span> theLight = <span class="type">SCNNode</span>()</span><br><span class="line">theLight.light = <span class="type">SCNLight</span>()</span><br><span class="line">theLight.light!.type = <span class="type">SCNLightTypeOmni</span></span><br><span class="line">theLight.position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: <span class="number">10</span>, z: <span class="number">10</span>)</span><br><span class="line">scnscene.rootNode.addChildNode(theLight)</span><br><span class="line"><span class="keyword">return</span> theLight</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后你可以在声明后调用该函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lightNode = setupLightNode()</span><br></pre></td></tr></table></figure>
<p>这挫爆了，这种方式创建了一个不必要的额外函数，而且它强制让你在一个新的实例被声明前去处理这个实例。</p>
<p>闭包提供了一种更吸引人、相对轻量的解决方案。正如下面你将看到的样例。在这里，将初始化的代码打包在一个单独的组中，执行并最终返回完全初始化的实例。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create and add a light to the scene</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">let</span> lightNode: <span class="type">SCNNode</span> = &#123;</span><br><span class="line">  <span class="keyword">let</span> theLight = <span class="type">SCNNode</span>()</span><br><span class="line">  theLight.light = <span class="type">SCNLight</span>()</span><br><span class="line">  theLight.light!.type = <span class="type">SCNLightTypeOmni</span></span><br><span class="line">  theLight.position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: <span class="number">10</span>, z: <span class="number">10</span>)</span><br><span class="line">  scnscene.rootNode.addChildNode(theLight)</span><br><span class="line">  <span class="keyword">return</span> theLight</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>这种方法使你可以使用单独的语句来创建和初始化一个对象，保留你在 Playground 中声明的流动性和可读性，而且运行的会更快一点。</p>
<p>这个<a href="https://vid.me/BrPC" target="_blank" rel="external">视频</a>包含了这次 lightNode 的代码与其他设置操作。在点击 Playground 的 “运行” 按钮后，只花了 3-4 秒，而不像此前的数分钟。这种加速方法对于建立以 SpriteKit 和 SceneKit 为元素的原型，在部署到实际的应用前，变得更有实际意义。</p>
<p><strong>更新</strong>：如下是另外一种可以建立类实例的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> •-&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare class instance</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> •-&gt; <span class="generics">&lt;T&gt;</span><span class="params">(object: T, f: <span class="params">(T)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">  f(object)</span><br><span class="line">  <span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;<span class="keyword">var</span> (x, y, z) = (<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>)&#125;</span><br><span class="line"><span class="keyword">let</span> myInstance = <span class="type">MyClass</span>() •-&gt; &#123;</span><br><span class="line"> $<span class="number">0</span>.x = <span class="string">"NewX"</span></span><br><span class="line"> $<span class="number">0</span>.y = <span class="string">"NewY"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不知你意下如何？</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/11/15/speeding-up-swift-playgrounds-with-closure-initialization-swiftlang/">原文链接</a>，原文日期：2015-11-15<br>译者：<a href="undefined">JackAlan</a>；校对：<a href="http://weibo.com/linusling">小铁匠Linus</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>Swift 的 Playground 可能会莫名其妙地变慢，尤其当你使用 SpriteKit 或 SceneKit 时。尽可能的把代码迁移到外部资源文件中，可以优化编译并获得更好的运行时速度。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
