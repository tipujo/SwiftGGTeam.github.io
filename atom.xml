<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SwiftGG]]></title>
  <subtitle><![CDATA[走心的 Swift 翻译组]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://swiftggteam.github.io/"/>
  <updated>2016-01-06T03:05:17.016Z</updated>
  <id>http://swiftggteam.github.io/</id>
  
  <author>
    <name><![CDATA[SwiftGG]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在 Target-Action 中使用响应链]]></title>
    <link href="http://swiftggteam.github.io/2016/01/06/utilize-the-responder-chain-for-target-action/"/>
    <id>http://swiftggteam.github.io/2016/01/06/utilize-the-responder-chain-for-target-action/</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：dom，<a href="http://swiftandpainless.com/utilize-the-responder-chain-for-target-action/" target="_blank" rel="external">原文链接</a>，原文日期：2016/1/1<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="http://www.brighttj.com" target="_blank" rel="external">saitjr</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>本文会介绍 iOS 的响应链以及如何在 Target-Action 中使用它。</p>
<h2 id="响应链（The_Responder_Chain）">响应链（The Responder Chain）</h2><p>在 iOS 中，事件（比如，触摸事件（touch event））都使用响应链来传递。响应链由响应者对象（Responder Objects，<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW1" target="_blank" rel="external">苹果官方术语</a>）构成。如果你看过官方文档，可能会注意到 <code>UIView</code> 和 <code>UIViewController</code> 都是响应者对象。这就意味着， <code>UIView</code> 和 <code>UIViewController</code> 都继承自 <code>UIResponder</code> ，如下图：</p>
<p><img src="/img/articles/utilize-the-responder-chain-for-target-action/UIViewDocumentation.png1452047417.154566" alt=""></p>
<a id="more"></a>
<p>当用户点击了视图层级（view hierarchy）中的一个 view 时，iOS 会通过点击测试（hit test）来判定哪个响应者对象优先响应触摸事件。这个过程从最底层的 window 开始，沿着视图层级向上寻找并检查这个 touch 是不是发生在当前 view 边界内。该过程中被点击的最后一个 view 会先收到触摸事件。如果该 view 没有对触摸事件做出反应，触摸事件就会沿着响应链传递到下一个响应者。苹果的官方<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW4" target="_blank" rel="external">示例</a>很好的解释了这个过程。如果 view 告诉 iOS 它没有被点击，那它的子视图就不会被检查。</p>
<p>这就会产生一个有趣的事情。当一个正常显示（父视图的 <code>clipsToBounds</code> 被设置为 <code>false</code> 时）的按钮位于父视图边界外时，该按钮不会接收到任何的触摸事件。因此，当一个按钮不能响应事件时，记得检查一下该按钮是否有在父视图的边界内。</p>
<h2 id="Target-Action">Target-Action</h2><p>Target-Action 机制通过设置 <code>target</code> 为 <code>nil</code>来使用响应链。事件触发时，iOS 会询问第一响应者是否要处理传递过来的 action。如果不处理的话，第一响应者就会把该 action 传递给下一个响应者（<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIResponder_Class/index.html#//apple_ref/occ/instm/UIResponder/nextResponder" target="_blank" rel="external">苹果官方文档 <code>nextResponder</code> </a>）。</p>
<h2 id="举个例子">举个例子</h2><p>让我们来举个例子吧。我们的 view controller 中有一个 view ，里面有一个 button 和一个 label 。我们可以在 <code>viewDidLoad</code> 中把 view controller 设置为 <code>target</code> 来相应按钮的点击事件，像这样 <code>subview.button.addTarget(self, action: &quot;onButtonTap:&quot;, forControlEvents: .TouchUpInside)</code> 。但是，我们也可以把 <code>target</code> 设置为 <code>nil</code>，然后就可以使用响应链了。以下是初始化并添加 button 和 label 的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewWithButtonAndLabel</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> button: <span class="type">UIButton</span></span><br><span class="line">    <span class="keyword">let</span> label: <span class="type">UILabel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        label = <span class="type">UILabel</span>()</span><br><span class="line">        label.textAlignment = .<span class="type">Center</span></span><br><span class="line">        label.text = <span class="string">"Touch the button"</span></span><br><span class="line"></span><br><span class="line">        button = <span class="type">UIButton</span>(type: .<span class="type">System</span>)</span><br><span class="line">        button.setTitle(<span class="string">"The Button"</span>, forState: .<span class="type">Normal</span>)</span><br><span class="line">        button.addTarget(<span class="literal">nil</span>, action: <span class="string">"onButtonTap:"</span>, forControlEvents: .<span class="type">TouchUpInside</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> stackView = <span class="type">UIStackView</span>(arrangedSubviews: [label, button])</span><br><span class="line">        stackView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        stackView.axis = .<span class="type">Vertical</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line"></span><br><span class="line">        backgroundColor = .yellowColor()</span><br><span class="line"></span><br><span class="line">        addSubview(stackView)</span><br><span class="line"></span><br><span class="line">        stackView.centerXAnchor.constraintEqualToAnchor(centerXAnchor).active = <span class="literal">true</span></span><br><span class="line">        stackView.centerYAnchor.constraintEqualToAnchor(centerYAnchor).active = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>button.addTarget(nil, action: &quot;onButtonTap:&quot;, forControlEvents: .TouchUpInside)</code> 这行代码中，将按钮的 <code>target</code> 设置为 <code>nil</code> 。如之前描述的那样，这就意味着 action 会沿着响应链向下传递，直到一个响应者对象处理该 action 为止。</p>
<p>以下是 view controller 的部分代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> viewWithButtonAndLabel = <span class="type">ViewWithButtonAndLabel</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        view.backgroundColor = .whiteColor()</span><br><span class="line"></span><br><span class="line">        view.addSubview(viewWithButtonAndLabel)</span><br><span class="line"></span><br><span class="line">        viewWithButtonAndLabel.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> views = [<span class="string">"subView"</span>: viewWithButtonAndLabel]</span><br><span class="line">        <span class="keyword">var</span> layoutConstraints = [<span class="type">NSLayoutConstraint</span>]()</span><br><span class="line">        layoutConstraints += <span class="type">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class="string">"|-20-[subView]-20-|"</span>, options: [], metrics: <span class="literal">nil</span>, views: views)</span><br><span class="line">        layoutConstraints += <span class="type">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class="string">"V:|-20-[subView]-20-|"</span>, options: [], metrics: <span class="literal">nil</span>, views: views)</span><br><span class="line">        <span class="type">NSLayoutConstraint</span>.activateConstraints(layoutConstraints)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">onButtonTap</span><span class="params">(sender: UIButton)</span></span> &#123;</span><br><span class="line">        viewWithButtonAndLabel.label.text = viewWithButtonAndLabel.label.text == <span class="string">"Yeah!"</span> ? <span class="string">"Touch the button"</span> : <span class="string">"Yeah!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即使我们没有明确的设置 <code>target</code> ，当点击按钮的时候，view controller 里的 <code>onButtonTap(_:)</code> 也会被调用，因为它是第一响应者，且实现了相应的处理。</p>
<p>你可以去 GitHub 上查看本文的<a href="https://github.com/dasdom/ResponderChainDemo" target="_blank" rel="external">示例代码</a>。</p>
<h2 id="结论">结论</h2><p>响应链是你的好朋友，试着去了解它。还要多读文档，学习如何使用响应链，让你的代码更牛。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：dom，<a href="http://swiftandpainless.com/utilize-the-responder-chain-for-target-action/">原文链接</a>，原文日期：2016/1/1<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="http://www.brighttj.com">saitjr</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>本文会介绍 iOS 的响应链以及如何在 Target-Action 中使用它。</p>
<h2 id="响应链（The_Responder_Chain）">响应链（The Responder Chain）</h2><p>在 iOS 中，事件（比如，触摸事件（touch event））都使用响应链来传递。响应链由响应者对象（Responder Objects，<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW1">苹果官方术语</a>）构成。如果你看过官方文档，可能会注意到 <code>UIView</code> 和 <code>UIViewController</code> 都是响应者对象。这就意味着， <code>UIView</code> 和 <code>UIViewController</code> 都继承自 <code>UIResponder</code> ，如下图：</p>
<p><img src="/img/articles/utilize-the-responder-chain-for-target-action/UIViewDocumentation.png1452047417.154566" alt=""></p>]]>
    
    </summary>
    
      <category term="Swift and Painless" scheme="http://swiftggteam.github.io/tags/Swift-and-Painless/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 unwind segue 而不是 delegate 模式传递回调数据]]></title>
    <link href="http://swiftggteam.github.io/2016/01/05/ios-passing-data-back-using-unwind-segue-instead-of-delegate-pattern/"/>
    <id>http://swiftggteam.github.io/2016/01/05/ios-passing-data-back-using-unwind-segue-instead-of-delegate-pattern/</id>
    <published>2016-01-04T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/ios-passing-data-back-using-unwind-segue-instead-of-delegate-pattern/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-6<br>译者：<a href="http://www.dianqk.org/" target="_blank" rel="external">靛青K</a>；校对：<a href="undefined">Channe</a>；定稿：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a></p>
</blockquote>
<!--此处开始正文-->
<blockquote>
<p>这是一个不使用 delegate 模式传递回调数据的好方法。</p>
</blockquote>
<p>我今天注意到这个小技巧，值得和你分享一下。</p>
<a id="more"></a>
<p>通常当我们创建一个视图控制器作为 picker 时，它会从屏幕的底部出现，覆盖在当前页面上，并且仅只占屏幕的一部分。当选择一个值后，就通过 delegate 模式返回回来。代码大概就像这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">AnimalPickerViewControllerDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> label: <span class="type">UILabel</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">prepareForSegue</span><span class="params">(segue: UIStoryboardSegue, sender: AnyObject?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> segue.identifier == <span class="string">"ShowAnimalPicker"</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickerVC = segue.destinationViewController <span class="keyword">as</span>! <span class="type">AnimalPickerViewController</span></span><br><span class="line">            pickerVC.delegate = <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">animalPicker</span><span class="params">(picker: AnimalPickerViewController, didSelectAnimal animal: String)</span></span> &#123;</span><br><span class="line">        label.text = animal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">AnimalPickerViewControllerDelegate</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">animalPicker</span><span class="params">(picker: AnimalPickerViewController, didSelectAnimal animal: String)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalPickerViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">AnimalPickerViewControllerDelegate</span>?</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">dogButtonPressed</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        selectAnimal(<span class="string">"Dog"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">catButtonPressed</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        selectAnimal(<span class="string">"Cat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">snakeButtonPressed</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        selectAnimal(<span class="string">"Snake"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">selectAnimal</span><span class="params">(animal: String)</span></span> &#123;</span><br><span class="line">        delegate?.animalPicker(<span class="keyword">self</span>, didSelectAnimal: animal)</span><br><span class="line">        dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于是就像你看到的，我使用了 segue 去弹出这个 picker 视图控制器，但我使用了 delegate 模式获取返回的数据值。</p>
<p>今天我认识到在这种情况下，使用 unwind segue 更合适。我没有必要使用 delegate 模式。并且代码是这个样子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> label: <span class="type">UILabel</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">performUnwindSegue</span><span class="params">(segue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> segue.identifier == <span class="type">AnimalPickerViewController</span>.<span class="type">UnwindSegue</span> &#123;</span><br><span class="line">            label.text = (segue.sourceViewController <span class="keyword">as</span>! <span class="type">AnimalPickerViewController</span>).selectedAnimal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalPickerViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">UnwindSegue</span> = <span class="string">"UnwindAnimalPicker"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> selectedAnimal: <span class="type">String</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">dogButtonPressed</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        selectAnimal(<span class="string">"Dog"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">catButtonPressed</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        selectAnimal(<span class="string">"Cat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">snakeButtonPressed</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">        selectAnimal(<span class="string">"Snake"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">selectAnimal</span><span class="params">(animal: String)</span></span> &#123;</span><br><span class="line">        selectedAnimal = animal</span><br><span class="line">        performSegueWithIdentifier(<span class="type">AnimalPickerViewController</span>.<span class="type">UnwindSegue</span>, sender: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>是不是更好一些？对于我来说，在这种特别的情况时，的确更好。希望对你有一些帮助！</p>
<p>（译者注：关于 Unwind Segue 的使用，需要注意的几点。我们最好先将下面的代码写上：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">performUnwindSegue</span><span class="params">(segue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> segue.identifier == <span class="type">AnimalPickerViewController</span>.<span class="type">UnwindSegue</span> &#123;</span><br><span class="line">        label.text = (segue.sourceViewController <span class="keyword">as</span>! <span class="type">AnimalPickerViewController</span>).selectedAnimal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们再从 button 等控件拉向 exit 时才会有效果。至于 identifier 是设置在刚刚拉向 exit 的 segue（unwind segue）。我补写了本文的 <a href="http://github.com/DianQK/StudyUnwindSegue" target="_blank" rel="external">demo</a>，如果你还有什么困惑可以直接看这个 demo。）</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Tomasz Szulc，<a href="http://szulctomasz.com/ios-passing-data-back-using-unwind-segue-instead-of-delegate-pattern/">原文链接</a>，原文日期：2015-12-6<br>译者：<a href="http://www.dianqk.org/">靛青K</a>；校对：<a href="undefined">Channe</a>；定稿：<a href="https://github.com/Cee">Cee</a></p>
</blockquote>
<!--此处开始正文-->
<blockquote>
<p>这是一个不使用 delegate 模式传递回调数据的好方法。</p>
</blockquote>
<p>我今天注意到这个小技巧，值得和你分享一下。</p>]]>
    
    </summary>
    
      <category term="Tomasz Szulc" scheme="http://swiftggteam.github.io/tags/Tomasz-Szulc/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Alert Controller 中实现可编辑文本字输入框教程]]></title>
    <link href="http://swiftggteam.github.io/2016/01/04/editable-text-field-alert-controller-tutorial/"/>
    <id>http://swiftggteam.github.io/2016/01/04/editable-text-field-alert-controller-tutorial/</id>
    <published>2016-01-03T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Arthur Knopper，<a href="http://www.ioscreator.com/tutorials/editable-text-field-alert-controller-tutorial" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-21<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>UIAlertController 类不仅用于呈现警告弹窗，还能够提供 Text Fields 来获取文本信息输入。本教程演示了从用户处获取账号和密码，并打印到终端中。此教程开发环境为 Xcode 7.2 以及 iOS 9。</p>
<p>打开X code，创建一个 Single View Application。输入项目名称：<strong>IOS9TextFieldAlertControllerTutorial</strong>，接着填写你独有的 Organization Name 以及 Organization Identifier。选择语言为 Swift 并确保设备为 iPhone 。<br><a id="more"></a></p>
<p><img src="/img/articles/editable-text-field-alert-controller-tutorial/format=1500w1451868017.9978042" alt=""></p>
<p>前往 Storyboard。从 Object Library（译者注：快捷键 Command + Option + Control + 3） 中拖拽一个按钮（UIButton）到主视图中。双击按钮设置 title 名为 「Log in」。此刻保持按钮为选中状态，按下 Ctrl 键，使用鼠标左键拖拽一条线到主视图上方，弹出黑色信息框，使用 Shift 键选中「Vertical Spacing to Top Layout Guide」和「Center Horizontally in Container」两个选项。</p>
<p><img src="/img/articles/editable-text-field-alert-controller-tutorial/1451868018.5434368" alt=""></p>
<p>Storyboard 应该是这个样子的。</p>
<p><img src="/img/articles/editable-text-field-alert-controller-tutorial/format=1500w1451868018.9260972" alt=""></p>
<p>（译者注：也许你的界面呈现了黄色约束警告，你需要使用 Command + Option + = 快捷键来更新下。）</p>
<p>选中 Assistant Editor ，确保 <strong>ViewControllers.swift</strong> 可见。选中按钮使用 Ctrl + 左键拖拽方式创建如下 Action。</p>
<p><img src="/img/articles/editable-text-field-alert-controller-tutorial/format=750w1451868019.366837" alt=""></p>
<p>在 <strong>ViewController</strong> 类中实现 <strong>login</strong> 方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">login</span><span class="params">(sender: AnyObject)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1.</span></span><br><span class="line">    <span class="keyword">var</span> usernameTextField: <span class="type">UITextField</span>?</span><br><span class="line">    <span class="keyword">var</span> passwordTextField: <span class="type">UITextField</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.  </span></span><br><span class="line">    <span class="keyword">let</span> alertController = <span class="type">UIAlertController</span>(</span><br><span class="line">      title: <span class="string">"Log in"</span>,</span><br><span class="line">      message: <span class="string">"Please enter your credentials"</span>,</span><br><span class="line">      preferredStyle: <span class="type">UIAlertControllerStyle</span>.<span class="type">Alert</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.  </span></span><br><span class="line">    <span class="keyword">let</span> loginAction = <span class="type">UIAlertAction</span>(</span><br><span class="line">      title: <span class="string">"Log in"</span>, style: <span class="type">UIAlertActionStyle</span>.<span class="type">Default</span>) &#123;</span><br><span class="line">        (action) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">let</span> username = usernameTextField?.text &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">" Username = <span class="subst">\(username)</span>"</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"No Username entered"</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        </span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">let</span> password = passwordTextField?.text &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Password = <span class="subst">\(password)</span>"</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"No password entered"</span>)</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.</span></span><br><span class="line">    alertController.addTextFieldWithConfigurationHandler &#123;</span><br><span class="line">      (txtUsername) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        usernameTextField = txtUsername</span><br><span class="line">        usernameTextField!.placeholder = <span class="string">"&lt;Your username here&gt;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    alertController.addTextFieldWithConfigurationHandler &#123;</span><br><span class="line">      (txtPassword) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        passwordTextField = txtPassword</span><br><span class="line">        passwordTextField!.secureTextEntry = <span class="literal">true</span></span><br><span class="line">        passwordTextField!.placeholder = <span class="string">"&lt;Your password here&gt;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5.</span></span><br><span class="line">    alertController.addAction(loginAction)</span><br><span class="line">    <span class="keyword">self</span>.presentViewController(alertController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>创建两个可选类型的 UITextField 变量用于警告弹窗。</li>
<li>创建一个 Alert 样式的 AlertController。</li>
<li>创建一个 Alert Action，闭包体中执行如下行为：将 textField 输入的信息打印到终端中。</li>
<li>addTextFieldWithConfigurationHandler 方法用于添加文本输入框（text input fields），闭包接收 Text Filed 作为参数变量。</li>
<li>将登录动作添加到 AlertController 中，同时呈现该控制器。</li>
</ol>
<p><strong>构建并运行</strong>该工程，点击 Login 按钮，填充 AlertController 中的 username 和 password 字段。输入内容随之打印到终端中。</p>
<p><img src="/img/articles/editable-text-field-alert-controller-tutorial/format=1500w1451868019.8416817" alt=""></p>
<p>你可以前往 ioscreator 的 GitHub 仓库下载 <a href="https://github.com/ioscreator/ioscreator" target="_blank" rel="external">IOS9TextFieldAlertControllerTutorial</a> 源代码。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Arthur Knopper，<a href="http://www.ioscreator.com/tutorials/editable-text-field-alert-controller-tutorial">原文链接</a>，原文日期：2015-12-21<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>UIAlertController 类不仅用于呈现警告弹窗，还能够提供 Text Fields 来获取文本信息输入。本教程演示了从用户处获取账号和密码，并打印到终端中。此教程开发环境为 Xcode 7.2 以及 iOS 9。</p>
<p>打开X code，创建一个 Single View Application。输入项目名称：<strong>IOS9TextFieldAlertControllerTutorial</strong>，接着填写你独有的 Organization Name 以及 Organization Identifier。选择语言为 Swift 并确保设备为 iPhone 。<br>]]>
    
    </summary>
    
      <category term="IOSCREATOR" scheme="http://swiftggteam.github.io/tags/IOSCREATOR/"/>
    
      <category term="iOS开发" scheme="http://swiftggteam.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在团队开发中使用 CocoaPods 的小技巧]]></title>
    <link href="http://swiftggteam.github.io/2015/12/31/cocoapods-on-a-team/"/>
    <id>http://swiftggteam.github.io/2015/12/31/cocoapods-on-a-team/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/cocoapods-on-a-team/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-18<br>译者：<a href="http://ijack.pw/" target="_blank" rel="external">JackAlan</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在我工作的一个团队中，我们有很多关于安装 CocoaPods 的问题。团队成员拥有不同的 <code>cocoapods gem</code> 的安装版本，并且当有人运行 <code>pod install</code> 时，会将事情搞得一团糟。</p>
<p>我们最终不得不委托一人安装 CocoaPods，并且把工程推到 GitHub 上以供我们使用。这显然是不够灵活的，并且对于我们团队或者是委托人来说都不是一个很满意的解决方式。</p>
<a id="more"></a>
<p>我跟 <a href="https://twitter.com/NeoNacho" target="_blank" rel="external">@NeoNacho</a> 提到了这个问题，他是 CocoaPods 的核心贡献者，并且他提供了我们急需的那个解决方案。使用 <code>Gemfile</code>！</p>
<p>你可以在 <code>Gemfile</code> 中指定 <code>cocoapods gem</code> 的使用版本。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">source <span class="string">'https://rubygems.org'</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'cocoapods'</span>, <span class="string">'0.39.0'</span></span><br></pre></td></tr></table></figure>
<p>（译者注：在大天朝还是换成 <code>source &#39;https://ruby.taobao.org&#39;</code> 这个吧。）</p>
<p>当你更新了 Gemfile 文件并且自动安装了正确版本的 gem 后，确保团队的每个成员都运行一次 <code>bundle install</code> 这条命令。</p>
<p>此后，只需要运行 <code>bundle exec pod install</code> 这条命令来安装新的 CocoaPods——这将会确保通过你在的 Gemfile 中指定 <code>cocoapods gem</code> 的版本后，<code>pods</code> 仍可以被正确的安装。</p>
<p>感谢 <a href="https://twitter.com/NeoNacho" target="_blank" rel="external">@NeoNacho</a> 提供的小技巧。</p>
<p><strong>更新</strong>：获取更多如何在项目中使用 <code>Gemfile</code> 的信息，请参阅 <a href="https://guides.cocoapods.org/using/a-gemfile.html" target="_blank" rel="external">Cocoapods Guide on Using a Gemfile</a>。感谢 <a href="https://twitter.com/orta/status/677972879988932608" target="_blank" rel="external">@orta</a>！</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Natasha The Robot，<a href="http://natashatherobot.com/cocoapods-on-a-team/">原文链接</a>，原文日期：2015-12-18<br>译者：<a href="http://ijack.pw/">JackAlan</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>在我工作的一个团队中，我们有很多关于安装 CocoaPods 的问题。团队成员拥有不同的 <code>cocoapods gem</code> 的安装版本，并且当有人运行 <code>pod install</code> 时，会将事情搞得一团糟。</p>
<p>我们最终不得不委托一人安装 CocoaPods，并且把工程推到 GitHub 上以供我们使用。这显然是不够灵活的，并且对于我们团队或者是委托人来说都不是一个很满意的解决方式。</p>]]>
    
    </summary>
    
      <category term="Natasha The Robot" scheme="http://swiftggteam.github.io/tags/Natasha-The-Robot/"/>
    
      <category term="iOS开发" scheme="http://swiftggteam.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每周 Swift 社区问答 2015-12-30]]></title>
    <link href="http://swiftggteam.github.io/2015/12/30/swift-qa-2015-12-30/"/>
    <id>http://swiftggteam.github.io/2015/12/30/swift-qa-2015-12-30/</id>
    <published>2015-12-29T16:00:00.000Z</published>
    <updated>2015-12-30T13:25:13.618Z</updated>
    <content type="html"><![CDATA[<p>作者：<a href="http://codebuild.me" target="_blank" rel="external">shanks</a></p>
<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Swift regular expressions</a></li>
<li><a href="#Q2">Storing a reference to array in swift</a></li>
<li><a href="#Q3">What’s the difference between [String!] and [String]!</a></li>
<li><a href="#Q4">How can I filter dictionary [[String:String]]</a></li>
<li><a href="#Q5">Why ‘self.self’ compiles and run in swift?</a></li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151230/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151230.playground" target="_blank" rel="external">点击下载</a></p>
<a id="more"></a>
<p><a name="Q1"></a></p>
<h2 id="Question1:_Swift_regular_expressions">Question1: Swift regular expressions</h2><p><a href="http://stackoverflow.com/questions/34459701/swift-regular-expressions" target="_blank" rel="external">Q1链接地址</a></p>
<h3 id="问题描述">问题描述</h3><p>楼主直接就问：如何在 swift 中使用<code>[a-zA-Z]+@[a-zA-Z]+.[a-zA-Z]</code>这样的正则表达式?</p>
<h3 id="问题解答">问题解答</h3><p>目前在 Swift 中使用正则表达式，还是直接调用 oc 里面的 NSRegularExpression 来完成的。<br>喵神有一个 tips 专门介绍了这个知识点：<br><a href="http://swifter.tips/regex/" target="_blank" rel="external">http://swifter.tips/regex/</a></p>
<p>下面是跟帖的代码，解决了问题：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">test</span> = <span class="string">"someone@somewhere.com"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    let regex = try NSRegularExpression(pattern: <span class="string">"[a-zA-z]+@[a-zA-Z]+.[a-zA-Z]"</span>, options: [])</span><br><span class="line">    <span class="keyword">if</span> regex.firstMatchInString(<span class="keyword">test</span>, options: [], <span class="keyword">range</span>: NSMakeRange(0, <span class="keyword">test</span>.characters.<span class="keyword">count</span>)) != nil &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"matched"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">"not matched"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch let <span class="keyword">error</span> <span class="keyword">as</span> NSError &#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">error</span>.localizedDescription)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="Q2"></a></p>
<h2 id="Question2:_Storing_a_reference_to_array_in_swift">Question2: Storing a reference to array in swift</h2><p><a href="http://stackoverflow.com/questions/34486043/storing-a-reference-to-array-in-swift" target="_blank" rel="external">Q2链接地址</a></p>
<h3 id="问题描述-1">问题描述</h3><p>Swift 类中定义的方法，传入参数默认是值拷贝，也就是说，即使方法内部改变参数值，传入的参数原始值是不会改变的。</p>
<p>楼主纠结如何实现引用拷贝，也就是，赋值给类中的属性以后，改变了属性的值，传入的参数也会跟着改变，见代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo : <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(foo: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">self</span>.foo = foo</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">modify</span><span class="params">()</span></span> &#123;</span><br><span class="line">        foo.append(<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> bar = <span class="type">Foo</span>(foo: a)</span><br><span class="line">bar.modify()</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// My goal is that it will print 1,2,3,4,5</span></span><br></pre></td></tr></table></figure>
<h3 id="问题解答-1">问题解答</h3><p>实际上，使用inout，也不能解决问题，inout 只是应用在方法内部直接改变传入值的时候有用，而上例中，是先赋值给了类的一个属性，改变了属性的值，而没有改变传入参数值。因为 Array<int> 是值类型，赋值默认为值拷贝：</int></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo : <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(foo: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">self</span>.foo = foo</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">modify</span><span class="params">()</span></span> &#123;</span><br><span class="line">        foo.append(<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar1 = <span class="type">Foo1</span>(foo: a)</span><br><span class="line">bar.modify()</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// 还是没有改变 a</span></span><br></pre></td></tr></table></figure>
<p>以下代码是跟帖中提供的解决方案，使用 UnsafeMutablePointer<int>，也就是 c 语言中的 int * 指针来达成指向内存的一致。从而在修改时候，能够保持一致。但是强烈不推荐此种做法，因为 Swift 强调的类型安全丢失了。</int></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo : [<span class="type">Int</span>]</span><br><span class="line">    <span class="keyword">var</span> pInner: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(foo: [<span class="type">Int</span>]) &#123;</span><br><span class="line">        pInner = <span class="type">UnsafeMutablePointer</span>(foo)</span><br><span class="line">        <span class="keyword">self</span>.foo = <span class="type">Array</span>(<span class="type">UnsafeBufferPointer</span>(start: pInner, <span class="built_in">count</span>: foo.<span class="built_in">count</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(<span class="keyword">inout</span> pOuter: UnsafeMutablePointer&lt;Int&gt;)</span></span> &#123;</span><br><span class="line">        foo.append(<span class="number">5</span>) <span class="comment">// &lt;-- foo gets new memory adress</span></span><br><span class="line">        pInner = <span class="type">UnsafeMutablePointer</span>(foo)</span><br><span class="line">        pOuter = pInner</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pOuter: <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int</span>&gt; = <span class="type">UnsafeMutablePointer</span>(a)</span><br><span class="line"><span class="keyword">var</span> bar2 = <span class="type">Foo2</span>(foo: a) <span class="comment">// 'bar.foo' now at same address as 'a'</span></span><br><span class="line"><span class="built_in">print</span>(bar2.foo) <span class="comment">// [1,2,3,4]</span></span><br><span class="line">bar2.modify(&amp;pOuter) <span class="comment">// -&gt; [1,2,3,4,5]</span></span><br><span class="line">a = <span class="type">Array</span>(<span class="type">UnsafeBufferPointer</span>(start: pOuter, <span class="built_in">count</span>: bar.foo.<span class="built_in">count</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Same pointer adress, OK! */</span></span><br><span class="line"><span class="built_in">print</span>(bar2.pInner)</span><br><span class="line"><span class="built_in">print</span>(pOuter)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Naturally same value (same address in memory) */</span></span><br><span class="line"><span class="built_in">print</span>(bar.foo)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>此问题其实在实际编码中，应该尽量避免，一个类，去改变外部的值，违背了类的封装性。</p>
<p><a name="Q3"></a></p>
<h2 id="Question3:_What’s_the_difference_between_[String!]_and_[String]!">Question3: What’s the difference between [String!] and [String]!</h2><p><a href="http://stackoverflow.com/questions/34485421/whats-the-difference-between-string-and-string-swift" target="_blank" rel="external">Q3链接地址</a></p>
<h3 id="问题描述-2">问题描述</h3><p>楼主是新手，新手最多的几个问题之一就是对 Optional 的理解。楼主的问题是：<br>[String!] and [String]! 的区别是什么？</p>
<h3 id="问题解答-2">问题解答</h3><ul>
<li><p>[String!] 是一个包含隐式解包 Optional String 的数组，数组的值可以为 nil。</p>
</li>
<li><p>[String]! 是一个隐式解包 Optional 的数组，数组类型是 String，可以直接对这个数组赋值为nil，但是因为数组元素类型是 String，所以数组元素不能为nil</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list0: [<span class="built_in">String</span>!] = [<span class="string">"Hello"</span>, nil, <span class="string">"world"</span>, nil]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list1: [<span class="built_in">String</span>]! = nil</span><br><span class="line"><span class="keyword">let</span> list2: [<span class="built_in">String</span>]! = [<span class="string">"Hello"</span>, <span class="string">"world"</span>]</span><br></pre></td></tr></table></figure>
<p><a name="Q4"></a></p>
<h2 id="Question4:_How_can_I_filter_dictionary_[[String:String]]">Question4: How can I filter dictionary [[String:String]]</h2><h3 id="问题链接">问题链接</h3><p><a href="http://stackoverflow.com/questions/34483418/how-can-i-filter-dictionary-stringstring" target="_blank" rel="external">Q4链接地址</a></p>
<h3 id="问题描述-3">问题描述</h3><p>楼主有一个二维数组，想通过数组中的 type 字段，进行过滤。于是他写出了如下报错的代码：</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">var data = [[<span class="string">"type"</span>:<span class="string">"Sport"</span>, <span class="string">"model"</span>:<span class="string">"R6"</span>],[<span class="string">"type"</span>:<span class="string">"Enduro"</span>, <span class="string">"model"</span>:<span class="string">"Tenerre"</span>],[<span class="string">"type"</span>:<span class="string">"Chopper"</span>, <span class="string">"model"</span>:<span class="string">"Intruder"</span>]]</span><br><span class="line">//data.filter(&#123; (<span class="keyword">type</span>: <span class="built_in">String</span>) -&gt; <span class="built_in">Bool</span> <span class="keyword">in</span></span><br><span class="line">//    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">//&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="问题解答-3">问题解答</h3><p>数组 filter 方法的定义：</p>
<p>filter(includeElement: (T) -&gt; Bool) -&gt; T[]</p>
<p>在这个例子中，数组是二维的，所以 T = [String:String]，也是一个数组。所以正确答案应该是：</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> filteredData = data.filter &#123; (dict:[<span class="built_in">String</span>:<span class="built_in">String</span>]) -&gt; <span class="built_in">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> dict[<span class="string">"type"</span>] == <span class="string">"Sport"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="Q5"></a></p>
<h2 id="Question5:_Why_‘self-self’_compiles_and_run_in_swift?">Question5: Why ‘self.self’ compiles and run in swift?</h2><h3 id="问题链接-1">问题链接</h3><p><a href="http://stackoverflow.com/questions/34499890/why-self-self-compiles-and-run-in-swift" target="_blank" rel="external">Q5链接地址</a></p>
<h3 id="问题描述-4">问题描述</h3><p>楼主的问题是：为什么 self.self 这样的写法在其他语言会报错，而 Swift 中，不会报错：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someProperty = <span class="string">""</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">self</span>.<span class="keyword">self</span>.someProperty)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题解答-4">问题解答</h3><p>实际上，无论支持还是不支持这种语法，一个 self，应该就足够了。<br>跟帖也在质疑这种用法的实用性在那？例如如下的形式，这样写与只带一个 self，没什么区别：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">"Hello"</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span><span class="built_in">.</span><span class="built_in">self</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="string">"Hello"</span><span class="built_in">.</span><span class="built_in">self</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>作者：<a href="http://codebuild.me">shanks</a></p>
<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Swift regular expressions</a></li>
<li><a href="#Q2">Storing a reference to array in swift</a></li>
<li><a href="#Q3">What’s the difference between [String!] and [String]!</a></li>
<li><a href="#Q4">How can I filter dictionary [[String:String]]</a></li>
<li><a href="#Q5">Why ‘self.self’ compiles and run in swift?</a></li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151230/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151230.playground">点击下载</a></p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://swiftggteam.github.io/tags/Swift/"/>
    
      <category term="社区问答" scheme="http://swiftggteam.github.io/tags/%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%94/"/>
    
      <category term="Swift" scheme="http://swiftggteam.github.io/categories/Swift/"/>
    
      <category term="iOS开发" scheme="http://swiftggteam.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[教你如何在 Auto Layout 下设置两个视图之间的最小间距]]></title>
    <link href="http://swiftggteam.github.io/2015/12/30/minimal-distance-to-two-views-in-auto-layout/"/>
    <id>http://swiftggteam.github.io/2015/12/30/minimal-distance-to-two-views-in-auto-layout/</id>
    <published>2015-12-29T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：dom，<a href="http://swiftandpainless.com/minimal-distance-to-two-views-in-auto-layout/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-08<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="http://www.jianshu.com/users/ef1058d2d851" target="_blank" rel="external">星夜暮晨</a>；定稿：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a></p>
</blockquote>
<!--此处开始正文-->
<p>假设现在要在某个视图（view）中放置三个子视图（subviews）。其中两个子视图放置在上方，第三个视图紧挨着它们放到下方。不过上方的两个视图高度不定，并且你不知道哪个更高一些。现在要求我们使用自动布局（Auto Layout）来控制下方视图和上方视图之间间距至少 10 单位像素。</p>
<a id="more"></a>
<p>我们该如何实现呢？实现技巧是使用不等式约束条件 (inequality) 以及设置约束优先级 (priority)。相关约束如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意约束使用不等式 &gt;=，以及设置优先级</span></span><br><span class="line">leftViewConstraints += <span class="type">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class="string">"V:[red(50)]-(&gt;=10)-[green]"</span>, options: [], metrics: <span class="literal">nil</span>, views: leftViews)</span><br><span class="line">leftViewConstraints += <span class="type">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class="string">"V:[blue(100)]-(&gt;=10)-[green]"</span>, options: [], metrics: <span class="literal">nil</span>, views: leftViews)</span><br><span class="line">leftViewConstraints += <span class="type">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class="string">"V:[blue(100)]-(&lt;=10@999)-[green]"</span>, options: [], metrics: <span class="literal">nil</span>, views: leftViews)</span><br></pre></td></tr></table></figure>
<p>上方两个视图与底部视图的最小间距不能小于 10（译者注：这里约束优先级默认是 1000）。此外蓝色视图与底部视图的最大间距不得大于 10 ，其优先级为 999。</p>
<p>就是这样！你可以看到如下方截图所示的结果。左侧图片中，蓝色视图的高度为 100 单位像素，红色视图高度为 50 单位像素。 右侧图片则刚刚相反。</p>
<p><img src="/img/articles/minimal-distance-to-two-views-in-auto-layout/Screen-Shot-2015-12-08-at-21.52.25-300x155.png1451437944.9187686" alt=""></p>
<p>这里向你提供完整代码的 <a href="http://swift.eltanin.uberspace.de/wp-content/uploads/2015/12/MinimalDistanceAutoLayoutPlayground.playground.zip" target="_blank" rel="external">playground</a> 下载。</p>
<blockquote>
<p>译者注：你可以在下载的 playground 下方键入 view 属性，然后在右侧栏点击 Quick Look，也就是那个眼睛，就能看到如上所示的截图了！</p>
</blockquote>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：dom，<a href="http://swiftandpainless.com/minimal-distance-to-two-views-in-auto-layout/">原文链接</a>，原文日期：2015-12-08<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="http://www.jianshu.com/users/ef1058d2d851">星夜暮晨</a>；定稿：<a href="https://github.com/Cee">Cee</a></p>
</blockquote>
<!--此处开始正文-->
<p>假设现在要在某个视图（view）中放置三个子视图（subviews）。其中两个子视图放置在上方，第三个视图紧挨着它们放到下方。不过上方的两个视图高度不定，并且你不知道哪个更高一些。现在要求我们使用自动布局（Auto Layout）来控制下方视图和上方视图之间间距至少 10 单位像素。</p>]]>
    
    </summary>
    
      <category term="Swift and Painless" scheme="http://swiftggteam.github.io/tags/Swift-and-Painless/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聚焦 Swift #0]]></title>
    <link href="http://swiftggteam.github.io/2015/12/29/swift-open-source/"/>
    <id>http://swiftggteam.github.io/2015/12/29/swift-open-source/</id>
    <published>2015-12-28T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Jesse Squires，<a href="http://www.jessesquires.com/swift-open-source/" target="_blank" rel="external">原文链接</a>，原文日期：2015/12/06<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
<p>译者注：这个系列的关注重点是 Swift 开源项目本身的发展，作者会截取每周发生的大事（比如合并了一个大改动）并进行分析，还会写一些有趣的小发现，很有意思。我们已经拿到翻译授权，会每周进行更新，欢迎关注。</p>
</blockquote>
<p>革命起源：<strong>2015.12.06</strong></p>
<p>Apple 宣告 “<a href="https://developer.apple.com/swift/blog/?id=34" target="_blank" rel="external">Swift即将开源</a>” 的随后几天里，项目的活跃度让人瞠目结舌。回想今年早些时候的 <a href="https://developer.apple.com/wwdc/" target="_blank" rel="external">WWDC</a> 大会上 Apple 提及 Swift 不久会被开源，我可不认为任何人会像这样期待该发布版本。</p>
<p><img src="/img/articles/swift-open-source/swift-logo.png1451394012.0965536" alt=""></p>
<a id="more"></a>
<h3 id="Expectations（期望）">Expectations（期望）</h3><p>没人真正知道接下来会发生什么。譬如 Swift 项目将会被投放到 <a href="http://www.opensource.apple.com/" target="_blank" rel="external">opensource.apple.com</a> 上，变得和其他开源项目一样毫无新意？还是说它会像 <a href="https://github.com/ResearchKit" target="_blank" rel="external">ResearchKit</a> 一样放置到 GitHub 上？最终，Swift 不仅发布到 <a href="https://github.com/apple/" target="_blank" rel="external">GitHub</a> 上，而且 Swift 团队将会以一种彻底透明化的方式工作。Apple 为该发布版所做的工作是令人瞩目的。我们不但可以获得所有的源代码，同时还能浏览每个项目<a href="https://github.com/apple/swift/commits/master" target="_blank" rel="external">完整的提交历史</a>，提供非常详细的视图展示 Swift 团队的开发流程，以及 Swift 的<a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">演变史</a>。 任何你想要获悉的东西都可以在 <a href="http://swift.org/" target="_blank" rel="external">Swift.org</a>上找到。</p>
<h3 id="Swift_in_the_open">Swift in the open</h3><p>过去的几天里我浏览了 <a href="https://github.com/apple/" target="_blank" rel="external">GitHub</a> 的源码仓以及 Swift 的<a href="https://swift.org/community/#mailing-lists" target="_blank" rel="external">邮件列表</a>。真是太有意思了！很好奇 Swift 开发在之后的发展中会变成什么样子？下面分享到目前为止我觉得很有意思的一些东西。</p>
<ul>
<li>Chris Lattner 于 2010.7.17 提交了首个 <a href="https://github.com/apple/swift/commit/18844bc65229786b96b89a9fc7739c0fc897905e" target="_blank" rel="external">commit</a>。</li>
<li>Swift 源代码发布到 GitHub 上的短短24小时里，<a href="https://github.com/apple/swift" target="_blank" rel="external">Swift repo</a> 星星数以超过 10,000 之多。到目前为止已经拥有 19,000 星星数 和超过 2,000次 fork。在写这篇文章时候，它依旧占据 GitHub 热门榜单第一位。（pmst注：翻译时 <strong>24,724</strong> stars，<strong>3043</strong> fork，遗憾的是不在热门榜单中。）</li>
<li>所有 repos 的 pull requests 加起来超过 400 之多。许多都已经被接收并合并了。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2014-402/" target="_blank" rel="external">WWDC 2014</a> 宣告发布 Swift 语言之后，我想 Swift 团队在 twitter 上的活跃度是有目共睹的：一边答疑解惑；一边是 <a href="https://twitter.com/clattner_llvm" target="_blank" rel="external">Chris Lattner</a>，<a href="https://twitter.com/jckarter" target="_blank" rel="external">Joe Groff</a> 以及 <a href="https://twitter.com/UINT_MIN" target="_blank" rel="external">Jordan Rose</a> 大神时不时地举例说明。正是因为这些推文加速了 bug 的修复！😄</li>
<li>还记得 <a href="https://www.apple.com/pr/library/2014/07/15Apple-and-IBM-Forge-Global-Partnership-to-Transform-Enterprise-Mobility.html" target="_blank" rel="external">Apple 和 IBM</a> 的<a href="http://www.apple.com/business/mobile-enterprise-apps/" target="_blank" rel="external">合作关系</a>吗？因此 IBM 对服务器端 Swift 开发的<a href="https://developer.ibm.com/swift/2015/12/03/introducing-the-ibm-swift-sandbox/" target="_blank" rel="external">投入</a>也就没什么令人吃惊的。就目前来看，Swift 应用到服务器端的趋势尤为明显。</li>
<li>Chris Lattner 于星期六下午10点合并了 <a href="https://github.com/apple/swift/pull/166" target="_blank" rel="external">pull requests</a>。😆</li>
<li>我们已经确切获悉了 Swift3.0 即将做出的改变。没有啥让人惊喜的东东拉。</li>
<li>Swift3.0 中 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="external">++ 和 – 运算符将被移除</a>。感谢 <a href="https://twitter.com/ericasadun" target="_blank" rel="external">Erica Sadun</a>，以及 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md" target="_blank" rel="external">C 风格的 for 循环</a>。她同一天中提交了2个建议！👏</li>
<li>Chris lattner <a href="https://github.com/apple/swift/commit/22c3aa0588d2df1a207dcbad85946bab7976894c" target="_blank" rel="external">提交</a>了“Pull some ancient history off an internal wiki page for possible historical interest.” 什么？是的，没错！奇客们注意了。</li>
<li>自从2014年9月开始 <a href="https://twitter.com/practicalswift" target="_blank" rel="external">@practicalswift</a> 这个专门收集 <a href="https://github.com/practicalswift/swift-compiler-crashes" target="_blank" rel="external">swift 编译崩溃信息的系列</a>已经作为<a href="https://github.com/apple/swift/commit/e5ca8be1a090335d401cd1d7dfcf9b2104674d5b" target="_blank" rel="external">仓库内容</a>的一部分了。</li>
<li>使用 <code>associated</code> 类型声明取代 <code>typealias</code> 声明方式看起来是一个不错的<a href="https://github.com/apple/swift-evolution/pull/33/files" target="_blank" rel="external">机会</a>。</li>
<li><a href="https://twitter.com/jtbandes" target="_blank" rel="external">Jacob Bandes-Storch</a> 提交了两个 <a href="https://github.com/apple/swift/pull/272" target="_blank" rel="external">pull request</a> 修复了将近 400 个 crash 。😲</li>
<li>Swift 团队似乎很热衷于让社区参与进来。无所谓贡献大小！</li>
<li><a href="https://github.com/apple/swift-corelibs-foundation" target="_blank" rel="external">swift-corelibs-foundation</a> 框架大部分都还<a href="https://github.com/apple/swift-corelibs-foundation/search?utf8=✓&amp;q=NSUnimplemented" target="_blank" rel="external">未实现</a>。看起来还有很多低挂的“果实”能让你来采摘。我很好奇这是否是 Apple 故意而为之，鼓励开发者参与贡献，还是说真的是因为时间紧迫导致的？</li>
<li>自2010起的<a href="https://github.com/apple/swift/commit/afc81c1855bf711315b8e5de02db138d3d487eeb" target="_blank" rel="external">initial checkin</a> 实际上是版本4，从内部 SVN 仓库中导入的。“Swift SVN r4”。 你将注意到下面头文件中的注释说到：“该源文件是 Swift.org 开源项目中的一部分。Copyright(c)2014-2015 Apple Inc.” 我的看法有三点：<br>  1 在将项目发布到 GitHub 之前，提交历史已经被重新编辑以及整理过了。<br>  2 2010年时，Swift 团队指定的截止日期就是“2014-2015”，无关其他。这本就是 Apple 的一贯做法，反正 Swift 跌跌撞撞地已经到来。<br>  3 Chris Lattner 是个“巫师”。</li>
</ul>
<p>我想我们已经有了一个良好的开端。社区实在强大且狂热，仅仅<strong>三天</strong>,Swift 就有了极大地改进。正如 Lattner 所说，革命是属于 Swift 的！</p>
<p>以上就是我所获知的所有东西了。如果你喜欢该文章，<a href="https://twitter.com/jesse_squires" target="_blank" rel="external">请让我知道</a>。或许我会坚持下去，分享我的发现。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Jesse Squires，<a href="http://www.jessesquires.com/swift-open-source/">原文链接</a>，原文日期：2015/12/06<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
<p>译者注：这个系列的关注重点是 Swift 开源项目本身的发展，作者会截取每周发生的大事（比如合并了一个大改动）并进行分析，还会写一些有趣的小发现，很有意思。我们已经拿到翻译授权，会每周进行更新，欢迎关注。</p>
</blockquote>
<p>革命起源：<strong>2015.12.06</strong></p>
<p>Apple 宣告 “<a href="https://developer.apple.com/swift/blog/?id=34">Swift即将开源</a>” 的随后几天里，项目的活跃度让人瞠目结舌。回想今年早些时候的 <a href="https://developer.apple.com/wwdc/">WWDC</a> 大会上 Apple 提及 Swift 不久会被开源，我可不认为任何人会像这样期待该发布版本。</p>
<p><img src="/img/articles/swift-open-source/swift-logo.png1451394012.0965536" alt=""></p>]]>
    
    </summary>
    
      <category term="Open Source Swift" scheme="http://swiftggteam.github.io/tags/Open-Source-Swift/"/>
    
      <category term="Swift 开源信息" scheme="http://swiftggteam.github.io/categories/Swift-%E5%BC%80%E6%BA%90%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Swift、Foursquare API 及 Realm 构建一款 Coffee Shop 应用]]></title>
    <link href="http://swiftggteam.github.io/2015/12/29/foursquare-realm-swift/"/>
    <id>http://swiftggteam.github.io/2015/12/29/foursquare-realm-swift/</id>
    <published>2015-12-28T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：reinder de vries，<a href="http://www.appcoda.com/foursquare-realm-swift/" target="_blank" rel="external">原文链接</a>，原文日期：2015/11/23<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="http://www.brighttj.com" target="_blank" rel="external">saitjr</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>我们经常说，程序员喝进去的是咖啡，吐出来的是代码。让我们换一个角度去思考，来做一个显示附近咖啡店的 App。</p>
<p>这篇文章中，用到了以下技能：</p>
<ul>
<li>Swift，Xcode 和 Interface Builder（Auto Layout, Constraints 和 Storyboards）</li>
<li>Realm，一种本地存储方案，轻量级的 Core Data</li>
<li>使用 Foursquare 和 Das Quadrat 库访问 REST API</li>
<li>CocoaPods 和 Geolocation</li>
</ul>
<p>这个 App 可以检测当前用户的 500 平方米的范围，并从 Foursquare 拿到附近咖啡店的地理信息。我们将使用 map view（<code>MKMapView</code>）和一个 table view（<code>UITableView</code>）来展示数据。当然，还要使用 Realm 来过滤数据，并使用闭包来对数据进行排序。</p>
<a id="more"></a>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/foursquare-api.jpg" alt=""></p>
<p>你可以从 GitHub <a href="https://github.com/reinderdevries/CoffeeGuide" target="_blank" rel="external">reinderdevries/CoffeeGuide</a> 上下载所有源代码和 Xcode 项目。</p>
<p>让我们开始码代码吧！</p>
<h2 id="设置_Xcode">设置 Xcode</h2><p>第一步，创建工程。打开 Xcode，选择 File -&gt; New -&gt; Project…</p>
<p>在分类中，选择 iOS -&gt; Application -&gt; Single View Application，然后填写一下信息：</p>
<ul>
<li>Product Name：Coffee</li>
<li>Organisation Name：随便写一个</li>
<li>Organisation Identifier：也随便写一个，使用的格式如：com.mycompanyname</li>
<li>Language：Swift（当然是 Swift 了）</li>
<li>Devices：iPhone</li>
<li>取消 Core Data，勾选 Unit Tests 和 UI Tests</li>
</ul>
<p>选择工程的存储路径，不用勾选 create a local Git repository。</p>
<p>接着创建 Podfile。在项目名称上（工程目录选项卡）点击右键，选择 New File … 如下图所示，选择 iOS -&gt; Other -&gt; Empty。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_2.png" alt=""></p>
<p>文件命名为 Podfile（不要文件扩展名）并<strong>确保</strong>它和 .xcodeproj 文件在同一级目录下！还要勾选 Target 栏里的 Coffee 选框。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_3.png" alt=""></p>
<p>然后复制下面的代码到 Podfile里：（译者注：以下是原文的代码，但是有个地方错了：<code>useframeworks!</code> 要改为 <code>use_frameworks!</code> ）</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">useframeworks!</span><br><span class="line"></span><br><span class="line">pod <span class="string">'QuadratTouch'</span>, <span class="string">'&gt;= 1.0'</span></span><br><span class="line">pod <span class="string">'RealmSwift'</span></span><br></pre></td></tr></table></figure>
<p>项目集成了两个第三方类库：Realm 和 Das Quadrat（一个  Foursquare REST API 的 Swift 库）。</p>
<p>然后，退出工程并关闭 Xcode（最好完全关闭）。打开 OS X 终端，cd 到你的工程目录下。详细步骤如下：</p>
<ol>
<li>打开终端</li>
<li>键入<code>cd</code>（c-d-空格）</li>
<li>打开文件夹</li>
<li>定位到你工程目录的那个文件夹，但是不要点进去</li>
<li>把文件夹拖到终端里</li>
<li>这样，工程的绝对路径会显示在 <code>cd</code>的后面</li>
<li>回车</li>
<li>这样，就进入正确的工程目录了</li>
</ol>
<p>现在，在终端里输入：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>
<p>稍等一会，会出现几行信息，这表示 Cocoapods 已按照之前设置的要求把需要的第三方库装进 Xcode 了，同时，我们的工程已经变成 workspace （编辑模式）了。</p>
<p>这步完成后，找到新生成的 .xcworkspace 文件并将其打开。以后都用它打开工程。</p>
<p>注意：如果打开 workspace 以后发现工程目录里面是空的，那就重新用 .xcodeproj 文件打开工程。然后关闭它，也关闭 workspace，然后再重新用 .xcworkspace 打开工程。这样应该就没什么问题了。</p>
<p>好了，这就是 Xcode 所需的全部设置。如果每个步骤都设置正确，那么现在工程目录中会有两个 Project。Pods 的 project 中包含 Realm 和 Das Quadrat 的库文件。</p>
<h2 id="在_Storyboards_中构建_UI_元素">在 Storyboards 中构建 UI 元素</h2><p>这个 App 的 UI 极其简单，一共就两个 UI 控件：map view 和 table view 。</p>
<p>Xcode 已经为你完成了大部分工作， Single View Application 模板包含了一个 <code>Main.storyboard</code>，它是程序入口。</p>
<p>接下来，配置 map view ，步骤如下：</p>
<ol>
<li>打开 <code>Main.storyboard</code> </li>
<li>在 Xcode 右下部分的 Object Library 里，找到 Map Kit View （<code>MKMapKitView</code>）</li>
<li>把它拖到 View Controller 里面，左上角顶格，宽度和 View Controller 一样，高度是 View Controller 的一半。（译者注：其实是 View Controller 的 View ，大家能理解就好）</li>
<li>接着，再从 Object Library 里找到 Table View （<code>UITableView</code>），并把它拖到 View Controller 里面，宽度与 View Controller 一样，高度填满屏幕的剩余部分。</li>
</ol>
<p>然后，给两个 View 设置右边距约束。首先，选中 map view ，点击 Pin 按钮（编辑区右下角的倒数第二个按钮，看起来像星球大战里面的战机…（译者注：感觉作者也被自己的比喻无语到了…））</p>
<p>点击以后，会有一个弹出框，操作步骤如下：</p>
<ol>
<li>取消 Constrain to margins 的选中状态</li>
<li>选中左、上、右的线，选中后会变成红色的高亮状态</li>
<li>每条线旁边都有一个输入框，确保输入框中的值都是 0</li>
<li>最后，点击 Add 3 constraints 按钮</li>
</ol>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_5.png" alt=""></p>
<p>接着，也给 table view 添加约束。步骤和之前一样，但是 table view 添加的是 左、下、右三个约束。同样需要注意 Constrain to margins 是未选中状态，然后点击 Add 3 constraints 按钮。</p>
<p>现在已经给两个 View 添加了以下这些约束：各自上下边距的约束，宽度和父容器相同。还差最后一个步骤，需要确保两个 View 的高度各占父容器的一半。</p>
<p>你可以通过给约束设置一个倍数来达到效果，但是以下是一个更简单的方法：</p>
<ol>
<li>同时选中 table view 和 map view（按住 Command 键并选中两者）</li>
<li>点击 Pin 按钮</li>
<li>选中 Equal Heights 选框</li>
<li>点击 Add 1 constraint 按钮</li>
</ol>
<p>OK，这个时候 Xcode 可能会有报错，别担心，照下面的步骤来解决：</p>
<ol>
<li>选中 map view，点击 Pin 按钮</li>
<li>取消 Constrain to margins，选中下边距约束，并在输入框中键入0</li>
<li>点击 Add 1 constraint</li>
</ol>
<p>现在，红色的线（报错）消失了，但是有可能会出现黄色的线（警告）。意思是说，展示的 frame 可能和添加的约束不一致。其实这个时候所有的约束都加了，只是 Interface Builder 没有正确显示更新而已。</p>
<p>解决方式：在 Document Outline 中，点击有小箭头的黄色按钮。</p>
<p>点击黄色的小箭头以后，会跳到一个新的界面。然后，在新的界面中点击黄色的三角形 -&gt; Update frames -&gt; Fix misplacement 。如果还有黄色三角，重复上一个步骤。有可能，更新后的 frame 不是你想要的，所以添加约束的时候就一定要注意，一定要添加对。（译者注：作者这里解决警告的方式太麻烦了，其实可以在 Document Outline 中选中 View ，点击 Pin 按钮右边的 Resolve Auto Layout Issues 按钮，然后选择下面的那个 Update frames 就行了）。</p>
<p>在添加约束的过程中很容易出错，最简单的解决方式是，在 Document Outline 中删除所有约束，重新来一遍。（译者注：同样，选中要删除约束的 View ，点击 Resolve Auto Layout Issues ，点击 Clear Constraints 就行。植入硬广一则：@saitjr 的<a href="http://www.saitjr.com/ios/ios-autolayout-demo.html" target="_blank" rel="external">Autolayout 案例讲解</a>）</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_7.png" alt=""></p>
<h2 id="构建_App_并解决错误">构建 App 并解决错误</h2><p>在开发过程中，应该时不时跑一下程序，这样可以及时发现错误并解决。</p>
<p>在有了一定的开发经验以后，写一点代码就运行程序的现象会越来越少。但如果你是新手，那就尽量将开发步骤细分，每改动一点，就跑起来看看效果。这样就可以将代码错误定位到最小范围。</p>
<p>运行程序有两个快捷键：Command + B 或者 Command + R。前者是编译，后者是编译并运行。在 Xcode 的左上角可以选择 iPhone 型号和版本。这里也可以选择使用真机测试，那需要加入苹果开发者计划。</p>
<p>刚好我们的程序有个错误，来看一下怎么解决。运行程序，先找到控制台（在 Xcode 底部窗口的右栏）。如图：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_8.png" alt=""></p>
<p>如果没找到底栏，可以在 Xcode 右上角打开底栏，然后点击底栏右边的按钮，打开右栏。（译者注：一图胜千言，如上图）</p>
<p>然后控制台上可以看到如下错误：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">2015</span>-<span class="number">11</span>-<span class="number">04</span> <span class="number">14</span><span class="symbol">:</span><span class="number">37</span><span class="symbol">:</span><span class="number">56.353</span> <span class="constant">Coffee</span>[<span class="number">85299</span><span class="symbol">:</span><span class="number">6341066</span>] *** <span class="constant">Terminating</span> app due to uncaught exception <span class="string">'NSInvalidUnarchiveOperationException'</span>, <span class="symbol">reason:</span> <span class="string">'Could not instantiate class named MKMapView'</span></span><br><span class="line">    *** <span class="constant">First</span> throw call <span class="symbol">stack:</span></span><br><span class="line">    (</span><br><span class="line">        <span class="number">0</span>   <span class="constant">CoreFoundation</span>                      <span class="number">0x0000000109fdff65</span> exceptionPreprocess + <span class="number">165</span></span><br></pre></td></tr></table></figure>
<p>苦逼的是，控制台显示的错误信息太复杂，而且，有些时候甚至连错误信息都没有显示。大多数运行时错误由以下三种组成：异常信息、崩溃原因和堆栈信息。</p>
<p>以上三个信息可以帮助你定位错误。举个例子，你可以通过异常信息找到抛出异常的代码段。堆栈信息显示的是报错前程序调用的类与方法。这个过程一般被称为回溯，可追溯到报错的代码。</p>
<p>现在来看看错误信息，其实很好理解：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="constant">Could</span> <span class="keyword">not</span> instantiate <span class="class"><span class="keyword">class</span> <span class="title">named</span> <span class="title">MKMapView</span></span></span><br></pre></td></tr></table></figure>
<p>咦，<code>MKMapView</code> 看起来很眼熟吧。对，刚刚才在 Interface Builder 里面见过，拖到界面上半部分的那个 View 就是。报错中出现的 “instantiate” 是实例化的意思，这是一个术语。错误含义是：编译器（Xcode 中，把代码转成二进制目标文件的工具）不能创建一个 <code>MKMapView</code> 给你。简单点理解就是：创建 map view 失败了。</p>
<p>其实，99%的错误信息都不告诉你怎么去解决问题，它们只是告诉你这里出错，却连错误原因都没写。</p>
<p>你能做的就两点：</p>
<ol>
<li>甩手不做了，剧终；</li>
<li>去 Google （度娘就算了，对英文支持太差）</li>
</ol>
<p>把错误信息复制下来，去 Google 吧，搜索结果一般是这样的：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/google-search.png" alt=""></p>
<p>点击第一个链接就行，这是个 Stack Overflow 的链接（一个专为程序员设计的问答网站）。这网站上的问题几乎涵盖了所有的编程语言，而且都解决得相当完美。</p>
<p>在 StackOverFlow 上解求问题的答案，你应该按照以下步骤：</p>
<ol>
<li>查看问题是否有答案，如果没有，就到 Google 里继续找。如果有些问题还没有答案，你也可以去回答。</li>
<li>回到我们的问题上来，撇开标题不看，答案通常隐藏在下面的评论当中。</li>
<li>找到被采纳的回答（回答下面有绿色的对勾），然后看看下面的评论（评论通常比回答有效）。左边的数字，是这个回答收到的赞。有时候被采用的回答不是最好的，所以也要留意评论和其他回答。</li>
<li>找到解决方案以后，不要盲目的照着做，要知其所以然。初学时，这可能会耗费大量时间，但是这些都是知识储备，以后肯定能派上用场。几乎每个程序员都有他们的知识缺口，这会削弱他们的技能。假如你能做到既知道错误出现原因，又能有效避免，那么你就是世上前 1% 的程序员了。</li>
</ol>
<p>那这个问题的原因到底是什么呢？其实是 <code>MapKit.framework</code> 没有导入到工程里面。看框架名字就知道， <code>MKMapView</code> 是被包含在这个外部框架里的。即使我们还没有直接显式的去调用 map view ，但也必须要导入框架到我们的工程里。</p>
<p>如果你通读了 StackOverflow 的解决方案，你会发现报错这种错的原因有很多。</p>
<p>根据以下步骤来解决我们的问题：</p>
<ol>
<li>在 Xcode 左导航栏上点击项目配置（左栏顶部蓝色的那一栏）</li>
<li>选择 Build Phases 选项卡</li>
<li>点击 Link Binary With Libraries ，展开列表</li>
<li>点击下面的 +- 按钮，会出来一个弹出框（这里选 + ）</li>
<li>搜索 mapkit </li>
<li>最后，双击 <code>MapKit.framework</code></li>
</ol>
<p>这样就把一个库导入到了工程中。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_10.png" alt=""></p>
<h2 id="处理地理位置">处理地理位置</h2><p>现在的工程没有报错了，接下来来看看下一个需求：地理位置。我们需要将用户的位置标记在 map view 上。</p>
<p>首先，需要将 Storyboard 中的 map view 和代码关联。在创建工程的时候，Xcode 就自动生成了 <code>ViewController.swift</code> 文件。这也是 Storyboard 中的 view controller 所关联的文件。</p>
<p>下面来做一个小测试，看看文件是否成功关联：</p>
<ol>
<li>打开 <code>ViewController.swift</code> 文件，看到 <code>class</code> 开头的那一行。这是在类的定义。包含的信息有：类名、父类、遵循的协议。在这个类中，类名是 <code>ViewController</code>。</li>
<li>打开 <code>Main.storyboard</code> 文件，在 Document Outline 中，找到顶上的一栏，这里应该标注的是 <code>View Controller Scene</code>。</li>
<li>在右上角点击 Identity Inpector （左起第三个按钮）</li>
<li>检查 Class 那一栏写得什么</li>
</ol>
<p>这样，就完成了 <code>ViewController</code> 与 Storyboard 的关联检查，如果你今后在 Storyboard 中创建了其他 view controller ，也可以在 Storyboard 中设置类名来进行关联。</p>
<h2 id="建立_Map_View_Outlet">建立 Map View Outlet</h2><p>现在，你已经知道 Storyboard 和代码是有关联的了，让我们为 Map View 添加 Outlet 吧。在你用自己的代码扩展 Map View 之前，需要将 Map View 的实例连接起来。</p>
<p>打开 <code>ViewController.swift</code> ，在第一个 <code>{</code> 下面添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> mapView:<span class="type">MKMapView</span>?</span><br></pre></td></tr></table></figure>
<p>这行代码含义如下：</p>
<ul>
<li>在 Swift 中，使用变量前需要先定义。在变量定义的同时，也可以进行初始化。在上面的代码中，并没有进行初始化，默认是 <code>nil</code> （空）。</li>
<li>上面代码给 <code>ViewController</code> 类的对象声明了一个实例属性，并且该属性在该类的每个实例对象中，都是唯一的。与实例属性相对的是类属性，类属性在每个实例对象中都是相同的。</li>
<li>属性名称为 <code>mapView</code> ，类型为 <code>MKMapView</code> 。<code>MKMapView</code> 是 <code>MapKit</code> 框架里的一个类。</li>
<li><code>@IBOutlet</code> 告诉 Xcode 这个属性将会作为 outlet 。outlet 会与 Storyboard (或 xib) 中的 UI 元素相关联。</li>
<li><code>var</code> 表示这个属性是可变的，与之相对的是 <code>let</code> ，表示常量，不可变。（译者注：可参照 <code>NSMutableArray</code> 与 <code>NSArray</code>）</li>
<li>关于 <code>?</code> 标识，是表明变量是个可选类型。这是 Swift 的一大特点，表示对象可以是 <code>nil</code> （空），与之相对的是 non-nil 。 可选类型提高了程序的安全性和可读性，之后也会用到很多可选类型。</li>
<li>为什么这行代码要放在这（class 的大括号内的顶部）呢？这表示变量的作用域是当前类。还有一种作用域是方法作用域，即在方法中定义的变量，只在当前方法中可用，当然，如果是全局作用域（全局变量），那就是在全局都可用了。</li>
</ul>
<p>是不是觉得变量、属性有点搞不清楚？变量就是用来存储数据的；而属性，它其实也是一个变量，但是他属于一个类。同时，属性分为两种：实例属性和类属性。</p>
<p>是不是觉得类、实例、类型有点搞不清楚？类就是具有同种属性的对象，它可以创建该对象的很多副本。类创建后的一个个副本就是实例。这里所说的“类型”其实是有歧义的，你可以想象成和“类”差不多的东西。</p>
<p>是不是觉得定义（声明）、初始化、实例有点搞不清楚？OK，首先，定义（声明）：即告诉编译器，要用的变量的名称与类型。初始化：给变量一个初始值。初始值可以写在声明之后，如果没有赋值，那默认为 <code>nil</code> 。实例：表示这个变量是一个实例（类的“副本”）。严格意义上来讲，应该解释为该变量是一个实例化对象。</p>
<p>好了，现在回到项目中来。这时，Xcode 应该会在当前行报错，错误信息是：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="constant">Use</span> of undeclared type <span class="constant">MKMapView</span></span><br></pre></td></tr></table></figure>
<p>这是因为 <code>MapKit</code> 还没有导入到当前文件。因此，在类定义的上面，引入 <code>UIKit</code> 代码的下面，添加这句话：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MapKit</span><br></pre></td></tr></table></figure>
<p>现在，来关联一下 outlet：</p>
<ol>
<li>打开 <code>Main.Storyboard</code> 。</li>
<li>显示 Document Outline，点击 View Controller Scene 。</li>
<li>打开左边栏的 Connections Inspector 。</li>
<li>在列表中找到 <code>mapView</code> 属性。（译者注：如果没找到，也可以通过 Show the Assistant editor 直接在代码中关联）</li>
<li>然后，把这个属性右边的小圆点拖拽到编辑器上的 map view 中。</li>
</ol>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_11.png" alt=""></p>
<h2 id="添加第一个方法">添加第一个方法</h2><p>OK，现在来做下 map view 的相关实现。在 <code>ViewController</code> 类中添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(animated: Bool)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> mapView = <span class="keyword">self</span>.mapView</span><br><span class="line">    &#123;</span><br><span class="line">        mapView.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你是不是在问添加到哪里？你想放哪放哪，只要在类的大括号结束前就行，就是这么任性。</p>
<p>所有方法都必须在类作用域之内。类作用域即类定义之后的 <code>{</code> 到与之匹配的 <code>}</code> 之间。</p>
<p>你可以说这是平衡之美，每个 <code>{</code> 都有与之对应的 <code>}</code> 。同时，程序员也会使用缩进来突出作用域层级。一般来说，使用的是 1 个 tab 或 4 个空格来进行缩进。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_12.png" alt=""></p>
<p>下面来解释下刚才写的方法：</p>
<ul>
<li>方法，是类中的一块代码整体。这些代码相对独立，并实现某些特定的功能。方法能在当前类中调用，也可以在当前工程的其他地方被调用。</li>
<li>这个方法叫 <code>viewWillAppear</code>，带一个参数。这个参数是一个变量，在方法被调用的时候会传进来的。参数作用域在整个方法范围内。在父类调用的 <code>viewWillAppear</code> 方法中，参数名为 <code>animated</code> ，类型为 <code>Bool</code> （布尔值，真或假）。</li>
<li>所有方法都以 <code>func</code> 关键字开头，这是 <code>function</code> 的缩写。在这个例子中，<code>viewWillAppear</code> 是重写的父类方法，所以要加上 <code>override</code> 关键字。将父类的同名方法实现并替换成当前类的实现。父类与重写概念都属于面向对象编程范式范畴（ Object Oriented Programming ）。这个概念在本文中不做讲解。</li>
<li>该方法的主体：先将可选绑定的 <code>self.mapView</code> 赋值给了常量 <code>mapView</code> 。使用可选绑定可以验证可选变量是否为 <code>nil</code> 。如果有值，<code>if</code> 中的代码才会执行。同时，常量 <code>mapView</code> 只在 <code>if</code> 作用域内有效。</li>
<li>在 <code>if</code> 条件语句中，将 <code>mapView</code> 的 <code>delegate</code> 属性设置给当前类 <code>self</code> 。换句话说，当 <code>self.mapView</code> 不为 <code>nil</code> 的时候，<code>mapView</code> 的 <code>delegate</code> 就是 <code>self</code> 。再简单点说：如果当前类实例不为空，那就是 <code>mapView</code> 的 <code>delegate</code> （译者注：这里作者解释了N多遍，代码胜千言…）。之后还会用到其他 <code>delegate</code>。</li>
</ul>
<p>完成 <code>delegate</code> 的设置之后，Xcode 又报错了。告诉我们，<code>self</code> 不能作为 <code>delegate</code>，因为当前类 <code>ViewController</code> 没有遵循  <code>MKMapViewDelegate</code> 。现在进行修正：</p>
<p>改一下类定义的那行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">MKMapViewDelegate</span></span></span><br></pre></td></tr></table></figure>
<h2 id="获取用户地理位置">获取用户地理位置</h2><p>现在 map view 已经配置好了，你可以将注意力集中在获取地理位置上了。</p>
<p>在 <code>ViewController</code> 类中，添加以下两个属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> locationManager:<span class="type">CLLocationManager</span>?</span><br><span class="line"><span class="keyword">let</span> distanceSpan:<span class="type">Double</span> = <span class="number">500</span></span><br></pre></td></tr></table></figure>
<p>第一个属性 <code>locationManager</code> 是类型为 <code>CLLocationManager</code> 的变量。这是一个可选类型，所以它的值可以是 <code>nil</code> 。第二个属性是个类型为 <code>Double</code> 的常量，值为 500 。<code>Double</code> 即双精度浮点数类型（有效位长度是 <code>Float</code> 的两倍）。</p>
<p>现在，给当前类添加下面这个方法。可以将代码插入到 <code>viewWillAppear</code> 的下面。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(animated: Bool)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> locationManager == <span class="literal">nil</span> &#123;</span><br><span class="line">        locationManager = <span class="type">CLLocationManager</span>()</span><br><span class="line"></span><br><span class="line">        locationManager!.delegate = <span class="keyword">self</span></span><br><span class="line">        locationManager!.desiredAccuracy = kCLLocationAccuracyBestForNavigation</span><br><span class="line">        locationManager!.requestAlwaysAuthorization()</span><br><span class="line">        locationManager!.distanceFilter = <span class="number">50</span> <span class="comment">// Don't send location updates with a distance smaller than 50 meters between them</span></span><br><span class="line">        locationManager!.startUpdatingLocation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Whoah，这段代码是啥意思？</p>
<ol>
<li>首先，用 <code>if</code> 条件语句判断 <code>locationManager</code> 变量的值是否为空。</li>
<li>然后，实例化 <code>CLLocationManager</code> ，并赋值给 <code>locationManager</code>。换句话说：<code>locationManager</code> 变量指向的就是 <code>CLLocationManager</code> 的实例对象。 location manager 对象能用来获取用户地址。</li>
<li>接着，我们给 <code>locationManager</code> 设置了一些属性。将 delegate 设为当前类，并设置了 GPS 精度。还调用了 <code>requestAlwaysAuthorization()</code> 方法，这个方法在 app 中弹出提示框，提示用户 app 会用到 GPS ，并征得用户授权。</li>
<li>最后，调用 <code>startUpdatingLocation</code> 方法，location manager 就会开始轮询 GPS 坐标，并将最新的坐标通过代理方法传回。如果实现了代理方法，我们就能拿到用户的地理位置信息了。</li>
</ol>
<p>你是否注意到 <code>locationManager</code> 代码后面的感叹号？这是因为 <code>locationManager</code> 是可选值，所以有可能是 <code>nil</code> 。当我们要访问这个变量时，就需要先解包，确保非空。根据这个访问约定，解包有两种方式：</p>
<ul>
<li><strong>可选绑定</strong>。使用 <code>if let definitiveValue = optionalValue { …</code> 这样的结构（译者注：关于 <code>if let</code> 的使用，可以参考 SwiftGG 翻译组的另一篇文章：<a href="http://swift.gg/2015/11/06/if-let-assignment/" target="_blank" rel="external">if-let赋值运算符</a>）</li>
<li><strong>强制解包</strong>。使用感叹号，如 <code>optionalValue!</code>。</li>
</ul>
<p>在写第一个方法的时候，我们用的就是可选绑定的方式。当可选变量不为 <code>nil</code> 时，使用 <code>if let</code> 来定义一个新的变量。</p>
<p>强制解包不是一个很好的方案。要在需要解包的变量后面加上感叹号，那么它就会从可选状态 “强制转换” 为不可选状态。不幸的是，当你强制解包一个值为 <code>nil</code> 的可选变量时，程序会直接崩溃。 </p>
<p>所以不能对值为 <code>nil</code> 的可选变量强制解包。在上面的代码中，强制解包就不存在这个问题。为什么呢？因为在强制解包之前，我们先将 <code>CLLocationManager</code> 的实例变量赋给了 <code>locationManager</code> ，所以可以保证 <code>locationManager</code> 不是 <code>nil</code>。</p>
<p>OK，回到代码部分。当我们添加了上面方法以后，Xcode 又报错了…让我们继续来解决问题吧！</p>
<p>错误之处：我们想让 <code>self</code> 作为 <code>locationManager</code> 的委托（ <code>delegate</code> ），但是并没有遵循相应的协议。在类定义的地方，添加以下代码来遵循协议：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">MKMapViewDelegate</span>, <span class="title">CLLocationManagerDelegate</span></span></span><br></pre></td></tr></table></figure>
<p>OK，给 <code>ViewController</code> 类添加以下代理方法。放在上一个方法的后面就行。（译者注：添加的这个方法已经被弃用了。取而代之的是 <code>func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation])</code> 方法。）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(manager: CLLocationManager, didUpdateToLocation newLocation: CLLocation, fromLocation oldLocation: CLLocation)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> mapView = <span class="keyword">self</span>.mapView &#123;</span><br><span class="line">        <span class="keyword">let</span> region = <span class="type">MKCoordinateRegionMakeWithDistance</span>(newLocation.coordinate, distanceSpan, distanceSpan)</span><br><span class="line">        mapView.setRegion(region, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法又在做什么呢？</p>
<ul>
<li>首先，方法名是 <code>locationManager:didUpdateToLocation:fromLocation</code> 。这个方法使用了命名参数，说明他的方法名会随着参数名的不同而不同（变量在方法内部）。简言之，这个方法有三个参数：调用该方法的 location manager，最新的 GPS 坐标，上一次的 GPS 坐标。</li>
<li>在方法内部，先使用可选绑定对 <code>self.mapView</code> 解包。当 <code>self.mapView</code> 不为 <code>nil</code> 时，<code>mapView</code> 变量就是它解包以后的值，然后执行 <code>if</code> 条件中的对应语句。</li>
<li>在 <code>if</code> 语句中，根据新的 GPS 坐标与之前定义的 <code>distanceSpan</code> 两个值，计算得到 <code>region</code> 值。这句代码创建了一个以 <code>newLocation</code> 为中心，500 * 500 的一个矩形区域（500 就是 <code>distanceSpan</code> 的值）。</li>
<li>最后，调用 map view 的 <code>setRegion</code> 方法。<code>animation</code> 参数设为 <code>true</code> ，这样 <code>region</code> 改变就会有动画。换句话说：地图可能会有平移或缩放操作，所以要保证他每次都能显示 500 * 500 的区域。</li>
</ul>
<p>最后一件事，为了让用户同意地理位置授权，你需要在 Xcode 中设置一个特别的授权请求。这个请求要用一句话涵盖为什么要获取用户地理位置。iPhone 会在申请授权时，弹框显示这句话（即在调用 <code>requestAlwaysAuthorization()</code> 方法时）。</p>
<p>配置请求的步骤如下：</p>
<ol>
<li>在工程目录中打开 <code>info.plist</code> 文件。</li>
<li>右键点击列表，选择 Add Row。</li>
<li>在 key 列，填入 <code>NSLocationAlwaysUsageDescription</code> 。</li>
<li>在 type 列，将类型改为 <code>String</code>。</li>
<li>在 value 列，填入 <code>We need to get your location!</code> （译者注：这个 value 就是申请授权并弹框时，显示给用户的文本）</li>
</ol>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/info-plist.png" alt=""></p>
<h2 id="运行程序">运行程序</h2><p>现在，让我们运行一下程序。确保你选择了相应的 iPhone Simulator，运行快捷键 Command - R 。第一次运行 App ，会弹出是否允许获取地理位置的授权框，选择 Allow，如下图。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_14.png" alt=""></p>
<p>当我们点击了 Allow 以后，map view 好像并没有更新位置。这是因为模拟器没有 GPS ，所以…我们需要模拟一下：</p>
<p>当 app 在模拟器上跑起来以后，在以下两种方式中，选择一种进行配置：</p>
<ul>
<li>iPhone Simulator: Debug -&gt; Location -&gt; Apple.</li>
<li>Xcode: Debug -&gt; Simulate Location -&gt; [随便选一个]</li>
</ul>
<p>当你选择了一个地理位置后，map view 就会定位到对应位置，并缩放到合适的大小。（译者注：可能定位这一步会有点慢，map 半天没有更新或没有图像出来，等等就好了）</p>
<p>搞定了吗？完美！</p>
<h2 id="从_Foursquare_上读取地理信息">从 Foursquare 上读取地理信息</h2><p>你以为到这一步就完了吗？其实并没有，还会有更有趣的事情！我们还需要使用 Das Quadrat 来读取 Foursquare 上的数据，然后用 Realm 将数据存入本地。</p>
<p>在使用 Foursquare 的 API 之前，首先需要到开发者中心注册这个 app 。这个步骤很简单。（译者注：如果只是练习，没必要去注册，直接使用作者提供的 Client ID 和 Client Secret 即可）</p>
<ul>
<li>首先，确保你有一个 Foursquare 账号，没有可以去注册一个：<a href="https://foursquare.com/" target="_blank" rel="external">foursquare.com</a>。</li>
<li>然后，进入 <a href="https://developer.foursquare.com/" target="_blank" rel="external">developer.foursquare.com</a>，点击顶部蓝色菜单栏中的 My Apps 。</li>
<li>接着，点击右边绿色的 new app 按钮。</li>
<li>接着，填写以下信息：<ul>
<li>App Name： Coffee</li>
<li>Download / Welcome page URL: <a href="http://example.com" target="_blank" rel="external">http://example.com</a></li>
</ul>
</li>
<li>最后，点击保存</li>
</ul>
<p>保存以后，网页自动跳转到了你创建的 app 页面。记录下 Client ID 和 Client Secret ，之后会用到。（译者注：作者提供的 Client ID 和 Client Secret 在后面的代码里有提供）</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_15.png" alt=""></p>
<h2 id="构建_Foursquare_API_连接">构建 Foursquare API 连接</h2><p>OK，下面开始连接 Foursquare API 。这里我们会用到单例模式。我们要做的部分用单例模式简直是完美。</p>
<p>单例是一个类的实例，它在整个 app 生命周期中，只允许有一份拷贝。所以你不能去创建第二个实例。为什么要使用单例呢？虽然单例的使用饱受争议，但是它有一个明显的优势：可以避免对外部资源发起并发连接。</p>
<p>设想一下。如果对网站同时发起两个请求，并且他们会写入同一个特定的文件，会发送什么呢？这样就很有可能读到脏数据，除非网站知道这两个请求发起的先后顺序。</p>
<p>而单例就能确保只有 app 的一部分能访问外部资源。在单例中，有很多种实现方式能保证没有请求冲突存在。将请求加入队列并添加依赖就是其中一种解决方案。这又是一个很大的主题，本文不进行讲解。</p>
<p>不扯了，继续实现：</p>
<ul>
<li>在工程目录中，右键点击 Coffee 文件夹。</li>
<li>选择 New File。</li>
<li>选择 iOS -&gt; Source 中的 Swift File ，点击继续。</li>
<li>文件命名为 <code>CoffeeAPI.swift</code> ，确认 target 中的 Coffee 是选中状态，选择和其他 swift 文件统计目录，点击 Create ，保存文件。</li>
</ul>
<p>Whoah，新文件里面空空如也！让我们来加点料吧。在 import 代码的后面，添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QuadratTouch</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"><span class="keyword">import</span> RealmSwift</span><br></pre></td></tr></table></figure>
<p>然后，添加：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">API</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">notifications</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">let</span> venuesUpdated = <span class="string">"venues updated"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码很简洁对吧。首先，你正确地引入了一些需要的库（Quadrat, MapKit, Realm），然后使用 <code>struct</code> 创建了一个名为 <code>venuesUpdated</code> 的静态常量。之后，通过以下方式访问该变量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">API</span>.notifications.venuesUpdated</span><br></pre></td></tr></table></figure>
<p>接着，键入：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeAPI</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedInstance = <span class="type">CoffeeAPI</span>()</span><br><span class="line">    <span class="keyword">var</span> session:<span class="type">Session</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码的作用：</p>
<ul>
<li>告诉 Xcode 编译器，当前类名为 <code>CoffeeAPI</code> 。这是一个单独的 Swift 类，没有继承 <code>NSObject</code>。</li>
<li>声明一个静态常量 <code>sharedInstance</code> ，类型为 <code>CoffeeAPI</code> 。这个 <code>sharedInstance</code> 只有 <code>CoffeeAPI</code> 类才能访问，并且在 app 启动的时候就已经被初始化了。</li>
<li>声明一个类型为 <code>Session?</code> 的可选变量 <code>session</code> （该类型包含在 <code>Das Quadrat</code> 中）。</li>
</ul>
<p>之后，我们访问 Coffee API 单例的方式都将是 <code>CoffeeAPI.sharedInstance</code> 。你可以在任何地方，通过这种方式访问单例，并且，访问的都是同一个对象，这也正是单例的一大特点。</p>
<p>接着，需要写一个构造器。给当前类添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Initialize the Foursquare client</span></span><br><span class="line">    <span class="keyword">let</span> client = <span class="type">Client</span>(clientID: <span class="string">"..."</span>, clientSecret: <span class="string">"..."</span>, redirectURL: <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> configuration = <span class="type">Configuration</span>(client:client)</span><br><span class="line">    <span class="type">Session</span>.setupSharedSessionWithConfiguration(configuration)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.session = <span class="type">Session</span>.sharedSession()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造器是一个会在类实例化的时候调用的方法。这也是实例化时，系统自动调用的第一个方法。</p>
<p>还记得之前在 Foursquare 开发者网站上复制的  Client ID 和 Client Secret 吗？粘贴到下面代码中。可以先不填 <code>redirectURL</code> 参数。向下面这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> client = <span class="type">Client</span>(clientID: <span class="string">"X4I3CFADAN4MEB2TEVYUZSQ4SHSTXSZL34VNP4CJHSJGLKPV"</span>, clientSecret: <span class="string">"EDOLJK3AGCOQDRKVT2GK5E4GECU42UJUCGGWLTUFNEF1ZXHB"</span>, redirectURL: <span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p>OK，继续。复制下面的代码，粘贴在 <code>CoffeeAPI</code> 类外面（即最后的大括弧的后面）。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CLLocation</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">parameters</span><span class="params">()</span></span> -&gt; <span class="type">Parameters</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> ll      = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.coordinate.latitude)</span>,<span class="subst">\(<span class="keyword">self</span>.coordinate.longitude)</span>"</span></span><br><span class="line">        <span class="keyword">let</span> llAcc   = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.horizontalAccuracy)</span>"</span></span><br><span class="line">        <span class="keyword">let</span> alt     = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.altitude)</span>"</span></span><br><span class="line">        <span class="keyword">let</span> altAcc  = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.verticalAccuracy)</span>"</span></span><br><span class="line">        <span class="keyword">let</span> parameters = [</span><br><span class="line">            <span class="type">Parameter</span>.ll:ll,</span><br><span class="line">            <span class="type">Parameter</span>.llAcc:llAcc,</span><br><span class="line">            <span class="type">Parameter</span>.alt:alt,</span><br><span class="line">            <span class="type">Parameter</span>.altAcc:altAcc</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> parameters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这又是什么呢？这是一个 <code>extension</code> ，可以给当前类扩展其他的方法（译者注：关于 <code>extension</code> 的知识点，可以查看 SwiftGG 翻译组的其他文章：<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/21_Extensions.html" target="_blank" rel="external">扩展基础知识</a>。延伸到程序结构设计方面，还有进阶的 <a href="http://swift.gg/2015/12/15/mixins-over-inheritance/" target="_blank" rel="external">Mixins 比继承更好</a>）。无需创建新的类，就可以给 <code>CLLocation</code> 类扩展一个名为 <code>parameters()</code> 的方法。每次使用 <code>CLLocation</code> 的实例时，这个 <code>extension</code> 就会被加载，你可以通过实例来调用 <code>parameters</code> 方法，即使这个方法没包含在原生的 <code>MapKit</code> 中。</p>
<p>注意：不要混淆 Swift 中 <code>extension</code> 和编程术语 <code>extend</code> 。前者是给基类添加新的方法，后者意思是父类与子类间的继承关系。</p>
<p><code>parameter</code> 方法返回一个 <code>Parameters</code> 的实例对象。<code>Parameters</code> 是一个字典，里面包含了一些参数信息（ GPS 坐标和精度）。（译者注：<code>Parameters</code> 是在 <code>Session.swift</code> 中定义的 <code>typealias</code>，完整定义为：<code>public typealias Parameters = [String:String]</code> ）。</p>
<h2 id="给_Foursquare_发送请求">给 Foursquare 发送请求</h2><p>接下来，让我们从 Foursquare 获取数据吧。Foursquare 内部有一个 HTTP REST API 可以返回 JSON 数据。幸运的是，我们不需要知道这些，因为 Das Quadrat 库已经帮我们搞定了一切。</p>
<p>从 Foursquare 请求数据就和调用 <code>session</code> 里的属性一样简单，同时请求数据使用的是该属性里很多方法中的一个。这个方法返回一个 <code>Task</code> 的实例对象，即异步后台任务的引用。我们可以用闭包的形式实现，代码大致如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> searchTask = session.venues.search(parameters)</span><br><span class="line">    &#123;</span><br><span class="line">        (result) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do something with "result"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>session</code> 里的地理属性包含了与 Foursquare API 通讯的所有 venues 信息。你提供的这个 search 方法是带有参数（上段代码中的 parameters ）的，还有第二个闭包作为参数，该闭包会在 search 方法完成后执行。同时，该方法会返回一个耗时的后台 <code>Task</code> 引用。你可以在任务完成之前用它来停止，或着在你代码的其他地方用它检查进度。</p>
<p>OK，现在来看看下面这个方法。复制并粘贴到你的代码里，即放在初始构造函数的后面，但在 CoffeeAPI 这个类的右括号前面。接下来，我们会看到这个方法的用途。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">getCoffeeShopsWithLocation</span><span class="params">(location:CLLocation)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> session = <span class="keyword">self</span>.session</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> parameters = location.parameters()</span><br><span class="line">        parameters += [<span class="type">Parameter</span>.categoryId: <span class="string">"4bf58dd8d48988d1e0931735"</span>]</span><br><span class="line">        parameters += [<span class="type">Parameter</span>.radius: <span class="string">"2000"</span>]</span><br><span class="line">        parameters += [<span class="type">Parameter</span>.limit: <span class="string">"50"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start a "search", i.e. an async call to Foursquare that should return venue data</span></span><br><span class="line">        <span class="keyword">let</span> searchTask = session.venues.search(parameters)</span><br><span class="line">            &#123;</span><br><span class="line">                (result) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> response = result.response</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> venues = response[<span class="string">"venues"</span>] <span class="keyword">as</span>? [[<span class="type">String</span>: <span class="type">AnyObject</span>]]</span><br><span class="line">                    &#123;</span><br><span class="line">                        autoreleasepool</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line">                                realm.beginWrite()</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">for</span> venue:[<span class="type">String</span>: <span class="type">AnyObject</span>] <span class="keyword">in</span> venues</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">let</span> venueObject:<span class="type">Venue</span> = <span class="type">Venue</span>()</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> <span class="keyword">let</span> id = venue[<span class="string">"id"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">                                    &#123;</span><br><span class="line">                                        venueObject.id = id</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> <span class="keyword">let</span> name = venue[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">                                    &#123;</span><br><span class="line">                                        venueObject.name = name</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span>  <span class="keyword">let</span> location = venue[<span class="string">"location"</span>] <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>]</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="keyword">if</span> <span class="keyword">let</span> longitude = location[<span class="string">"lng"</span>] <span class="keyword">as</span>? <span class="type">Float</span></span><br><span class="line">                                        &#123;</span><br><span class="line">                                            venueObject.longitude = longitude</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">if</span> <span class="keyword">let</span> latitude = location[<span class="string">"lat"</span>] <span class="keyword">as</span>? <span class="type">Float</span></span><br><span class="line">                                        &#123;</span><br><span class="line">                                            venueObject.latitude = latitude</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">if</span> <span class="keyword">let</span> formattedAddress = location[<span class="string">"formattedAddress"</span>] <span class="keyword">as</span>? [<span class="type">String</span>]</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            venueObject.address = formattedAddress.joinWithSeparator(<span class="string">" "</span>)</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    realm.add(venueObject, update: <span class="literal">true</span>)</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">do</span> &#123;</span><br><span class="line">                                    <span class="keyword">try</span> realm.commitWrite()</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">"Committing write..."</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">catch</span> (<span class="keyword">let</span> e)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">"Y U NO REALM ? <span class="subst">\(e)</span>"</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">NSNotificationCenter</span>.defaultCenter().postNotificationName(<span class="type">API</span>.notifications.venuesUpdated, object: <span class="literal">nil</span>, userInfo: <span class="literal">nil</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        searchTask.start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么多代码，你能从里面分辨出它完成的 5 个主要的任务吗？</p>
<ol>
<li>配置并启动 API 请求。</li>
<li>使用闭包实现请求的 Completion handler。</li>
<li>解析请求返回的数据，并开启 Realm 事务来处理。</li>
<li>使用 for-in 循环遍历所有的地理数据。</li>
<li>在 Completion handler 的最后发送通知。</li>
</ol>
<p>接下来，让我们一行行的来解释一下：</p>
<h3 id="设置请求的准备动作">设置请求的准备动作</h3><p>首先，使用可选绑定检查 <code>self.session</code> 是否为空。如果非空的话，常量 <code>session</code> 会被赋值解包后的值。</p>
<p>接着，<code>location</code> 的 <code>parameters()</code> 方法被调用。你问这个 <code>location</code> 是从哪里来的？你可以看下 <code>getCoffeeShopsWithLocation</code> 方法后面的那个参数。每次你调用这个方法，你也必须传入一个 <code>location</code> 参数，并检查传入的参数是不是你之前写的。</p>
<p>最后，我们添加了一个新的数据项到 <code>parameters</code> 字典。该数据项使用 <code>Parameter.categoryId</code> 作为 key ，字符串 <code>4bf58dd8d48988d1e0931735</code> 作为 value 。这个字符串就是之前 Foursquare 上 <code>Coffeeshops</code> 目录的编号，因此，没什么特殊的。</p>
<h3 id="配置请求">配置请求</h3><p>接着，让我们来配置真正的请求。获取 <code>session</code> 的 <code>venues</code> ，并开始搜寻这个 <code>venues</code> 。该方法有两个参数：你刚才创建的 <code>parameters</code> 字典和闭包。现在使用的闭包的形式叫尾随闭包（ trailing closure ）。它作为该方法的最后一个参数，没有采用圆括号括起来的形式，而是将它写在方法外部并用大括号括起来。这是个很耗时的方法，因此，我们并没有让它自动开始执行，而是在本方法的末尾再执行。</p>
<h3 id="书写闭包">书写闭包</h3><p>接着，我们进到闭包里去看看。值得注意的一点是，尽管这些代码看上去连续的，但是它们不会一个一个按你看到的顺序执行。该闭包会在搜寻任务完成后执行。当数据从 HTTP API 返回到应用中时，代码会从 <code>let searchTask …</code> 这行执行到 <code>searchTask.start()</code> 这行，接着会跳到 <code>if let response = …</code> 这行。</p>
<p>闭包的格式是这样的：<code>(result) -&gt; Void in</code> 。 <code>result</code> 作为闭包里的参数是可以拿到值的，并且该闭包没有返回值（ <code>Void</code> ）。这一点和普通的方法有点相似。</p>
<h3 id="解析数据">解析数据</h3><p>接着，我们使用了 <code>if</code> 可选绑定：</p>
<ul>
<li>如果 <code>result.response</code> 非空，就将其赋值给常量 <code>response</code> ，并继续执行 <code>if</code> 条件内的语句。</li>
<li>如果 <code>response[“venues”]</code> 非空，并且可以转换成 <code>[[String: AnyObject]]</code> 类型。</li>
</ul>
<p>这个类型转换可以确保我们拿到的是正确的类型。如果转换失败，即可选绑定失败，就不会执行 <code>if</code> 条件内的语句。这个方法有一石二鸟的效果：检查对应的值是否为空，同时尝试将数据转换成合适的类型。</p>
<p>你能说一下 <code>venues</code> 的类型是什么吗？首先它是一个数组，每个元素是字典类型，每个字典是以 <code>String</code> 类型为 key ， <code>AnyObject</code> 类型为 value 。</p>
<h3 id="自动释放内存">自动释放内存</h3><p>接着，我们开启了一个自动释放池。自动释放池本身就是一个很大的话题。你知道 iPhone 是如果进行内存管理的吗？</p>
<p>本质上来说，内存里的对象在没有被使用时，会在某个时间点从内存里被移除。有点类似垃圾回收，但还是有点区别的。当自动释放池里的一个变量被释放时，这个变量就和这个自动释放池紧紧联系在一起了。当这个自动释放池自己要被释放时，在内的所有变量的内存也会一起被释放。这个有点像，对内存释放的批处理。</p>
<p>为什么要这么做呢？因为，可以通过创建自己的自动释放池，来帮助 iPhone 系统管理内存。我们在处理数以百计的地理对象时，如果没有放在自己的自动释放池里，内存就会被未释放的内存拥塞了。而，能释放这些内存的时间点是在该方法结束的时候。因此，你在冒着用光内存的风险操作（自动释放的机理导致不会立马释放无用的内存）。使用自己创建的自动释放池，你就可以影响内存释放的时间点并能避免被内存不足困扰。（译者注：ARC 下，在方法内创建的临时变量，系统都会自动加上 <code>__strong</code> 修饰符，并在出该变量作用域时，进行 <code>release</code> 。所以，一般在处理有大量的临时变量的方法时，会自己加上 <code>autoreleasepool</code> ，提前释放已经不用的临时变量，及时释放内存。）</p>
<h3 id="开启_Realm">开启 Realm</h3><p>接着，你用 <code>let realm = try! Realm()</code> 这样一行代码初始化了一个 Realm 对象。你在从 Realm 获取数据之前肯定需要有一个 Realm 对象。 <code>try!</code> 关键字是 Swift 的一种错误处理。用了这个关键字，我们其实声明了：当前不会处理来自 Realm 的错误。虽然这样的做法对生产环境来说并不推荐，但是可以让我们的代码变得相当简单。</p>
<h3 id="开启事务处理">开启事务处理</h3><p>接下来，调用 Realm 实例方法 <code>beginWrite</code> 。其实这代码开启了一个事务。让我们先来谈谈效率的问题。以下哪种方式更高效：</p>
<ul>
<li>创建一个文件指针，打开文件，写入 1x 数据到文件里，关闭文件，再重复之前的步骤直到写入 50x 数据。</li>
<li>创建一个文件指针，打开文件，写入 50x 数据到文件里，关闭文件。</li>
</ul>
<p>确切地说，当然是后者更高效。和其他数据库系统一样， Realm 也是把数据存储在文本文件里的。文件处理就意味着：操作系统（ operation system ， OS ）需要打开着文件，赋予程序写入权限，并让程序可以一个字节一个字节的向文件里写入数据。</p>
<p>你需要使用打开一次文件，一次写入 50 个 Realm 对象的方式，而不是一次次的写入文件。因为，每个对象之间非常相似，它们可以被连续地写入。这种方式更快一点，其实这就是事务。</p>
<p>为了完整性，如果事务中的一次写入失败了，那么所有的写入都会失败。这种机制其实来源于银行和账户：如果你写入了 50 个事务到一个分类账簿，而其中的一个（比如，账上没有钱）被证明是错误的，但是你又不能找出来。你必须阻止这种“污染”整个账簿的行为。这时候使用事务就再好不过了，成功都写入，失败都回滚，这样的方式也能减少数据出错的风险。</p>
<h3 id="遍历地理数据">遍历地理数据</h3><p>OK，现在来看看 for-in 循环。你已经可选绑定上面创建了 <code>venues</code> 变量。在 for-in 循环遍历整个数组时，每次循环里都是数组中的一个元素：<code>venue</code>。</p>
<p>首先，创建了一个 <code>Venue</code> 类型的 <code>venueObject</code> 变量。这行代码暂时会报错，因为现在还没有一个类叫 <code>Venue</code> 。你等会就会添加这个类的，因此先放一边吧。</p>
<p>接着，一系列的可选绑定来了。每个可选绑定都尝试去访问 <code>venue</code> 的键值对（ key-value pair ），同时尝试将其转换成合适的类型。举个例子，当 <code>venue</code> 包含一个键 <code>id</code> ，并尝试转换成 <code>String</code> 类型，假如成功的话，会将 <code>venueObject</code> 的 <code>id</code> 属性赋值给它。</p>
<p><code>location</code> 的可选绑定看上去复杂一点，但是其实一点也不复杂。仔细看，你会发现 <code>lat</code> 、 <code>lng</code> 、 <code>formattedAddress</code> 这些都是<code>location</code> 的一部分 key （并不是 <code>venue</code> 的）。它们其实在数据结构中是属于同一层的。</p>
<p>接下来，是 for-in 循环最后一行代码：<code>realm.add(venueObject, update: true)</code> 。这行代码会把 <code>venueObject</code> 添加到 Realm，并写入到数据库（仍然是以事务的形式写入）。方法中的第二个参数 <code>update</code> 表示：当对应传入的对象已经存在，就用新数据覆盖掉之前写入的数据。之后，你会发现每个 <code>Venue</code> 对象都有一个唯一的编号，所以 Realm 可以根据编号知道对象已经存在。</p>
<h3 id="错误处理">错误处理</h3><p>OK，现在 Realm 已经将事务中所有要写入的数据保存起来了，接下来将尝试写入到 Realm 数据库。这一步当然也有可能出错了。庆幸的是，这里可以使用 Swift 的错误处理机制。步骤如下：</p>
<ol>
<li>尝试执行可能出错的操作。</li>
<li>如果出错，就抛出错误。</li>
<li>操作的调用者抓住对应错误。</li>
<li>进行错误处理。</li>
</ol>
<p>在大多数语言里，这种机制以 try-catch 闻名，但是 Swift 称它为 do-catch （同时，也将 do-while 重命名为 repeat-while ）。你的代码大概是这样子的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> realm.commitWrite()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Committing write..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">let</span> e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Y U NO REALM ? <span class="subst">\(e)</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>realm.commitWrite()</code> 这行代码就是在尝试执行可能出错的操作。同时，这行代码前面写了 <code>try</code> 。回到你之前写 <code>try!</code> 的地方，<code>try!</code> 会摒弃错误。（译者注：<code>try!</code> 表示禁用错误传递，如果抛出错误，那么程序崩溃。一般用于，你知道这个步骤不会出错的情况。关于错误处理，可以看 SwiftGG 翻译组翻译的 Swift 官方文档：<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/18_Error_Handling.html" target="_blank" rel="external">错误处理</a>）。</p>
<p>当在 <code>do { }</code> 代码块里产生错误的时候， <code>catch</code> 代码块就会执行。它只有一个参数，<code>let e</code>，它会包含异常的具体信息。在后面的代码块里，我们将具体的错误信息打印出来。当程序运行过程中出现错误了，打印的信息就会告诉我们错误到底是由什么异常引起的。</p>
<p>这里的这个错误处理是很基础的。设想一下，一个错误处理很完善的系统，不仅仅需要抓住出错信息，还要对错误信息进行一下处理。举个例子，当你写数据到文件，而磁盘满了的时候，你就需要弹窗让用户知道磁盘已经满了。在较早版本的 Swift 中，处理错误比现在更艰难，而且如果你不处理得当，程序就崩溃了。</p>
<p>Swift 的错误处理或多或少还是加强了。你要不处理错误，要不摒弃掉错误，但是不管怎么样也不能忽视错误。处理错误可以让你的代码更健壮，因此，养成多使用 do-catch 处理错误的习惯，而不是使用 <code>try!</code> 来摒弃错误。</p>
<p>OK，该方法中还有最后两行代码，第一行如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSNotificationCenter</span>.defaultCenter().postNotificationName(<span class="type">API</span>.notifications.venuesUpdated, object: <span class="literal">nil</span>, userInfo: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<p>这行代码会给整个应用中监听它的地方发送一个通知。这实际上是应用中的通知机制，可以高效的将事件传递到应用中的不同位置。考虑到你刚从 Foursquare 获取到新数据，你可能要去更新显示数据的 table view ，也可能要更新代码的其他部分。通知是完成这个操作最好的方式了。</p>
<p>请牢记，通知会一直保留在发送它的那个线程上。如果你在主线程外（比如，发送通知的线程）更新你的 UI ，你的应用就会崩溃并抛出错误。</p>
<p>注意到这行代码里的硬编码 <code>API.notifications.venuesUpdated</code> 了吗？本来我们可以写成 <code>&quot;venuesUpdated&quot;</code> 的字符串， 而不是 <code>API.notifications.venuesUpdated</code>。使用硬编码的编译时常量能让你的代码更安全。如果你出错，编译器会报错。但是，如果你使用字符串的方式，拼写错 <code>&quot;venuesUpdated&quot;</code> ，编译器就不会报错了。</p>
<p>最后，闭包外的这行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">searchTask.start()</span><br></pre></td></tr></table></figure>
<p>再次注意，这行代码会在 <code>let searchTask …</code> 后执行，且和上面一大段闭包是独立的。这行代码到底是干什么的呢？现在，我们已经设置好请求，配置好所有需要的参数，这行代码就是让这个搜寻任务启动起来。</p>
<p>Das Quadrat 发送一条消息到 Foursquare ，等待数据的返回，然后就执行了处理数据的闭包。懂了吧？</p>
<p>暂时把这些代码放一边，因为接下来我们要写 <code>Venue</code> 对象了。</p>
<h2 id="编写_Realm_Venue_对象">编写 Realm Venue 对象</h2><p>你知道 Realm 酷在什么地方吗？它整个代码结构是很简短的。本质上来说，你只需要一个类文件就可以写 Realm 了。你创建了一系列的实例对象，把它们写到 Realm 文件中，然后 BAM！你已经完成了你自己的本地数据库。</p>
<p>Realm 有一系列很赞的特性，比如排序、过滤以及支持 Swift 数据类型。你再也不需要在 table view 里使用 Core Data 的 <code>NSFetchedResultsController</code> 来加载成千上万的对象。Realm 也有它自己的数据浏览器。</p>
<p>OK，接下来该写 Realm Venue 对象了。步骤如下：</p>
<ul>
<li>右击 Xcode 中 Project Navigator 的 Coffee 这个文件夹。</li>
<li>点击 <code>New File …</code> ，从 iOS -&gt; Source 目录选择 Swift 文件，并点击 <code>Next</code> 。</li>
<li>将新建的文件命名为 <code>Venue.swift</code> ，并确保选中了 Coffee 这个 target 。</li>
<li>最后，点击 <code>Create</code> 完成创建。</li>
</ul>
<p>好吧，又是一个无内容的文件。这个文件将会包含 Realm 的 Venue 对象的代码。</p>
<p>首先导入正确的库。在 Foundation 的导入代码添加如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RealmSwift</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br></pre></td></tr></table></figure>
<p>接着，键入如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Venue</span>: <span class="title">Object</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就为 Venue 新建了一个类。其中，这个冒号表示当前类继承自 <code>Object</code> 类。这其实是面向对象编程（ Object Oriented Programming ）中父类和子类之间的继承关系。此处代码就是将 <code>Venue</code> 类继承自 <code>Object</code> 类。</p>
<p>简单来说，作为一个子类会自动将父类的所有方法和属性拷贝到自己的类中。值得注意的是，这和我们之前使用的 <code>extension</code> 是不一样的，它是为现有的类添加新的方法，而没有创建一个独立的新类。</p>
<p>接着，将以下代码拷贝到该类中，记得要添加在大括号的范围内：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> <span class="keyword">var</span> id:<span class="type">String</span> = <span class="string">""</span></span><br><span class="line"><span class="keyword">dynamic</span> <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dynamic</span> <span class="keyword">var</span> latitude:<span class="type">Float</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">dynamic</span> <span class="keyword">var</span> longitude:<span class="type">Float</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dynamic</span> <span class="keyword">var</span> address:<span class="type">String</span> = <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>这些句子是什么意思呢？就是为这个类添加了 5 个属性。你可以像使用 <code>CoffeeAPI</code> 的代码那样，使用这些属性为类实例添加数据。</p>
<p>属性中的 <code>dynamic</code> 关键字可以确保该属性能被 Objective-C 运行时访问。这本身是另外一个主题，但是我们先假设 Swift 的代码和 Objective-C 代码在各自的 “沙盒” 里运行。在 Swift 2.0 之前，所有的 Swift 代码都是运行在 Objective-C 运行时里，但是现在 Swift 已经有自己的运行时了。我们用 <code>dynamic</code> 关键字修饰属性，就可以让 Objective-C 运行时访问到这个属性，因为 Realm 需要在内部用到该属性。</p>
<p>每个属性都是 <code>String</code> 或  <code>Float</code> 类型。 Realm 本身支持一些变量类型，包括 <code>NSData</code> 、<code>NSDate</code> 、<code>Int</code> 、<code>Float</code> 、<code>String</code> 等等。</p>
<p>接下来，在 <code>address</code> 属性下面添加以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> coordinate:<span class="type">CLLocation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">CLLocation</span>(latitude: <span class="type">Double</span>(latitude), longitude: <span class="type">Double</span>(longitude));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个属性的值要计算后才会有。它不能保存到 Realm 里，因为它的类型没有包含在 Realm 本身支持的类型中。这个属性保存的是表达式的结果值。它就像一个方法，但是接着它就可以用属性来访问了。以上属性返回的是一个 <code>CLLocation</code> 实例对象，它有 <code>latitude</code> 和 <code>longitude</code> 两个属性。</p>
<p>这种使用方法很便利，因为我们只需要访问 <code>venueObject.coordinate</code> 就能获得对应类型的实例，而不用我们自己创建。</p>
<p>OK，接下来，粘贴以下代码到最后的代码块下面：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">primaryKey</span><span class="params">()</span></span> -&gt; <span class="type">String</span>?</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个新出现的方法，它重写了父类 <code>Object</code> 的方法。这个自定义方法可以返回一个 Realm 的主键（ primary key ）。主键就是唯一标识。每个 Realm 数据库中的对象有且仅有一个唯一的值作为主键，就像一个村庄里的房子必须有且仅有一个唯一的地址一样。</p>
<p>Realm 会用主键去区分一个个不同的对象，并确定当前这个对象是否唯一。</p>
<p>该方法的返回值类型为 String，因此我们就可以返回主键对应的属性名或者返回 <code>nil</code>（不使用主键的情况）。</p>
<p>Realm 对象的属性（比如，<code>id</code> 和 <code>name</code>）类似于电子表格里的列。方法返回的主键返回值即是每一列的名字，其实就是 <code>id</code> 。</p>
<p>现在，我们需要按 Command-B 来编译当前应用，并确保没有报错。我们没必要运行当前的应用，因为我们没有改变前端的展示代码。取而代之的是，我们只要检查编译应用时候是否有报错。如果你这时候去查看 <code>CoffeeAPI.swift</code> 文件，之前关于 <code>venueObject</code> 的错误已经不存在了。</p>
<h2 id="在_Map_View_中展示地理数据">在 Map View 中展示地理数据</h2><p>OK，现在让我们来处理下载下来的数据吧。你将要把它们放入之前创建的 map view 里以注释（annotation）的形式展示。</p>
<p>首先，切换到 <code>ViewController.swift</code> 文件。检查用来在 map view 上显示用户位置的代码。</p>
<p>接着，在文件的最上部，添加如下的导入语句：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RealmSwift</span><br></pre></td></tr></table></figure>
<p>接着，在类的最上部，添加以下这些属性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastLocation:<span class="type">CLLocation</span>?</span><br><span class="line"><span class="keyword">var</span> venues:<span class="type">Results</span>?</span><br></pre></td></tr></table></figure>
<p>你需要 RealmSwift 库来支持你使用 Realm，并且你需要这两个属性分别处理位置和地理数据。</p>
<p>接下来，定位到文件中的 <code>locationManager:didUpdateToLocation:fromLocation</code> 方法。在该方法的右大括号后面，粘贴以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">refreshVenues</span><span class="params">(location: CLLocation?, getDataFromFoursquare:Bool = <span class="literal">false</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> location != <span class="literal">nil</span></span><br><span class="line">    &#123;</span><br><span class="line">        lastLocation = location</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> location = lastLocation</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> getDataFromFoursquare == <span class="literal">true</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">CoffeeAPI</span>.sharedInstance.getCoffeeShopsWithLocation(location)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line"></span><br><span class="line">        venues = realm.objects(<span class="type">Venue</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> venue <span class="keyword">in</span> venues!</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> annotation = <span class="type">CoffeeAnnotation</span>(title: venue.name, subtitle: venue.address, coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="type">Double</span>(venue.latitude), longitude: <span class="type">Double</span>(venue.longitude)))</span><br><span class="line"></span><br><span class="line">            mapView?.addAnnotation(annotation)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Whoah，好长的方法，它是怎么执行的呢？</p>
<p>让我们从 <code>location</code> 的两行判断语句说起吧。第一行检查了 <code>location</code> 是否非空，第二行使用可选绑定检查了 <code>lastLocation</code> 属性是否非空。</p>
<p>虽然这两行代码看上去很相似，但是其实干的事情是不同的。让我们退一步想想。检查以下陈述是否是真实的：</p>
<ul>
<li>应用中的所有位置数据都来源于 <code>locationManager:didUpdateToLocation:fromLocation</code> 方法。即，该方法是唯一一个能获取到 <code>CLLocation</code> 实例（数据来自 GPS 硬件数据）的地方。</li>
<li><code>refreshVenues</code> 方法需要一个位置作为参数，该参数可能为空。</li>
<li><code>refreshVenues</code> 方法可能会在没有可用的位置时被调用。比如，在代码里，一个与位置数据方法没有联系的地方就调用 <code>refreshVenues</code> 方法。</li>
</ul>
<p>最后一句陈述很重要。其实也很简单：因为我们不一定要在获取到最新地理位置（<code>locationManager:didUpdateToLocation:fromLocation</code> ）时，才进行位置保存，所以，我们需要将保存位置的功能单独封装出来（封装为 <code>refreshVenues</code> 方法）。</p>
<p>因此，每次调用 <code>refreshVenues</code> 方法时，如果 <code>lastLocation</code> 属性非空的话，我们会将 <code>location</code> 参数保存起来。然后，我们会用可选绑定检查 <code>lastLocation</code> 是否为空。<code>if</code> 语句只会在有值的时候执行，因此我们可以 100% 确定 <code>if</code> 语句里的代码块肯定会包含一个有效的 GPS 位置信息！</p>
<p>当然，前提是 <code>refreshVenues</code> 方法确实获取到了位置数据。你肯定要确保它是非空的。如果你还是不太理解的话，可以重新读一下上一段内容。这样的代码非常优雅，而且这样的编码还可以确保你的应用数据是安全的且仍然是解耦的。</p>
<p>OK，<code>refreshVenues</code> 方法里的下一行代码讲了什么呢？该代码块里使用了 <code>CoffeeAPI</code> 单例来从 <code>Foursquare</code> 请求数据：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> getDataFromFoursquare == <span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CoffeeAPI</span>.sharedInstance.getCoffeeShopsWithLocation(location)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码只会在 <code>getDataFromFoursquare</code> 这个变量为 <code>true</code> 的时候执行。这是一种简单的使用 CoffeeAPI 请求数据方式。你要事先监听 CoffeeAPI 里的通知，才能在获取数据完成的时候，得到状态的更新。我们会在稍后实现该功能。</p>
<p>在请求数据之后，是以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line">venues = realm.objects(<span class="type">Venue</span>)</span><br></pre></td></tr></table></figure>
<p>这些代码看上去是不重要的，但是代码的主体却是在这几句上。首先，实例化 <code>Realm</code> 。然后，所有从 <code>Realm</code> 获取来的 <code>Venue</code> 类的对象都保存到 <code>venues</code> 这个属性里。该属性的类型是 <code>Results?</code>，该类型是以 <code>Venue</code> 实例为元素的数组。</p>
<p>最后，for-in 循环遍历 <code>venues</code>，并将每个元素以注释（annotation）的样式添加到 map view 里。这段代码很可能会报出错误，但我们将会解决掉它的。</p>
<h2 id="创建注释（Annotation）类">创建注释（Annotation）类</h2><p>创建注释类，需要以下步骤：</p>
<ol>
<li>右击 Coffee 文件夹，选择 <code>New File …</code> 。</li>
<li>从 iOS -&gt; Source 目录里选择 Swift 文件并点击 <code>Next</code> 。</li>
<li>将该 Swift 文件命名为 <code>CoffeeAnnotation</code>，并点击 <code>Create</code> 。</li>
</ol>
<p>然后，将以下代码粘贴到该文件里：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeAnnotation</span>: <span class="title">NSObject</span>, <span class="title">MKAnnotation</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title:<span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> subtitle:<span class="type">String</span>?</span><br><span class="line">    <span class="keyword">let</span> coordinate: <span class="type">CLLocationCoordinate2D</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(title: <span class="type">String</span>?, subtitle:<span class="type">String</span>?, coordinate: <span class="type">CLLocationCoordinate2D</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">        <span class="keyword">self</span>.subtitle = subtitle</span><br><span class="line">        <span class="keyword">self</span>.coordinate = coordinate</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些代码很简单：</p>
<ul>
<li>你新建了一个名叫 <code>CoffeeAnnotation</code> 的类，它继承自 <code>NSObject</code> 且遵循 <code>MKAnnotation</code> 协议。最后遵循协议的这个部分很重要，要想使用注释，必须要遵循这个 <code>MKAnnotation</code> 协议。</li>
<li>接着，创建了一大串属性。这些属性是由协议决定的，是类的一部分。</li>
<li>最后，还创建了构造器方法。该方法初始化了类的属性。</li>
</ul>
<p>切换回 <code>ViewController.swift</code> 文件，是不是发现原来 <code>CoffeeAnnotation</code> 那里的错误已经消失了？</p>
<p>接下来，添加以下的方法到 <code>ViewController</code> 这个类中。这个方法可以确保添加到地图的注释能被显示出来。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation)</span></span> -&gt; <span class="type">MKAnnotationView</span>?</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> annotation.isKindOfClass(<span class="type">MKUserLocation</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> view = mapView.dequeueReusableAnnotationViewWithIdentifier(<span class="string">"annotationIdentifier"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> view == <span class="literal">nil</span></span><br><span class="line">    &#123;</span><br><span class="line">       view = <span class="type">MKPinAnnotationView</span>(annotation: annotation, reuseIdentifier: <span class="string">"annotationIdentifier"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    view?.canShowCallout = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似于 table view，map view 也用可重用的实例来让地图上的 <code>pin</code> 显示更平滑。以上代码大概是以以下的步骤展开：</p>
<ul>
<li>首先，检查 <code>annotation</code> 是不是用户的当前位置。</li>
<li>接着，在重用队列中取出 <code>pin</code> （并赋值给 <code>view</code> 变量）。</li>
<li>然后，如果没有 <code>pin</code> 在重用队列中，就创建一个新的。</li>
<li>接着，设置 <code>pin</code> 允许显示 callout（一块小小的用来显示信息的简介）。</li>
<li>最后，返回 <code>view</code> 。</li>
</ul>
<p>值得注意的是，这方法是代理模式的一部分。你之前设置了 <code>map view</code> 的代理为 <code>self</code>。因此，当 <code>map view</code> 准备显示 <code>pin</code> 时，都会调用代理中的 <code>mapView:viewForAnnotation:</code> 方法，应用才能执行到你刚定义的代码。</p>
<p>代理是一种很不错的自定义代码的方式，它不用重载整个类。</p>
<h2 id="回应地理数据的通知">回应地理数据的通知</h2><p>好的，现在让我们把这一切都整理一下。在之前，我们在 <code>ViewController.swift</code> 的 <code>viewDidLoad</code> 方法里添加了以下这行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NSNotificationCenter</span>.defaultCenter().addObserver(<span class="keyword">self</span>, selector: <span class="type">Selector</span>(<span class="string">"onVenuesUpdated:"</span>), name: <span class="type">API</span>.notifications.venuesUpdated, object: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<p>这行代码会告诉通知中心（ notification center ），<code>self</code>（当前类）正在监听名为 <code>API.notifications.venuesUpdated</code> 的通知。当发出通知的时候，<code>ViewController</code> 类的 <code>onVenuesUpdated:</code> 方法就会被调用。</p>
<p>添加以下方法到 <code>ViewController</code> 类里：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">onVenuesUpdated</span><span class="params">(notification:NSNotification)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    refreshVenues(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看看这里到底发生了什么吧：</p>
<ul>
<li>当从 Foursquare 接收到返回的位置数据时，<code>refreshVenues</code> 方法就会被调用。</li>
<li>该方法没有包含位置数据，也没有提供 <code>getDataFromFoursquare</code> 参数。如果没有传入参数，就默认是 <code>false</code>，因此没有向 <code>Foursquare</code> 请求数据。如果传入参数，那么就会再次发起请求，请求结束又会调用该方法，这样就会导致死循环。</li>
<li>本质上来说，从 <code>Foursquare</code> 返回的数据会触发相应方法，从而将注释画到 map view 上去。</li>
</ul>
<p>关于代码，还有一个很重要的部分。添加如下代码到 <code>locationManager:didUpdateToLocation:fromLocation:</code> 方法里。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">refreshVenues(newLocation, getDataFromFoursquare: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>这行添加后大概是这样子的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> mapView = <span class="keyword">self</span>.mapView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> region = <span class="type">MKCoordinateRegionMakeWithDistance</span>(newLocation.coordinate, distanceSpan, distanceSpan)</span><br><span class="line">    mapView.setRegion(region, animated: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    refreshVenues(newLocation, getDataFromFoursquare: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些代码是怎么回事呢？简单来说：调用 <code>refreshVenues</code> 方法获取用户的 GPS 位置。同时，也用 API 向 Foursquare 请求数据。本质上来说，用户每次移动到新的位置都会向 Foursquare 请求数据。由于设置了间隔 50m 就更新，并且注册了通知，所以地图能正常更新。</p>
<p>运行应用并验证一下。是不是很酷？</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_16.png" alt=""></p>
<h2 id="在_Table_View_里显示地理数据">在 Table View 里显示地理数据</h2><p>现在，map view 已经能正常显示了。接着我们将会把同样的地理数据显示到 table view 中。实现起来也是很简单直接的。</p>
<p>首先，添加实例属性和 outlet 到 <code>ViewController</code>。在 <code>mapView</code> 属性下面添加如下的定义：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> tableView:<span class="type">UITableView</span>?</span><br></pre></td></tr></table></figure>
<p>接着，切换到 <code>Main.storyboard</code> ，选中 View Controller Scene。将 table view 与 IBOutlet 关联。</p>
<p>与以 <code>self.mapView</code> 可选绑定相同的方法，添加如下的代码到 <code>ViewController.swift</code> 的  <code>viewWillAppear:</code> 方法里。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tableView = <span class="keyword">self</span>.tableView</span><br><span class="line">&#123;</span><br><span class="line">    tableView.delegate = <span class="keyword">self</span></span><br><span class="line">    tableView.dataSource = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并将当前的类遵循以下的协议：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">UITableViewDataSource</span>, <span class="type">UITableViewDelegate</span></span><br></pre></td></tr></table></figure>
<p>接着，再添加两个代理中的方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> venues?.<span class="built_in">count</span> ?? <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个方法是 table view delegate 协议中方法的一部分。第一个方法确定了 table view 有多少个 cell，而第二个方法确定了 table view 有多少个 section。注意到代码中的 <code>??</code> 了吗？它是空和运算符（nil-coalescing operator）（译者注：如果对空和运算符有什么不理解的话，可以查看<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/02_Basic_Operators.html#nil_coalescing_operator" target="_blank" rel="external">中文版官方文档</a>的说明）。即，如果 <code>venues</code> 是空的话，使用 0 作为默认值。</p>
<p>接着，添加以下方法到 <code>ViewController</code> 类：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"cellIdentifier"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cell == <span class="literal">nil</span></span><br><span class="line">    &#123;</span><br><span class="line">        cell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCellStyle</span>.<span class="type">Subtitle</span>, reuseIdentifier: <span class="string">"cellIdentifier"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> venue = venues?[indexPath.row]</span><br><span class="line">    &#123;</span><br><span class="line">        cell!.textLabel?.text = venue.name</span><br><span class="line">        cell!.detailTextLabel?.text = venue.address</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cell!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大部分都是易懂的代码。大致步骤如下：</p>
<ul>
<li>从重用队列中取出一个 cell。</li>
<li>如果没有 cell 存在，就以 <code>Subtitle</code> 的样式创建一个新的 cell 。</li>
<li>如果 <code>venues</code> 数组的第 <code>indexPath.row</code> 个元素存在，就赋值给常量 <code>venue</code> 。使用该数据去填充 cell 的 <code>textLabel</code> 和 <code>detailTextLabel</code> 。</li>
<li>返回 cell 。</li>
</ul>
<p>和 map view 的类似， 当 table view 需要一个 table cell 的时候，就会调用 <code>tableView:cellForRowAtIndexPath:</code> 方法。你可以使用该方法来自定义你的 table view cell。这比写个子类简单多了。</p>
<p>接下来，是 table view 的最后一个方法。把一些方法添加到 <code>ViewController</code> 类中：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> venue = venues?[indexPath.row]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> region = <span class="type">MKCoordinateRegionMakeWithDistance</span>(<span class="type">CLLocationCoordinate2D</span>(latitude: <span class="type">Double</span>(venue.latitude), longitude: <span class="type">Double</span>(venue.longitude)), distanceSpan, distanceSpan)</span><br><span class="line">            mapView?.setRegion(region, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用户点击 cell 时，就会调用这个代理方法。代码的内容是比较简单的：当 <code>venues</code> 数组的第 <code>indexPath.row</code> 个元素存在时，使用它去填充该数据项所在区域的 map view。换句话说，把点击的项显示到 map view 的中心。</p>
<p>现在唯一剩下的事情就是，当通知事件发生时，及时地刷新 table view 数据。当数据更新时，你就想要把它们显示出来。</p>
<p>在第二个 <code>if</code> 条件判断的末尾，添加以下这行代码到 <code>refreshVenues:</code> 方法。定位到 <code>if let location = lastLocation</code> 这行代码，在该语句的有括号后面，添加如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">tableView?.reloadData()</span><br></pre></td></tr></table></figure>
<p>OK，现在检查一下应用能否运行。使用 Command-R 编译并运行后验证结果。如果所有的设置都正确的话，地理数据会在 table view 中显示出来。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_17.png" alt=""></p>
<h2 id="基于位置过滤地理数据">基于位置过滤地理数据</h2><p>OK，现在有个奇怪的现象，即 table view 显示了所有的数据。如果你在应用中点击过日本，然后点了旧金山，仍然会将日本的咖啡店显示在 table view 里。</p>
<p>我们当然不想要这样。因此，让我们使用一些 Realm 的小魔法只让准确的数据显示。</p>
<p>首先，把 <code>ViewController</code> 类中的 <code>venues</code> 属性改变一下。不再使用 <code>Results?</code>，而是设置为：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> venues:[<span class="type">Venue</span>]?</span><br></pre></td></tr></table></figure>
<p>两者之间的区别，只是类型不同而已。之前那种是包含 <code>Venue</code> 对象的 <code>Results</code> 实例。它是 Realm 的一部分。而第二种新的类型是 <code>Venue</code> 实例的数组。</p>
<p>最大的区别是懒加载。Realm 在加载需要使用的数据时很高效，比如你的代码访问 Realm 数据。不幸的是，Realm 并不支持对属性计算后排序的特性。因此，我们需要加载所有从 Realm 获取的数据，并执行自己定义的过滤操作。通常你会使用 Realm 来处理数据检索（使用延迟加载），并给它一个过滤器。这次暂不考虑使用这种方法。</p>
<p>OK，还记得这两行代码吗？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line">venues = realm.objects(<span class="type">Venue</span>)</span><br></pre></td></tr></table></figure>
<p>用以下的代码段来代替以上两行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> (start, stop) = calculateCoordinatesWithRegion(location)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> predicate = <span class="type">NSPredicate</span>(format: <span class="string">"latitude &lt; %f AND latitude &gt; %f AND longitude &gt; %f AND longitude &lt; %f"</span>, start.latitude, stop.latitude, start.longitude, stop.longitude)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()</span><br><span class="line"></span><br><span class="line">venues = realm.objects(<span class="type">Venue</span>).<span class="built_in">filter</span>(predicate).<span class="built_in">sort</span> &#123;</span><br><span class="line">     location.distanceFromLocation($<span class="number">0</span>.coordinate) &lt;; location.distanceFromLocation($<span class="number">1</span>.coordinate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着，在 <code>ViewController</code> 类里添加一下方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">calculateCoordinatesWithRegion</span><span class="params">(location:CLLocation)</span></span> -&gt; (<span class="type">CLLocationCoordinate2D</span>, <span class="type">CLLocationCoordinate2D</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> region = <span class="type">MKCoordinateRegionMakeWithDistance</span>(location.coordinate, distanceSpan, distanceSpan)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start:<span class="type">CLLocationCoordinate2D</span> = <span class="type">CLLocationCoordinate2D</span>()</span><br><span class="line">    <span class="keyword">var</span> stop:<span class="type">CLLocationCoordinate2D</span> = <span class="type">CLLocationCoordinate2D</span>()</span><br><span class="line"></span><br><span class="line">    start.latitude  = region.center.latitude  + (region.span.latitudeDelta  / <span class="number">2.0</span>)</span><br><span class="line">    start.longitude = region.center.longitude - (region.span.longitudeDelta / <span class="number">2.0</span>)</span><br><span class="line">    stop.latitude   = region.center.latitude  - (region.span.latitudeDelta  / <span class="number">2.0</span>)</span><br><span class="line">    stop.longitude  = region.center.longitude + (region.span.longitudeDelta / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (start, stop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，这方法也没什么特别的。只是一些基本的数学计算，把 <code>CLLocation</code> 实例基于区域的距离转换成左上和右下两个坐标。</p>
<p>第一行代码创建了基于位置和距离的区域。接着，设置好位置和它们的经纬度。这些值是根据中心的坐标计算出来的。最后，该方法返回一个元组：两个有序的变量。</p>
<p>可以把任意顺序的类型组合成元组（译者注：如果对元组有什么不理解的话，可以查看<a href="http://wiki.jikexueyuan.com/project/swift/chapter2/01_The_Basics.html#tuples" target="_blank" rel="external">中文版官方文档</a>的相应说明）。圆括号里的变量有特定的顺序，且是不可变的数组。</p>
<p>OK，回到我们的过滤器代码（译者注：位于上上段代码）。让我们一行一行来解读。</p>
<ul>
<li>首先，创建了两个常量，<code>start</code> 和 <code>stop</code>。它们是 <code>calculateCoordinatesWithRegion:</code> 方法的返回结果。该方法返回的是一个元组，由 <code>start</code> 和 <code>stop</code> 组成。<code>calculateCoordinatesWithRegion:</code> 方法的功能就是返回当前用户的地理位置。</li>
<li>接着，创建了一个 <code>predicate</code> 变量。<code>NSPredicate</code> 是一个过滤器，它可以适用于数组，序列（译者注：也可以理解为元组）等等。<code>predicate</code> 变量定义了一个范围，<code>venues</code>数组里的 GPS 坐标必须落在该范围内。它主要是用于过滤 Realm 的数据（下一行代码会过滤）。值得注意的是，该 <code>predicate</code> 变量假设 GPS 数据是平面的，虽然地球明显是球体的。现在暂时这样假设是没事的，但是当你在南极点或北极点附近使用本应用去寻找咖啡店时就会出问题。</li>
<li>接下来，让我们来剖析一下 <code>realm</code> 对象获取数据的那部分内容。所有方法都是有关联的，也就意味着每次方法调用都用到了前一个方法调用的结果。<ul>
<li>首先，创建了一个 <code>realm</code> 变量来保存 Realm 的引用对象。</li>
<li>接着，<code>Venue</code> 的所有对象都被懒加载：<code>objects(Venue)</code>。</li>
<li>接着，过滤器（ <code>predicate</code> ）来过滤这些对象。Realm 可以快速的处理过滤，而且它并不是所有的对象都过滤，而只是过滤能访问到的对象。</li>
<li>接着，调用 Swift 本地的排序算法。这里的 <code>sort</code> 并不是 Realm 的那部分，Realm 的排序算法叫<code>sorted</code>。换句话说，这部分没用上 Realm。该排序算法会访问所有的 Realm 对象，也就意味着它们都会被加载进内存，这里也没用上 Realm 的懒加载特性。该排序算法只有一个参数：一个确定两个无序对象顺序的闭包。通过返回 <code>true</code> 或 <code>false</code>，来标识闭包里两个对象比较后的关系。在上面那段代码里，前后顺序是基于离用户位置的距离的。这也是坐标属性派上用场的地方。其中，<code>$0</code> 和 <code>$1</code> 是两个无序对象的缩写。从根本上来说，该方法将地理数据以用户位置距离远近进行排序（距离越近，排在越前面）。</li>
</ul>
</li>
</ul>
<p>就说到这里吧。以上是的代码量比较大，但是效率很高。 Realm 优化的特性，方法链（method chaining）以及 Swift 本地的排序算法可以让一大票地理数据按特定的顺序保存。而且，还有一个很炫酷的事情：随着你的移动，它会随时更新。</p>
<p>就这样了！用 Command-R 来看看应用的效果吧。干的漂亮！</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/coffee_18.png" alt=""></p>
<p>注意：不幸的是，当你在 Xcode 里模拟 GPS 坐标时，从 Foursquare 获取的数据可能会少的可怜。假如你想要获得更多数据的话，你可以去除 CoffeeAPI 中硬编码的部分，或者把地点模拟到有更多咖啡店的位置。</p>
<p>你对本教程有什么想法呢？留下你的留言和想法吧。</p>
<p>最后再安利一波。你可以从 GitHub <a href="https://github.com/reinderdevries/CoffeeGuide" target="_blank" rel="external">reinderdevries/CoffeeGuide</a> 上下载所有源代码和 Xcode 项目。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：reinder de vries，<a href="http://www.appcoda.com/foursquare-realm-swift/">原文链接</a>，原文日期：2015/11/23<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="http://www.brighttj.com">saitjr</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>我们经常说，程序员喝进去的是咖啡，吐出来的是代码。让我们换一个角度去思考，来做一个显示附近咖啡店的 App。</p>
<p>这篇文章中，用到了以下技能：</p>
<ul>
<li>Swift，Xcode 和 Interface Builder（Auto Layout, Constraints 和 Storyboards）</li>
<li>Realm，一种本地存储方案，轻量级的 Core Data</li>
<li>使用 Foursquare 和 Das Quadrat 库访问 REST API</li>
<li>CocoaPods 和 Geolocation</li>
</ul>
<p>这个 App 可以检测当前用户的 500 平方米的范围，并从 Foursquare 拿到附近咖啡店的地理信息。我们将使用 map view（<code>MKMapView</code>）和一个 table view（<code>UITableView</code>）来展示数据。当然，还要使用 Realm 来过滤数据，并使用闭包来对数据进行排序。</p>]]>
    
    </summary>
    
      <category term="AppCoda" scheme="http://swiftggteam.github.io/tags/AppCoda/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Friday Q&A 2015-12-11：Swift 中的弱引用]]></title>
    <link href="http://swiftggteam.github.io/2015/12/28/friday-qa-2015-12-11-swift-weak-references/"/>
    <id>http://swiftggteam.github.io/2015/12/28/friday-qa-2015-12-11-swift-weak-references/</id>
    <published>2015-12-27T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Mike Ash，<a href="https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-11<br>译者：<a href="http://weibo.com/riven0951" target="_blank" rel="external">riven</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>即便你已经在火星的一个洞穴里，紧闭着你的双眼并且捂住你的耳朵，<a href="https://swift.org/" target="_blank" rel="external">也避免不了 Swift 已经开源的事实</a>。正因为开源，我们能够更加方便地去探索 Swift 中的很多有趣的特性，其中之一便是 Swift 中弱引用是如何工作的问题。</p>
<a id="more"></a>
<h3 id="弱引用">弱引用</h3><p>在采用垃圾回收器或者引用计数进行内存管理的语言中，强引用可以使得特定的对象一直存活，但弱引用就无法保证。当一个对象被强引用时，它是不能够被销毁的；但是如果它是个弱引用，就可以。</p>
<p>当我们所提到「弱引用」时，通常的意思是指一个<em>归零</em>弱引用（Zeroing Weak Reference）。也就是说，当弱引用的目标对象被销毁时，弱引用就会变成 <code>nil</code>（校者注：<a href="https://www.mikeash.com/pyblog/friday-qa-2010-07-16-zeroing-weak-references-in-objective-c.html" target="_blank" rel="external">看这篇文章了解更多</a>）。非归零弱引用也是存在的，它会导致一些陷阱（Trap）、崩溃（Crash）或者未定义行为的调用。比如你在 Objective-C 中使用 unsafe_unretained，或者在 Swift 中使用 unowned（Objective-C 未定义行为处理方式，而 Swift 却很可靠地处理这些崩溃）。</p>
<p>归零弱引用很方便使用，在基于引用计数进行内存管理的语言中他们是非常有用的。它们允许循环引用存在却不会产生死循环，并且不需要手动打破逆向引用。他们非常的有用，在苹果引入 ARC 和让弱引用在垃圾收集代码之外的语言层面上可用之前，<a href="https://www.mikeash.com/pyblog/introducing-mazeroingweakref.html" target="_blank" rel="external">我就已经实现了我自己的弱引用版本</a>。</p>
<h3 id="它是如何工作的呢？">它是如何工作的呢？</h3><p>归零弱引用比较典型的实现方式是保持一个对每个对象的所有弱引用列表。当对一个对象创建了弱引用，这个引用就会被添加到这个列表中。当这个引用被重新赋值或者超出了其作用域，它就会从列表中被移除。当一个对象被销毁，这个列表中的所有引用都会被归零。在多线程的情况下，其实现必须是同步获取一个弱引用并销毁一个对象，以避免竞态条件的出现：比如当一个线程释放某个对象的最后一个强引用而同时另一个线程却试图加载一个它的一个弱引用。</p>
<p>在我的实现中，每一个弱引用都是一个完整的对象。弱引用列表是一个弱引用对象的集合。虽然由于额外的转换和内存使用让效率变低了，但这种方式可以很方便的让这些引用变成完整的对象。</p>
<p>苹果公司的 Objective-C 的实现是这样的，每一个弱引用是一个指向目标对象的普通指针。编译器并不直接读写指针，而是使用一些帮助函数。当存储一个弱指针时，存储函数会将指针的位置注册为目标对象的一个弱引用。由于读取函数被集成进了引用计数系统，这就确保了在读取一个弱指针时，不会返回一个已经被释放了的对象的指针。</p>
<h3 id="归零操作">归零操作</h3><p>让我们创建一些代码来研究一下它们究竟是怎么运行的。</p>
<p>我们希望写一个函数能够 dump 一个对象的内存内容。这个函数接受一块内存区域，将其按指针大小进行分块，并且将最终的结果转换成一个易于查看的十六进制字符串：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">contents</span><span class="params">(ptr: UnsafePointer&lt;Void&gt;, <span class="number">_</span> length: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wordPtr = <span class="type">UnsafePointer</span>&lt;<span class="type">UInt</span>&gt;(ptr)</span><br><span class="line">    <span class="keyword">let</span> words = length / <span class="built_in">sizeof</span>(<span class="type">UInt</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">let</span> wordChars = <span class="built_in">sizeof</span>(<span class="type">UInt</span>.<span class="keyword">self</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> buffer = <span class="type">UnsafeBufferPointer</span>&lt;<span class="type">UInt</span>&gt;(start: wordPtr, <span class="built_in">count</span>: words)</span><br><span class="line">    <span class="keyword">let</span> wordStrings = buffer.<span class="built_in">map</span>(&#123; word -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">var</span> wordString = <span class="type">String</span>(word, radix: <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">while</span> wordString.characters.<span class="built_in">count</span> &lt; wordChars &#123;</span><br><span class="line">            wordString = <span class="string">"0"</span> + wordString</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordString</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> wordStrings.joinWithSeparator(<span class="string">" "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下一个函数会为一个对象创建一个 dump 函数。调用时传入一个对象，它会返回一个 dump 这个对象内容的函数。在函数内部，我们给对象保存了一个 <code>UnsafePointer</code>，而不是普通的引用。这样可以确保它不会和语言的引用计数系统发生交互。它允许我们可以在这个对象被销毁之后 dump 出它的内存，后面我们会介绍。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">dumperFunc</span><span class="params">(obj: AnyObject)</span></span> -&gt; (<span class="type">Void</span> -&gt; <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="type">String</span>(obj)</span><br><span class="line">    <span class="keyword">let</span> ptr = <span class="built_in">unsafeBitCast</span>(obj, <span class="type">UnsafePointer</span>&lt;<span class="type">Void</span>&gt;.<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">let</span> length = class_getInstanceSize(obj.<span class="keyword">dynamicType</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> bytes = contents(ptr, length)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">\(objString)</span> <span class="subst">\(ptr)</span>: <span class="subst">\(bytes)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是一个包含弱引用变量的类，后面我会观察这个弱引用。我在弱引用变量的前后分别添加了一个 dummy 变量，以便于我们区分弱引用在 dump 出来的内存结构中的位置：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakReferer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dummy1 = <span class="number">0x1234321012343210</span></span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> target: <span class="type">WeakTarget</span>?</span><br><span class="line">    <span class="keyword">var</span> dummy2: <span class="type">UInt</span> = <span class="number">0xabcdefabcdefabcd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们试一下! 我们先创建一个引用，然后 dump 它：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> referer = <span class="type">WeakReferer</span>()</span><br><span class="line"><span class="keyword">let</span> refererDump = dumperFunc(referer)</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007f8</span>a<span class="number">3861b920</span>: <span class="number">0000000107</span>ab<span class="number">24a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00000</span><span class="number">00000000000</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>我们看到 <code>isa</code> 指针位于最开始的位置，紧随其后的是其它一些内部字段。<code>dummy1</code> 变量占据了第四块，<code>dummy2</code> 变量占据了第六块。正如我们所期望的那样，在他们之间的弱引用正好是零。</p>
<p>现在我们让这个弱引用指向一个目标对象，看看会变成什么样。我将这段代码放入一个 <code>do</code>语句中，以便于当目标对象超出作用域和被销毁时我们可以进行控制：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="type">NSObject</span>()</span><br><span class="line">    referer.target = target</span><br><span class="line">    <span class="built_in">print</span>(target)</span><br><span class="line">    <span class="built_in">print</span>(refererDump())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">&lt;NSObject: 0x7fda<span class="number">6a21c6a0</span>&gt;</span><br><span class="line">WeakReferer <span class="number">0x00007</span>fda6a000ad0: <span class="number">00000001050</span>a<span class="number">44a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fda<span class="number">6a21c6a0</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>正如我们期望的那样，目标对象的指针直接存储在弱引用中。在目标对象被销毁之后，我们在 <code>do</code> 代码块之后再次调用 dump 函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"></span><br><span class="line"><span class="type">WeakReferer</span> <span class="number">0x00007ffe32300060</span>: 000000010cfb44a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>它被归零了。点个赞!</p>
<p>仅仅为了好玩，我们用一个纯 Swift 对象作为对象来重复这个实验。不必要时，我并不是很想使用 Objective-C 中的东西。下面是一个纯 Swift 对象：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>让我们试一下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> referer = <span class="type">WeakReferer</span>()</span><br><span class="line"><span class="keyword">let</span> refererDump = dumperFunc(referer)</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="type">WeakTarget</span>()</span><br><span class="line">    referer.target = target</span><br><span class="line">    <span class="built_in">print</span>(refererDump())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br></pre></td></tr></table></figure>
<p>目标对象像我们期望的那样被归零了，然后被重新赋值：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fbe<span class="number">95000270</span>: <span class="number">00000001071</span>d<span class="number">24a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00000</span><span class="number">00000000000</span> abcdefabcdefabcd</span><br><span class="line">WeakReferer <span class="number">0x00007</span>fbe<span class="number">95000270</span>: <span class="number">00000001071</span>d<span class="number">24a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fbe95121ce0 abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>然后当目标对象被销毁，引用应该被归零：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fbe<span class="number">95000270</span>: <span class="number">00000001071</span>d<span class="number">24a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fbe95121ce0 abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>不幸的是它并没有被归零。可能是目标对象没有被销毁。一定是有某些东西让它继续活着！让我们再检查一下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"WeakTarget deinit"</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次运行代码，结果如下：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fd29a61fa10: <span class="number">0000000107</span>ae<span class="number">44a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00000</span><span class="number">00000000000</span> abcdefabcdefabcd</span><br><span class="line">WeakReferer <span class="number">0x00007</span>fd29a61fa10: <span class="number">0000000107</span>ae<span class="number">44a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fd<span class="number">29a42a920</span> abcdefabcdefabcd</span><br><span class="line">WeakTarget deinit</span><br><span class="line">WeakReferer <span class="number">0x00007</span>fd29a61fa10: <span class="number">0000000107</span>ae<span class="number">44a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fd<span class="number">29a42a920</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>它消失了，但是弱引用并没有归零。怎么回事呢，我们发现了 Swift 的一个 bug！很神奇，这个 bug 一直没有被解决。你会想之前肯定已经有人已经注意到了这个问题。接下来，我们通过访问弱引用来产生一个崩溃，然后我们可以用这个 Swift 工程提交这个 bug ：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> referer = <span class="type">WeakReferer</span>()</span><br><span class="line"><span class="keyword">let</span> refererDump = dumperFunc(referer)</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</span><br><span class="line">        <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"WeakTarget deinit"</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="type">WeakTarget</span>()</span><br><span class="line">    referer.target = target</span><br><span class="line">    <span class="built_in">print</span>(refererDump())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"><span class="built_in">print</span>(referer.target)</span><br></pre></td></tr></table></figure>
<p>下面就是崩溃信息：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>ff7aa20d060: <span class="number">00000001047</span>a<span class="number">04a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00000</span><span class="number">00000000000</span> abcdefabcdefabcd</span><br><span class="line">WeakReferer <span class="number">0x00007</span>ff7aa20d060: <span class="number">00000001047</span>a<span class="number">04a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>ff7aa2157f0 abcdefabcdefabcd</span><br><span class="line">WeakTarget deinit</span><br><span class="line">WeakReferer <span class="number">0x00007</span>ff7aa20d060: <span class="number">00000001047</span>a<span class="number">04a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>ff7aa2157f0 abcdefabcdefabcd</span><br><span class="line">nil</span><br></pre></td></tr></table></figure>
<p>哦，我的天呐！大爆炸在哪呢？应该有一个惊天动地的大爆炸呀！输出的内容表明一切工作正常，但我们可以清楚地从 dump 内容看到它并没有正常工作。</p>
<p>让我们再仔细检查一下。下面是一个经过修改的 <code>WeakTarget</code> 类，我们添加了一个 dummy 变量以便于区分 dump 的内容：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dummy = <span class="number">0x0123456789abcdef</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Weak target deinit"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是一段新的代码，运行的程序和之前的基本相同，只不过每次 dump 都会输出两个对象（校者注：Target 和 Referer）：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> referer = <span class="type">WeakReferer</span>()</span><br><span class="line"><span class="keyword">let</span> refererDump = dumperFunc(referer)</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"><span class="keyword">let</span> targetDump: <span class="type">Void</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="type">WeakTarget</span>()</span><br><span class="line">    targetDump = dumperFunc(target)</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line"></span><br><span class="line">    referer.target = target</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(refererDump())</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"><span class="built_in">print</span>(targetDump())</span><br><span class="line"><span class="built_in">print</span>(referer.target)</span><br><span class="line"><span class="built_in">print</span>(refererDump())</span><br><span class="line"><span class="built_in">print</span>(targetDump())</span><br></pre></td></tr></table></figure>
<p>让我们检查一下输出内容。referer 对象的生命周期和之前一样，它的 <code>target</code> 字段被顺利的归零了：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fe<span class="number">174802520</span>: <span class="number">000000010</span>faa<span class="number">64a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00000</span><span class="number">00000000000</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p><code>target</code> 首先作为一个普通对象，在各种头字段之后紧跟着我们的 <code>dummy</code> 字段：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakTarget <span class="number">0x00007</span>fe<span class="number">17341d270</span>: <span class="number">000000010</span>faa<span class="number">63e0 00000</span><span class="number">00200000004</span> <span class="number">0123456789</span>abcdef</span><br></pre></td></tr></table></figure>
<p>在给 <code>target</code> 字段赋值后，我们可以看到被填充的指针的值：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fe<span class="number">174802520</span>: <span class="number">000000010</span>faa<span class="number">64a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fe<span class="number">17341d270</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p><code>target</code> 对象还是和之前一样，但是它其中一个头字段增加了 2：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakTarget <span class="number">0x00007</span>fe<span class="number">17341d270</span>: <span class="number">000000010</span>faa<span class="number">63e0 00000</span><span class="number">00400000004</span> <span class="number">0123456789</span>abcdef</span><br></pre></td></tr></table></figure>
<p>目标对象像我们期望的那样被销毁了：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">Weak <span class="keyword">target</span> deinit</span><br></pre></td></tr></table></figure>
<p>我们看到引用对象一直都有一个指针指向目标对象：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fe<span class="number">174802520</span>: <span class="number">000000010</span>faa<span class="number">64a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00007</span>fe<span class="number">17341d270</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>并且目标对象本身一直存活着。和上次我们看到的相比，它的头字段减少了 2：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakTarget <span class="number">0x00007</span>fe<span class="number">17341d270</span>: <span class="number">000000010</span>faa<span class="number">63e0 00000</span><span class="number">00200000002</span> <span class="number">0123456789</span>abcdef</span><br></pre></td></tr></table></figure>
<p>访问 <code>target</code> 字段会产生 <code>nil</code> ，即便它没有被归零：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>再次 dump referer 对象的内容，从中我们看出仅仅访问 <code>target</code> 字段的行为已经改变了它。现在它被归零了：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakReferer <span class="number">0x00007</span>fe<span class="number">174802520</span>: <span class="number">000000010</span>faa<span class="number">64a0 00000</span><span class="number">00200000004</span> <span class="number">123432101234</span><span class="number">3210 00000</span><span class="number">00000000000</span> abcdefabcdefabcd</span><br></pre></td></tr></table></figure>
<p>目标对象现在被完全抹掉了：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakTarget <span class="number">0x00007</span>fe<span class="number">17341d270</span>: 200007fe<span class="number">17342a04 30</span>0007fe<span class="number">17342811</span> ffffffffffff0002</span><br></pre></td></tr></table></figure>
<p>现在变的越来越有趣了。我们看到头字段会一会儿增加，一会儿减少；让我们看看是否能有重现出更多的信息：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="type">WeakTarget</span>()</span><br><span class="line"><span class="keyword">let</span> targetDump = dumperFunc(target)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> a = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> b = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> <span class="built_in">c</span> = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> d = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> e = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> f = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">var</span> g = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">var</span> h = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">var</span> i = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">var</span> j = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">    <span class="keyword">var</span> k = target</span><br><span class="line">    <span class="built_in">print</span>(targetDump())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(targetDump())</span><br></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00200000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00400000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00600000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00800000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00a00000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c00000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c00000008</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c0000000</span>c <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c00000010</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c00000014</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c00000018</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00c0000001</span>c <span class="number">0123456789</span>abcdef</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fd883205df0: <span class="number">00000001093</span>a<span class="number">4840 00000</span><span class="number">00200000004</span> <span class="number">0123456789</span>abcdef</span><br></pre></td></tr></table></figure>
<p>我们看到每一个新的弱引用会让头字段中的第一个数增加 2。每一个新的强引用会让头字段中的第二个数增加 4。</p>
<p>回顾一下，下面这些就是目前我们所发现的：</p>
<ul>
<li>在内存中弱指针和普通指针是一样的.</li>
<li>当一个弱目标对象（WeakTarget）的 <code>deinit</code> 方法调用时，目标对象是<em>不会</em>被释放的，并且弱指针也<em>不会</em>被归零。</li>
<li>当目标对象的 <code>deinit</code> 方法执行之后，访问弱指针，它就会被归零并且弱目标对象也会被释放。</li>
<li>弱目标对象包含一个弱引用的引用计数，与强引用计数分离开。</li>
</ul>
<h3 id="Swift_代码">Swift 代码</h3><p>既然 Swift 已经开源，我们可以通过查看源代码来继续我们的观察。</p>
<p>在 Swift 标准库中用 <code>HeapObject</code> 类型来表示一个分配在堆上的对象，其实现可参考 <a href="https://github.com/apple/swift/blob/swift-2.2-SNAPSHOT-2015-12-01-b/stdlib/public/SwiftShims/HeapObject.h#L33" target="_blank" rel="external">stdlib/public/SwiftShims/HeapObject.h</a>。看起来是这样的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">struct HeapObject &#123;</span><br><span class="line">/// 这始终是一个有效的元数据对象的指针。</span><br><span class="line">struct HeapMetadata const *metadata;</span><br><span class="line"></span><br><span class="line">SWIFT_HEAPOBJECT_NON_OBJC_MEMBERS;</span><br><span class="line">// FIXME: 在 32 位的平台上分配了两个字大小的元数据。</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">HeapObject() = default;</span><br><span class="line"></span><br><span class="line">// 给新分配的堆内存初始化空间（对象alloc，是分配的堆内存）。</span><br><span class="line">constexpr HeapObject(HeapMetadata const *newMetadata) </span><br><span class="line">    : metadata(newMetadata)</span><br><span class="line">    , refCount(StrongRefCount::Initialized)</span><br><span class="line">    , weakRefCount(WeakRefCount::Initialized)</span><br><span class="line">&#123; &#125;</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Swift 的 <code>metadata</code> 字段就相当于 Objective-C 的 <code>isa</code> 字段，并且它们是兼容的。还有一些像 <code>NON_OBJC_MEMBERS</code> 这样的宏定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SWIFT_HEAPOBJECT_NON_OBJC_MEMBERS       \</span><br><span class="line">  StrongRefCount refCount;                      \</span><br><span class="line">  WeakRefCount weakRefCount</span></span><br></pre></td></tr></table></figure>
<p>噢，快看！这就是我们的两个引用计数。</p>
<p>(附加问题：为什么这里强引用在前面，而在 dump 时确是弱引用在前面？)</p>
<p>引用计数是通过位于 <a href="https://github.com/apple/swift/blob/swift-2.2-SNAPSHOT-2015-12-01-b/stdlib/public/runtime/HeapObject.cpp" target="_blank" rel="external">stdlib/public/runtime/HeapObject.cpp</a> 文件中的一系列函数来进行管理的。比如，下面的 <code>swift_retain</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> swift::swift_retain(HeapObject *object) &#123;</span><br><span class="line">SWIFT_RETAIN();</span><br><span class="line">    _swift_retain(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _swift_retain_(HeapObject *object) &#123;</span><br><span class="line">    _swift_retain_inlined(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> swift::_swift_retain = _swift_retain_;</span><br></pre></td></tr></table></figure>
<p>这里面拐了几个弯，但它最终是调用头文件中的内联函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> _swift_retain_inlined(HeapObject *object) &#123;</span><br><span class="line">  <span class="keyword">if</span> (object) &#123;</span><br><span class="line">    object-&gt;refCount.increment();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如你所见，它会增加引用计数。下面是 increment 函数的实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  __atomic_fetch_add(&amp;refCount, RC_ONE, __ATOMIC_RELAXED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RC_ONE</code> 来自于一个枚举类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> : <span class="keyword">uint32_t</span> &#123;</span><br><span class="line">  RC_PINNED_FLAG = <span class="number">0x1</span>,</span><br><span class="line">  RC_DEALLOCATING_FLAG = <span class="number">0x2</span>,</span><br><span class="line"></span><br><span class="line">  RC_FLAGS_COUNT = <span class="number">2</span>,</span><br><span class="line">  RC_FLAGS_MASK = <span class="number">3</span>,</span><br><span class="line">  RC_COUNT_MASK = ~RC_FLAGS_MASK,</span><br><span class="line"></span><br><span class="line">  RC_ONE = RC_FLAGS_MASK + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>相信你已经明白为什么每一个新的强引用会让头字段增加 4 了吧。这个枚举类型的前两位用来作为标志位。回想一下之前的 dump 结果，我们可以看到这些标志位。下面是一个弱目标对象在最后一个强引用消失之前和之后的结果：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">WeakTarget <span class="number">0x00007</span>fe<span class="number">17341d270</span>: <span class="number">000000010</span>faa<span class="number">63e0 00000</span><span class="number">00400000004</span> <span class="number">0123456789</span>abcdef</span><br><span class="line">Weak target deinit</span><br><span class="line">WeakTarget <span class="number">0x00007</span>fe<span class="number">17341d270</span>: <span class="number">000000010</span>faa<span class="number">63e0 00000</span><span class="number">00200000002</span> <span class="number">0123456789</span>abcdef</span><br></pre></td></tr></table></figure>
<p>其中第二个字段开始是 4，表示引用计数为 1 并且没有标志位，之后变成了 2，表示引用计数为 0 和 <code>RC_DEALLOCATING_FLAG</code> 标志位被设定了。这个被析构的对象被放在了处于 <code>DEALLOCATING</code> 状态的位置。</p>
<p>（顺便说一句，<code>RC_PINNED_FLAG</code> 到底是用来干什么的呢？我查找了相关代码，除了能够表明一个「固定的对象（pinned object）」外，其它对于这个标记一无所知。如果你弄清楚了或者有一些相关的猜测，请给我留言。）</p>
<p>现在让我们看一看弱引用计数的实现。它有同样的枚举结构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> : <span class="keyword">uint32_t</span> &#123;</span><br><span class="line">  <span class="comment">// There isn't really a flag here.</span></span><br><span class="line">  <span class="comment">// Making weak RC_ONE == strong RC_ONE saves an</span></span><br><span class="line">  <span class="comment">// instruction in allocation on arm64.</span></span><br><span class="line">  RC_UNUSED_FLAG = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  RC_FLAGS_COUNT = <span class="number">1</span>,</span><br><span class="line">  RC_FLAGS_MASK = <span class="number">1</span>,</span><br><span class="line">  RC_COUNT_MASK = ~RC_FLAGS_MASK,</span><br><span class="line"></span><br><span class="line">  RC_ONE = RC_FLAGS_MASK + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这就是 2 的来源：其中有一个保留的标志位，目前尚未被使用。奇怪的是，关于这段代码的注释似乎是不正确的，这的 <code>RC_ONE</code> 等于 2，而强引用的 <code>RC_ONE</code> 等于 4。我猜它们曾经是相等的，但后来它被修改了而注释却没有更新。我只是想表明如果注释是无用的，那你为什么还要写它呢。</p>
<p>所有这些是如何和加载弱引用相关联的呢？它是由 <a href="https://github.com/apple/swift/blob/swift-2.2-SNAPSHOT-2015-12-01-b/stdlib/public/runtime/HeapObject.cpp#L636" target="_blank" rel="external">swift_weakLoadStrong</a> 函数来处理的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HeapObject *swift::swift_weakLoadStrong(WeakReference *ref) &#123;</span><br><span class="line">  <span class="keyword">auto</span> object = ref-&gt;Value;</span><br><span class="line">  <span class="keyword">if</span> (object == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (object-&gt;refCount.isDeallocating()) &#123;</span><br><span class="line">    swift_weakRelease(object);</span><br><span class="line">    ref-&gt;Value = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> swift_tryRetain(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的代码，惰性归零是如何工作的已经一目了然了。当加载一个弱引用时，如果目标对象正在被销毁，就会对这个引用进行归零。反之，会保留目标对象并返回它。进一步深挖一点，我们可以看到 <code>swift_weakRelease</code> 如何释放对象的内存，前提是它是最后一个引用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> swift::swift_weakRelease(HeapObject *object) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!object) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (object-&gt;weakRefCount.decrementShouldDeallocate()) &#123;</span><br><span class="line">    <span class="comment">// 只有对象可以 weak-retained 和 weak-released</span></span><br><span class="line">    <span class="keyword">auto</span> metadata = object-&gt;metadata;</span><br><span class="line">    assert(metadata-&gt;isClassObject());</span><br><span class="line">    <span class="keyword">auto</span> classMetadata = <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> ClassMetadata*&gt;(metadata);</span><br><span class="line">    assert(classMetadata-&gt;isTypeMetadata());</span><br><span class="line">    swift_slowDealloc(object, classMetadata-&gt;getInstanceSize(),</span><br><span class="line">                      classMetadata-&gt;getInstanceAlignMask());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（注意：如果你正在查看版本库中的代码，使用「weak」命名的地方大多数都改成了「unowned」。上面的命名是截至撰写本文时最新的快照，但开发仍在继续。你可以查看和我这对应的版本库中的 2.2 版本的快照，或者获取最新的版本但是要注意命名的变化，并且实现也有可能发生了改变。)</p>
<h3 id="整合">整合</h3><p>我们已经在层级上自上往下地看到了 Swift 中的弱引用是如何实现的。那么在高层观察 Swift 的弱引用又是如何工作的呢？</p>
<ol>
<li>弱引用只是指向目标对象的指针。</li>
<li>在 Objective-C 中是<em>没有</em>办法单独追踪弱引用的。</li>
<li>相反，每一个 Swift 对象都有一个弱引用计数，和它的强引用计数相邻。</li>
<li>Swift 将对象的析构过程（deinit）和对象的释放（dealloc）解耦。一个对象可以被析构并释放它的外部资源，但不必释放对象本身所占用的内存。</li>
<li>当一个 Swift 对象的强引用计数变成零而弱引用计数仍大于零时，那么这个对象会被析构，但是不会被释放。</li>
<li>这意味着一个被释放对象的弱指针<em>仍然是一个有效的指针</em>，它可以被反向引用而不会崩溃或者加载垃圾数据。它们只是指向一个处于僵尸状态的对象。</li>
<li>当一个弱引用被加载时，运行时会检查目标对象的状态。如果目标对象是一个僵尸对象，然后它会对弱引用进行归零，也就是减少弱引用计数并返回 <code>nil</code>。</li>
<li>当僵尸对象的所有弱引用都被归零，那么这个僵尸对象就会被释放。</li>
</ol>
<p>比起 Objective-C 中的实现，这种设计会带来一些有趣的结果：</p>
<ul>
<li>不需要维护一个弱引用列表。这样既简化代码也提高了性能。</li>
<li>在一个线程归零一个弱引用和另外一个线程加载一个弱引用之间就不会存在竞态条件了。这也意味着加载一个弱引用和销毁一个弱引用对象不需要加锁。这也提高了性能。</li>
<li>一个对象即便没有了强引用，但是弱引用任然会导致该对象被分配的内存被占用，直到所有弱引用被加载或者被丢弃。这种做法临时增加了内存使用。但是要注意的是这个影响很小，当目标对象没有被释放时，它所占的内存大小只是实例本身。当最后一个强引用变成零时，所有的外部资源（包括用于存储的 <code>Array</code> 或 <code>Dictionary</code> 属性）都会被释放。弱引用会导致被分配的单个实例不会被释放，而不是整个对象树。</li>
<li>每一个对象都需要额外的内存来存储弱引用计数。但在实际的 64 位系统中，这似乎是无关紧要的。头字段要占据所有指针大小的块的数量，并且强和弱引用计数共享一个头字段。如果没有弱引用计数，强引用计数就会占据整个 64 位。通过使用<a href="http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html" target="_blank" rel="external">非指针（non-pointer）</a> <code>isa</code> 可以将强引用移到 <code>isa</code> 中，但我不确定那是不是很重要或者它未来会如何发展。 对于 32 位系统，弱引用计数会将对象的大小增加四个字节。然而，32 位系统如今已经没有那么重要了.</li>
<li>因为访问一个弱指针是如此的方便，所以 <code>unowned</code> 的语义也采用了相同的机制来实现。<code>unowned</code> 和 <code>weak</code> 工作方式是一样的，只是当目标对象被释放，<code>unowned</code> 会给你一个大大的失败，而不是给你返回一个 <code>nil</code> 。在 Objective-C 中，<code>__unsafe_unretained</code> 是作为一个带有未定义行为的原始指针来实现的，你可以快速的访问它，毕竟加载一个弱指针还是有点慢。</li>
</ul>
<h3 id="总结">总结</h3><p>Swift 的弱指针通过一种有趣的方式，既保证了速度和正确性，也保证较低的内存开销。通过追踪每个对象的弱引用计数，将对象的销毁和对象的析构过程分离开来，弱引用问题被安全而又快速的得到解决。正是由于可以查看标准库的源代码，这让我们可以在源代码级别看到究竟发生了什么，而不是像我们之前通过反编译和 dump 内存来进行研究。当然，正如你上面看到的那样，我们很难完全打破这个习惯。</p>
<p>今天就这样了。下次回来会带来更多的干货。由于假期的缘故，可能需要几周，但是我会在之前发布一篇稍微短一点的文章。不管怎样，给接下来的话题提更多的建议吧。周五问答是由读者们的想法驱动的，如果你有一个你希望了解的想法，<a href="mailto:mike@mikeash.com" target="_blank" rel="external">请告知我</a>!</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Mike Ash，<a href="https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html">原文链接</a>，原文日期：2015-12-11<br>译者：<a href="http://weibo.com/riven0951">riven</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>即便你已经在火星的一个洞穴里，紧闭着你的双眼并且捂住你的耳朵，<a href="https://swift.org/">也避免不了 Swift 已经开源的事实</a>。正因为开源，我们能够更加方便地去探索 Swift 中的很多有趣的特性，其中之一便是 Swift 中弱引用是如何工作的问题。</p>]]>
    
    </summary>
    
      <category term="Mike Ash" scheme="http://swiftggteam.github.io/tags/Mike-Ash/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于 Swift 演变的趣味探讨]]></title>
    <link href="http://swiftggteam.github.io/2015/12/25/interesting-discussions-on-swift-evolution/"/>
    <id>http://swiftggteam.github.io/2015/12/25/interesting-discussions-on-swift-evolution/</id>
    <published>2015-12-24T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/15/interesting-discussions-on-swift-evolution/" target="_blank" rel="external">原文链接</a>，原文日期：2015/12/15<br>译者：<a href="http://daizi.me" target="_blank" rel="external">小袋子</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>记得我曾分享过一些想法和建议，比如：</p>
<h3 id="newtype">newtype</h3><p>一个是建议 Swift 推出一个 <code>newtype</code> 的关键词，它可以添加完全不同于原生的可扩展的派生类型。例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">newtype <span class="type">Currency</span> = <span class="type">NSDecimal</span></span><br></pre></td></tr></table></figure>
<p>这创建了一个拥有所有 <code>NSDecimal</code> 所有行为的 <code>Currency</code> 类型。然而，你不能让一个 <code>NSDecimal</code> 类型的元素和一个 <code>Currency</code> 类型的元素相加，因为 Swift 中有类型检测。此外，你也可以扩展 <code>Currency</code> 类型。这样看起来就更加有针对性，因为不需要子类化或者添加新的存储属性。</p>
<a id="more"></a>
<p><code>newtype</code> 的另一个特性是能够创建柯里化类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">newtype <span class="type">Counter</span>&lt;<span class="type">A</span>&gt; = <span class="type">Dictionary</span>&lt;<span class="type">A</span>, <span class="type">Int</span>&gt;</span><br></pre></td></tr></table></figure>
<p>类型是部分确定的，具体行为可以在扩展中实现，从而能包含键（key）类型不相同但值类型都是 Int 的字典。</p>
<p>期待看到你们的评论。</p>
<h3 id="self">self</h3><p>另外一个提议是将 <code>self</code> 作为强制前缀，取代上下文语境推断。Greg Parker 在回复中写道：</p>
<blockquote>
<p>在 Objective-C 中 <code>self.property</code> 这种写法很不优雅。</p>
<p>第一种方法是只使用 <code>property</code>。但是同名变量（ivar）会产生歧义，Swift 没有这样的问题。</p>
<p>第二种方法是用 <code>property</code> 访问属性，用 <code>self-&gt;ivar</code> 去访问同名变量。这是不可行的，因为会和现有的大量代码冲突。Swift 也没有这样的问题。</p>
</blockquote>
<h3 id="前置条件与断言（Precondition_vs_Assert）">前置条件与断言（Precondition vs Assert）</h3><p>Dave Abrahams 提出了一个有关重命名断言和前置条件的建议，我立刻将其中的一些深刻见解记在笔记本上：</p>
<blockquote>
<p>从语言设计层面来说，这两个函数扮演不同的角色：<br>– assert：检查内部的错误代码。<br>– precondition：检查客户端给你的参数是否有效。</p>
<p>两者的区别很大，第二个要求有公共文档，第一个不需要。</p>
<p>例如：在 Swift 的标准库中，我们保证永远不会出现内存错误，除非你调用 (Obj)C 代码或者使用一个明确地标着「unsafe」的结构。我们需要去检验客户端参数，为了避免给了非法的参数引起内存泄露，我们要在参数中文档化这些需求作为前置条件，并且使用（等价的）precondition() 去检验它。我们还有一系列的内部合理检查，用以确定我们代码假定的正确性，而类型系统还不能保证这个代码的假定。由于这些原因，我们使用（等价的）assert()，因为我们不想降低<em>你的</em>代码性能（使用合理的检查）。</p>
<p>下面是几个具体的例子：</p>
</blockquote>
  <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 一个集合，其中的元素类型为 Element</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Repeat</span>&lt;<span class="title">Element</span>&gt; : <span class="title">CollectionType</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/// 获取 `position` 位置的元素</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// - 要求: `position` 是 `self` 中的有效位置并且 `position != endIndex`.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">subscript</span>(position: <span class="type">Int</span>) -&gt; <span class="type">Element</span> &#123;</span><br><span class="line">    _precondition(position &gt;= <span class="number">0</span> &amp;&amp; position &lt; <span class="built_in">count</span>, <span class="string">"Index out of range"</span>)</span><br><span class="line">    <span class="keyword">return</span> repeatedValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span>.<span class="title">UTF8View</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">_encodeSomeContiguousUTF16AsUTF8</span><span class="params">(i: Int)</span></span> -&gt; (<span class="type">Int</span>, <span class="type">UTF8Chunk</span>) &#123;</span><br><span class="line">    _sanityCheck(elementWidth == <span class="number">2</span>)</span><br><span class="line">    _sanityCheck(!_baseAddress._isNull)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> storage = <span class="type">UnsafeBufferPointer</span>(start: startUTF16, <span class="built_in">count</span>: <span class="keyword">self</span>.<span class="built_in">count</span>)</span><br><span class="line">    <span class="keyword">return</span> _transcodeSomeUTF16AsUTF8(storage, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在第一个例子中，我们有一个判断客户的 collection 没有越界的前置条件。在这个例子中，我们其实可以不做检查，因为越界也不会导致内存错误（因为返回的都是同一个 repeatedValue），但是我们还是加上了这个检查，这样我们的用户可以快速发现他们的 bug 。</p>
<p>第二个例子中是一个私有函数，它只能在我们保证 elementWidth == 2 和 _baseAddress 不为 null 的条件下调用（_sanityCheck 在 stdlib 下等价于 assert）。因为这是私有函数，使用者就是我们自己，所以看起来这个检查可以省略。但是有时候会出意外，比如后续的开发者可能会错误地使用它，因此我们需要添加检查。因为我们在 debug 和 release 的环境下运行我们的测试，并且有较高的测试覆盖率，因此（如果错误使用函数）断言很可能在某处被触发。</p>
<p>读完上面的内容，你可能认为 assert() 只能在私有方法中使用，而 precondition() 只能在公共方法中使用。事实并非如此；你可以内联任何私有方法到继承的公有方法的方法体内，因此合理的检查依然有意义。前置条件检查也会偶尔在私有方法中使用，最简单的例子就是公有方法转私有方法，复制代码的时候可以把原来的前置条件检查提取成一个私有的辅助方法（Helper）。</p>
<p><sup>*</sup>注意，有些前置条件实际上不会被执行，所以你不能指望所有的前置条件都被执行。</p>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/15/interesting-discussions-on-swift-evolution/">原文链接</a>，原文日期：2015/12/15<br>译者：<a href="http://daizi.me">小袋子</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>记得我曾分享过一些想法和建议，比如：</p>
<h3 id="newtype">newtype</h3><p>一个是建议 Swift 推出一个 <code>newtype</code> 的关键词，它可以添加完全不同于原生的可扩展的派生类型。例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">newtype <span class="type">Currency</span> = <span class="type">NSDecimal</span></span><br></pre></td></tr></table></figure>
<p>这创建了一个拥有所有 <code>NSDecimal</code> 所有行为的 <code>Currency</code> 类型。然而，你不能让一个 <code>NSDecimal</code> 类型的元素和一个 <code>Currency</code> 类型的元素相加，因为 Swift 中有类型检测。此外，你也可以扩展 <code>Currency</code> 类型。这样看起来就更加有针对性，因为不需要子类化或者添加新的存储属性。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Friday Q&A 2015-11-20：协变与逆变]]></title>
    <link href="http://swiftggteam.github.io/2015/12/24/friday-qa-2015-11-20-covariance-and-contravariance/"/>
    <id>http://swiftggteam.github.io/2015/12/24/friday-qa-2015-11-20-covariance-and-contravariance/</id>
    <published>2015-12-23T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Mike Ash，<a href="https://mikeash.com/pyblog/friday-qa-2015-11-20-covariance-and-contravariance.html" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-20<br>译者：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；校对：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>在现代的编程语言中，子类型（Subtypes）和超类型（Supertypes）已经成为了非常常见的一部分了。协变（Convariance）和逆变（Contravariance）则能告诉我们什么时候使用子类型或超类型会优于原来使用的类型。这在我们使用的大多数编程语言中非常的常见，但是很多开发者仍然对这些概念感到模糊不清。今天我们就来详细讨论一下。</p>
<a id="more"></a>
<h3 id="子类型（Subtypes）和超类型（Supertypes）">子类型（Subtypes）和超类型（Supertypes）</h3><p>我们都知道子类（Subclass）是什么。当你创建一个子类的时候，你就在创建一个子类型。用一个经典的例子来讲，就是用 <code>Animal</code> 的子类去创建一只 <code>Cat</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这让 <code>Cat</code> 成为了 <code>Animal</code> 的子类型，也就意味着所有的 <code>Cat</code> 都是 <code>Animal</code>。但并不意味着所有的 <code>Animal</code> 都是 <code>Cat</code>。</p>
<p>子类型通常能够替代超类型。很明显懂一点编程知识的任何程序员都知道，在 Swift 中，下面的代码的第一行能够正常的运行，然而第二行则不能：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animal: <span class="type">Animal</span> = <span class="type">Cat</span>()</span><br><span class="line"><span class="keyword">let</span> cat: <span class="type">Cat</span> = <span class="type">Animal</span>()</span><br></pre></td></tr></table></figure>
<p>对于函数类型也是适用的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">animalF</span><span class="params">()</span></span> -&gt; <span class="type">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Animal</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">catF</span><span class="params">()</span></span> -&gt; <span class="type">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Cat</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> returnsAnimal: () -&gt; <span class="type">Animal</span> = catF  <span class="comment">//可以运行</span></span><br><span class="line"><span class="keyword">let</span> returnsCat: () -&gt; <span class="type">Cat</span> = animalF  <span class="comment">//出错</span></span><br></pre></td></tr></table></figure>
<p>这些在 Objective-C 下也能实现，只不过要用 block，而且语法上会显得比较丑。所以我坚定地使用 Swift。</p>
<p>注意，以下的代码是有问题的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">catCatF</span><span class="params">(inCat: Cat)</span></span> -&gt; <span class="type">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> inCat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animalAnimal: <span class="type">Animal</span> -&gt; <span class="type">Animal</span> = catCatF</span><br></pre></td></tr></table></figure>
<p>很困惑，不是吗？不用担心，整篇文章就是为了彻底了解为什么第一个版本是可行而第二个版本是不可行的。除此之外，我们在探索的过程中还会了解很多非常有用的东西。</p>
<h3 id="重写（Override）方法">重写（Override）方法</h3><p>类似的事情在重写方法中也能正确地执行，想象一下有这样一个类：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">purchaseAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Animal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们建立它的子类，然后重写父类的方法，并改变返回值的类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrazyCatLady</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">purchaseAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Cat</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做对吗？对。为什么呢？</p>
<p><a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" target="_blank" rel="external">Liskov 替换原则</a>被用于指导何时该使用子类。简明扼要的来说，它指出任何子类的实例总是能够替代父类的实例。比如你有一个 <code>Animal</code>，你就能用 <code>Cat</code> 替代它；你也总是能够用 <code>CrazyCatLady</code> 替代 <code>Person</code>。</p>
<p>下面是使用 <code>Person</code> 作为例子写的一段代码，接下来会有解释来解释清楚：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person: <span class="type">Person</span> = getAPerson()</span><br><span class="line"><span class="keyword">let</span> animal: <span class="type">Animal</span> = person.purchaseAnimal()</span><br><span class="line">animal.pet()</span><br></pre></td></tr></table></figure>
<p>想象一下当 <code>getAPerson</code> 返回一位 <code>CrazyCatLady</code>。整段代码还可行吗？<code>CrazyCatLady.purchaseAnimal</code> 会返回一只 <code>Cat</code>。这个实例被放入了 <code>animal</code> 中。<code>Cat</code> 是 <code>Animal</code> 的一种，所以它也能够做 <code>Animal</code> 能够做的事情，包括 <code>pet</code> 方法。类似，<code>CrazyCatLady</code> 返回的 <code>Cat</code> 也是有效的。</p>
<p>我们这时把 <code>pet</code> 函数放入 <code>Person</code> 类中，所以我们能够知道一个人所养的特定的动物：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">purchaseAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Animal</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">pet</span><span class="params">(animal: Animal)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自然，<code>CrazyCatLady</code> 只拥有宠物猫：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrazyCatLady</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">purchaseAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Cat</span></span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">pet</span><span class="params">(animal: Cat)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在这样对吗？<em>不对！</em></p>
<p>为了理解为什么不对，我们来看一下使用这个方法的代码片段：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person: <span class="type">Person</span> = getAPerson()</span><br><span class="line"><span class="keyword">let</span> animal: <span class="type">Animal</span> = getAnAnimal()</span><br><span class="line">person.pet(animal)</span><br></pre></td></tr></table></figure>
<p>假设 <code>getAPerson</code> 方法返回了一位 <code>CrazyCatLady</code>，第一行非常的正确：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person: <span class="type">Person</span> = getAPerson()</span><br></pre></td></tr></table></figure>
<p>如果 <code>getAnAnimal</code> 方法返回了一只 <code>Dog</code>，它也是 <code>Animal</code> 的子类但是和 <code>Cat</code> 有截然不同的表现。接下来的一行看上去也非常的正确：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animal: <span class="type">Animal</span> = getAnAnimal()</span><br></pre></td></tr></table></figure>
<p>接下来我们的 <code>person</code> 变量中有一位 <code>CrazyCatLady</code>，以及在 <code>animal</code> 变量中有一只 <code>Dog</code>，然后执行了这一行：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">person.pet(animal)</span><br></pre></td></tr></table></figure>
<p>爆炸了噜！<code>CrazyCatLady</code> 的 <code>pet</code> 方法期望参数是一只 <code>Cat</code>。对于这只 <code>Dog</code> 就显得无计可施。这个方法也有可能会访问其他的属性或者调用其他 <code>Dog</code> 类所不具备的方法。</p>
<p>这段代码原本是完全正确的。首先它得到 <code>Person</code> 和 <code>Animal</code>，然后调用 <code>Person</code> 中的方法让人拥有这个 <code>Animal</code>。上面的问题在于我们把 <code>CrazyCatLady.pet</code> 方法的参数类型变成了 <code>Cat</code>。这破坏了 Liskov 替换原则：此时的 <code>CrazyCatLady</code> 并不能在任意的地方替代 <code>Person</code> 的使用。</p>
<p>感谢编译器给我们留了一手。它明白使用子类型用于重写方法的参数类型是不正确的，会拒绝编译这个代码。</p>
<p>那在重写方法时使用不同的类型究竟对不对呢？对！事实上，你需要<em>超类型（Supertype）</em>。举一个例子，假设 <code>Animal</code> 是 <code>Thing</code> 的子类，那么当我们重写 <code>pet</code> 方法时，参数类型变为 <code>Thing</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">pet</span><span class="params">(thing: Thing)</span></span></span><br></pre></td></tr></table></figure>
<p>这保证了可替换性。如果是一个 <code>Person</code>，那么这个方法所传进来的参数类型始终是 <code>Animal</code>，这是 <code>Thing</code> 的一种。</p>
<p>有个重要的规则来了：函数的返回值可以换成原类型的<em>子类型</em>，在层级上<em>降</em>了一级；反之函数的参数可以换成原类型的<em>超类型</em>，在层级上<em>升</em>了一级。</p>
<h3 id="单独的函数（Standalone_functions）">单独的函数（Standalone functions）</h3><p>这种子类型和超类型的关系我们已经在类上面了解得很清楚了。它能够通过类与类之间的层级关系直接推出。那么如果是单独的函数关系呢？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f1: <span class="type">A</span> -&gt; <span class="type">B</span> = ...</span><br><span class="line"><span class="keyword">let</span> f2: <span class="type">C</span> -&gt; <span class="type">D</span> = f1</span><br></pre></td></tr></table></figure>
<p>这种关系什么时候是对的，什么时候又是错的呢？</p>
<p>这可以被看做是 Liskov 替换原则的一种精简版本。 事实上，你可以把函数想象成是非常小的（mini-objects）、只有一个方法的对象。当你有两个不同的对象类型时，怎么做才能够让这两个对象也遵循我们的原则呢？只有当原对象类型是后者类型的子类型就可以了。那什么时候函数是另一个函数的子类型呢？正如上面所见，当前者的参数是后者的超类型并且返回值是后者的子类型即可。</p>
<p>把这个方法应用在这儿，上面的代码当 <code>A</code> 是 <code>C</code> 的超类型且 <code>B</code> 是 <code>D</code> 的子类型时可以正常的执行。用具体的例子来说：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f1: <span class="type">Animal</span> -&gt; <span class="type">Animal</span> = ...</span><br><span class="line"><span class="keyword">let</span> f2: <span class="type">Cat</span> -&gt; <span class="type">Thing</span> = f1</span><br></pre></td></tr></table></figure>
<p>参数和返回值的类型朝着相反的方向移动。可能不是你所想的那样，但是这就是能让函数正确执行的唯一方法。</p>
<p>这又是一个重要的规则：一个函数若是另外一个函数的子类型，那么它的参数是原函数参数的<em>超类型</em>，返回值是原函数返回值的<em>子类型</em>（译者注：又叫做 <a href="http://www.wikiwand.com/en/Robustness_principle" target="_blank" rel="external">Robustness 原则</a>）。</p>
<h3 id="属性（Property）">属性（Property）</h3><p>如果是只读的属性那就很简单。子类的属性必须是父类属性的子类型。只读的属性本质上是一个不接收参数而返回成员值的函数，所以上述的规则依旧适用。</p>
<p>可读可写的属性其实也非常的简单。子类的属性必须和父类的属性类型相同。一个可读可写的属性其实由一对函数组成。<code>Getter</code> 是一个不接收参数而返回成员值的函数，<code>Setter</code> 则是一个需要传入一个参数但无需返回值的函数。看下面的例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animal: <span class="type">Animal</span></span><br><span class="line"><span class="comment">// 这等价于：</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">getAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Animal</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">setAnimal</span><span class="params">(animal: Animal)</span></span></span><br></pre></td></tr></table></figure>
<p>正如我们之前得到的结论一样，函数的参数和返回值需要各自向上和向下改变一级。然而参数和返回值的类型却是固定的，所以它们的类型都不能被改变：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意到 animal 的类型是 Animal</span></span><br><span class="line"><span class="comment">// 这样不对（向下）</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">getAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Cat</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">setAnimal</span><span class="params">(animal: Cat)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样也不对（向上）</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">getAnimal</span><span class="params">()</span></span> -&gt; <span class="type">Thing</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">setAnimal</span><span class="params">(animal: Thing)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="泛型（Generics）">泛型（Generics）</h3><p>那如果是泛型呢？给定泛型类型的参数，什么时候又是正确的呢？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> var1: <span class="type">SomeType</span>&lt;<span class="type">A</span>&gt; = ...</span><br><span class="line"><span class="keyword">let</span> var2: <span class="type">SomeType</span>&lt;<span class="type">B</span>&gt; = var1</span><br></pre></td></tr></table></figure>
<p>理论上来说，这要看泛型参数是如何使用的。一个泛型类型参数本身并不做什么事情，但是它会被用作于属性的类型、函数方法的参数类型和返回类型。</p>
<p>如果泛型参数仅仅被用作函数返回值的类型和只读属性身上，那么 <code>B</code> 需要是 <code>A</code> 的超类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> var1: <span class="type">SomeType</span>&lt;<span class="type">Cat</span>&gt; = ...</span><br><span class="line"><span class="keyword">let</span> var2: <span class="type">SomeType</span>&lt;<span class="type">Animal</span>&gt; = var1</span><br></pre></td></tr></table></figure>
<p>如果泛型参数仅被用作于函数方法的参数类型，那么 <code>B</code> 需要是 <code>A</code> 的子类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> var1: <span class="type">SomeType</span>&lt;<span class="type">Animal</span>&gt; = ...</span><br><span class="line"><span class="keyword">let</span> var2: <span class="type">SomeType</span>&lt;<span class="type">Cat</span>&gt; = var1</span><br></pre></td></tr></table></figure>
<p>如果泛型参数在上述提到的两方面都被使用了，那么当且仅当 <code>A</code> 和 <code>B</code> 是相同类型的时候才是有效的。这也同样适用于当泛型参数作为可读可写属性的情况。</p>
<p>这就是理论部分，看上去有些复杂但其实很简短。与此同时，Swift 寻求到了其简便的解决之道。对于两个需要相互匹配的泛型类型，Swift 要求它们的泛型参数的类型也需要相同。子类型和超类型都是不被允许的，尽管理论上可行。</p>
<p>Objective-C 事实上比 Swift 更好一些。一个在 Objective-C 中的泛型参数可以在声明时增加 <code>__covariant</code> 关键字来表示它能够接受子类型，而在声明时增加 <code>__contravariant</code> 关键字来表示它能够接受超类型。这在 <code>NSArray</code> 和其他的类的接口中有所体现：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">@interface NSArray&#60;__covariant ObjectType&#62; : NSObject ...</span><br></pre></td></tr></table></figure>
<h3 id="协变和逆变（Convariance_and_Contravariance）">协变和逆变（Convariance and Contravariance）</h3><p>那些细心的读者会注意到：在标题中提到的两个词至今为止我通篇未提。现在我们既然了解了这些概念，那就来谈一下这几个专业术语。</p>
<p><em>协变（Convariance）</em>指可接受子类型。重写只读的属性是「协变的」。</p>
<p><em>逆变（Contravariance）</em>指可接受超类型。重写方法中的参数是「逆变的」。</p>
<p><em>不变（Invariance）</em>指既不接受子类型，又不接受超类型。Swift 中泛型是「不变的」。</p>
<p><em>双向协变（Bivariate）</em>指既接受子类型，又接受超类型。我想不到在 Objective-C 或 Swift 中的任何例子。</p>
<p>你会发现这种专业术语非常难记。那就对了，因为这并不重要。只要你懂得子类型、超类型，以及什么时候在特定位置适用一个类的子类或者超类就够了。在需要用到术语的时候看一下就够了。</p>
<h3 id="小结">小结</h3><p>协变和逆变决定了在特定位置该怎样使用子类型或超类型。通常出现在重写方法以及改变传入参数或者返回值类型的地方。这种情况下我们已经知道返回值必须是原来的子类型，而参数是原来的超类型。整个指导我们这么做的原则就叫做 Liskov 替换原则，意思是任何子类的实例总是能够使用在父类的实例所使用的地方。子类型和超类型就是从这条原则中衍生出来。</p>
<p>今天就到这儿了。记得回来探索更多有趣的事情；或者说就来探索有趣的事情。「更多」可能在这不适用，因为协变这件事并不是那么的令人激动。无论如何，我们的 Friday Q&amp;A 都会听从读者的建议，所以有什么更高的建议或者文章的话，记得<a href="mailto:mike@mikeash.com" target="_blank" rel="external">给我们写信</a>！</p>
<hr>
<p>译者注：</p>
<ol>
<li>Swift 中的泛型的确是「不变的（Invariance）」，但是 Swift 标准库中的 Collection 类型通常情况下是「协变的（Convariance）」。举个例子：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thing</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">// 亦可以使用结构体 struct 声明</span></span><br><span class="line">    <span class="keyword">var</span> thing: <span class="type">T</span> </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> thing: <span class="type">T</span>) &#123; <span class="keyword">self</span>.thing = thing &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> foo: <span class="type">Thing</span>&lt;<span class="type">UIView</span>&gt; = <span class="type">Thing</span>(<span class="type">UIView</span>()) </span><br><span class="line"><span class="keyword">var</span> bar: <span class="type">Thing</span>&lt;<span class="type">UIButton</span>&gt; = <span class="type">Thing</span>(<span class="type">UIButton</span>()) </span><br><span class="line">foo = bar <span class="comment">// 报错：error: cannot assign value of type 'Thing&lt;UIButton&gt;' to type 'Thing&lt;UIView&gt;' </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array 则不会报错 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> views: <span class="type">Array</span>&lt;<span class="type">UIView</span>&gt; = [<span class="type">UIView</span>()] </span><br><span class="line"><span class="keyword">var</span> buttons: <span class="type">Array</span>&lt;<span class="type">UIButton</span>&gt; = [<span class="type">UIButton</span>()] </span><br><span class="line">views = buttons</span><br></pre></td></tr></table></figure>
<ol>
<li>Swift 中的 Protocol 不支持这里的类型改变。如果某个协议是继承自另外一个协议而且尝试着「重写」父协议的方法，Swift 会把它当做是另外一个方法。举个例子：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thing</span> </span>&#123;&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>: <span class="title">Thing</span> </span>&#123;&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SuperP</span> </span>&#123; </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">f</span><span class="params">(animal: Animal)</span></span> -&gt; <span class="type">Animal</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SubP1</span>: <span class="title">SuperP</span> </span>&#123; </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">f</span><span class="params">(thing: Thing)</span></span> -&gt; <span class="type">Cat</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SubP2</span>: <span class="title">SuperP</span> </span>&#123; </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">f</span><span class="params">(cat: Cat)</span></span> -&gt; <span class="type">Thing</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImplementsSubP1</span>: <span class="title">SubP1</span> </span>&#123; </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">f</span><span class="params">(thing: Thing)</span></span> -&gt; <span class="type">Cat</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Cat</span>() </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImplementsSubP2</span>: <span class="title">SubP2</span> </span>&#123; </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">f</span><span class="params">(cat: Cat)</span></span> -&gt; <span class="type">Thing</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Thing</span>() </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// ImplementSubP1 和 ImplementSubP2 将不被认为遵循了 SuperP 的协议</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Mike Ash，<a href="https://mikeash.com/pyblog/friday-qa-2015-11-20-covariance-and-contravariance.html">原文链接</a>，原文日期：2015-11-20<br>译者：<a href="https://github.com/Cee">Cee</a>；校对：<a href="http://weibo.com/xiaoxxiao">千叶知风</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>在现代的编程语言中，子类型（Subtypes）和超类型（Supertypes）已经成为了非常常见的一部分了。协变（Convariance）和逆变（Contravariance）则能告诉我们什么时候使用子类型或超类型会优于原来使用的类型。这在我们使用的大多数编程语言中非常的常见，但是很多开发者仍然对这些概念感到模糊不清。今天我们就来详细讨论一下。</p>]]>
    
    </summary>
    
      <category term="Mike Ash" scheme="http://swiftggteam.github.io/tags/Mike-Ash/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 3 及展望]]></title>
    <link href="http://swiftggteam.github.io/2015/12/23/swift-3/"/>
    <id>http://swiftggteam.github.io/2015/12/23/swift-3/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-3/" target="_blank" rel="external">原文链接</a>，原文日期：2015/12/10<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="undefined"></a></p>
</blockquote>
<!--此处开始正文-->
<p>2015 年 12 月 3 日，Swift 正式开源。同时，官方也公布了 Swift 3 的最新消息，即 Swift 3 将会在 2016 年秋天发布。</p>
<a id="more"></a>
<h2 id="API_设计指南与_Swift_中_Objective-C_的导入">API 设计指南与 Swift 中 Objective-C 的导入</h2><p>Swift 3 的 API 设计指南将与 Objective-C 中 Cocoa 的完全不同。这就意味着 Objective-C 中的 API 映射到 Swift 时会与以往不同。<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md" target="_blank" rel="external">这里</a>有一个相关的例子可以研究一下。以下这行代码的方法调用是从现有的 Objective-C 中「翻译」成 Swift 的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> contentString = listItemView.stringValue.stringByTrimmingCharactersInSet(</span><br><span class="line">   <span class="type">NSCharacterSet</span>.whitespaceAndNewlineCharacterSet())</span><br></pre></td></tr></table></figure>
<p>而在 Swift 3 中同样的方法调用将会是下面这个样子的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> content = listItem.stringValue.trimming(.whitespaceAndNewlines)</span><br></pre></td></tr></table></figure>
<p>这样让语法看上去更「Swift 化」。然而，这也意味着已经导入的 Objective-C API 将会有很大变动，因此，现有的这些代码将会报错。</p>
<h2 id="彻底的泛型">彻底的泛型</h2><p>Swift 有泛型，但是这次是为了引进新的特性，就像递归协议约束（使得受限的扩展遵循新协议的能力），比如遵循 <code>Equatable</code> 的数组的元素也是遵循 <code>Equatable</code> 的。</p>
<h2 id="精简的语言">精简的语言</h2><p>对于那些「和 Swift 语法不是很配」的语言特性仍然会有一些小改动。同样的，这也会使得现有的这些代码报错。</p>
<h2 id="展望_Swift_3">展望 Swift 3</h2><ul>
<li><p>Swift 目前还没有在语言层面支持并发操作。取而代之的是使用 NSOpertion 或 dispatch queues 来处理。这种状况在 Swift 3 中仍然不会改变。但是，在未来（Swift 4？）可能会有一个语言层面上并发操作的支持。</p>
</li>
<li><p>Swift 和 C，特别是 Objective-C，现在已经有了很好的兼容。但是，却缺乏与 C++ 的兼容。虽然，这也不会在 Swift 3 上有所改变，但是这需要一个比较长期的目标来引进它。</p>
</li>
</ul>
<h2 id="小结">小结</h2><p>首先，Swift 将会在未来大规模的改善和提升，这是一个非常好的消息。另一方面，Swift 3 的发布会使得现有的 Swift 2 代码报错，因此，需要做一些代码迁移的工作才行。</p>
<h2 id="参考">参考</h2><p><a href="http://swift.org/" target="_blank" rel="external">Swift.org</a><br><a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">Swift Programming Language Evolution</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Thomas Hanning，<a href="http://www.thomashanning.com/swift-3/">原文链接</a>，原文日期：2015/12/10<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="undefined"></a></p>
</blockquote>
<!--此处开始正文-->
<p>2015 年 12 月 3 日，Swift 正式开源。同时，官方也公布了 Swift 3 的最新消息，即 Swift 3 将会在 2016 年秋天发布。</p>]]>
    
    </summary>
    
      <category term="Thomas Hanning" scheme="http://swiftggteam.github.io/tags/Thomas-Hanning/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[原创] 每周 Swift 社区问答 2015-12-23]]></title>
    <link href="http://swiftggteam.github.io/2015/12/23/swift-qa-2015-12-23/"/>
    <id>http://swiftggteam.github.io/2015/12/23/swift-qa-2015-12-23/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2015-12-23T15:15:15.447Z</updated>
    <content type="html"><![CDATA[<p>作者：<a href="http://codebuild.me" target="_blank" rel="external">shanks</a></p>
<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Code doesn’t work on Playground</a></li>
<li><a href="#Q2">Array cannot be bridged from Objective-C</a></li>
<li><a href="#Q3">Why do we need the keywords “let” and “var” at all ?</a></li>
<li><a href="#Q4">“If” statement with an optional value not working</a></li>
<li><a href="#Q5">Generic Random Function in Swift</a></li>
<li><a href="#Q6">Setting a variable to an operator function</a></li>
<li><a href="#Q7">Why I can’t use let in protocol in Swift?</a> </li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151223/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151223.playground" target="_blank" rel="external">点击下载</a></p>
<a id="more"></a>
<p><a name="Q1"></a></p>
<h2 id="Question1:_Code_doesn’t_work_on_Playground">Question1: Code doesn’t work on Playground</h2><p><a href="https://forums.developer.apple.com/thread/27995" target="_blank" rel="external">Q1链接地址</a></p>
<h3 id="问题描述">问题描述</h3><p>提问者说以下代码在 Playground 下运行， <code>range</code> 返回<code>nil</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> telefone = <span class="string">"+42 43 23123-2221"</span>   </span><br><span class="line"><span class="keyword">let</span> range = telefone.rangeOfString(<span class="string">"\\d&#123;4,5&#125;\\-?\\d&#123;4&#125;"</span>, options:.<span class="type">RegularExpressionSearch</span>)   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"range <span class="subst">\(range)</span>"</span>) <span class="comment">//here returns nil</span></span><br></pre></td></tr></table></figure>
<p>下面回复，实际上是可以的，亲测也是可以，也不知道提问者是不是 Xcode 版本问题，输出结果：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">range <span class="type">Optional</span>(<span class="type">Range</span>(<span class="number">7</span>..&lt;<span class="number">17</span>))\n</span><br></pre></td></tr></table></figure>
<h3 id="解答">解答</h3><p>这个问题是关于正则表达式匹配的，匹配结果返回的是<code>Range</code>类型。<br>然后提问者不甘心，写出了一段很复杂的解决方案：</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">Foundation</span>  </span><br><span class="line"><span class="keyword">var</span> telefone = <span class="string">"+55 11 11111‑1111"</span>  </span><br><span class="line"><span class="keyword">let</span> phoneNumberRegEx = <span class="string">"(?:(\\+\\d\\d\\s+)?((?:\\(\\d\\d\\)|\\d\\d)\\s+)?)(\\d&#123;4,5&#125;\\-?\\d&#123;4&#125;)"</span>;  </span><br><span class="line"><span class="keyword">let</span> <span class="type">range</span> = telefone.rangeOfString(phoneNumberRegEx,  </span><br><span class="line">    options:.<span class="type">RegularExpressionSearch</span>)  </span><br><span class="line">print(<span class="string">"range \(range)"</span>)  </span><br><span class="line"><span class="keyword">var</span> found = telefone.substringWithRange(<span class="type">range</span>!)  </span><br><span class="line">print(found)  </span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">try</span>! <span class="type">NSRegularExpression</span>(pattern: phoneNumberRegEx, options: [])  </span><br><span class="line"><span class="keyword">let</span> telephoneRange = <span class="type">NSMakeRange</span>(<span class="number">0</span>, telefone.characters.count)  </span><br><span class="line"><span class="keyword">let</span> <span class="literal">result</span> = regex.firstMatchInString(telefone, options: <span class="type">NSMatchingOptions</span>(rawValue: <span class="number">0</span>), <span class="type">range</span>: telephoneRange)  </span><br><span class="line"><span class="keyword">let</span> r1 = <span class="literal">result</span>!.rangeAtIndex(<span class="number">1</span>)  </span><br><span class="line"><span class="keyword">let</span> r2 = <span class="literal">result</span>!.rangeAtIndex(<span class="number">2</span>)  </span><br><span class="line"><span class="keyword">let</span> r3 = <span class="literal">result</span>!.rangeAtIndex(<span class="number">3</span>)  </span><br><span class="line"><span class="keyword">if</span> (r1.length &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> phoneCountry = (telefone <span class="keyword">as</span> <span class="type">NSString</span>).substringWithRange(r1)  </span><br><span class="line">    print(<span class="string">"country: \(phoneCountry)"</span>)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (r2.length &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> phoneArea = (telefone <span class="keyword">as</span> <span class="type">NSString</span>).substringWithRange(r2)  </span><br><span class="line">    print(<span class="string">"area: \(phoneArea)"</span>)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (r3.length &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> phone = (telefone <span class="keyword">as</span> <span class="type">NSString</span>).substringWithRange(r3)  </span><br><span class="line">    print(<span class="string">"phone: \(phone)"</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说会报错，下面大神看出了问题：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">var telefone = "+55 11 11111‑1111"  //字符'‑'和下面正则表达式的字符'-'匹配不上</span><br><span class="line">let phoneNumberRegEx = "(?:(<span class="command">\\</span>+<span class="command">\\</span>d<span class="command">\\</span>d<span class="command">\\</span>s+)?((?:<span class="command">\\</span>(<span class="command">\\</span>d<span class="command">\\</span>d<span class="command">\\</span>)|<span class="command">\\</span>d<span class="command">\\</span>d)<span class="command">\\</span>s+)?)(<span class="command">\\</span>d<span class="special">&#123;</span>4,5<span class="special">&#125;</span><span class="command">\\</span>-?<span class="command">\\</span>d<span class="special">&#123;</span>4<span class="special">&#125;</span>)";</span><br></pre></td></tr></table></figure>
<p>原来是telefone中的字符”‑”(U+002D)和正则表达式中的字符”-“(U+2011)用混了。统一改成”-“(U+2011)就好了。</p>
<p>估计第一个问题也是这样造成的。</p>
<p><a name="Q2"></a></p>
<h2 id="Question2:_Array_cannot_be_bridged_from_Objective-C">Question2: Array cannot be bridged from Objective-C</h2><p><a href="https://forums.developer.apple.com/thread/28678" target="_blank" rel="external">Q2链接地址</a></p>
<h3 id="问题描述-1">问题描述</h3><p>以下代码会在<code>testUnbridgableArrayOfPs</code>函数中报错:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PImpl</span>: <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">unbridgableArrayOfPs</span><span class="params">()</span></span> -&gt; [<span class="type">P</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> pees = [<span class="type">PImpl</span>(name: <span class="string">"A"</span>), <span class="type">PImpl</span>(name: <span class="string">"B"</span>), <span class="type">PImpl</span>(name: <span class="string">"C"</span>)]</span><br><span class="line">    <span class="keyword">return</span> pees</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">arrayOfPs</span><span class="params">()</span></span> -&gt; [<span class="type">P</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="type">PImpl</span>(name: <span class="string">"A"</span>), <span class="type">PImpl</span>(name: <span class="string">"B"</span>), <span class="type">PImpl</span>(name: <span class="string">"C"</span>)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">testUnbridgableArrayOfPs</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> p = unbridgableArrayOfPs() <span class="comment">// Fails with fatal error: array cannot be bridged from Objective-C</span></span><br><span class="line">    <span class="keyword">let</span> result = p.<span class="built_in">map</span>&#123;$<span class="number">0</span>.name&#125;.joinWithSeparator(<span class="string">""</span>)</span><br><span class="line">    <span class="comment">//XCTAssertEqual(result, "ABC")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">testArrayOfPs</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> p = arrayOfPs() <span class="comment">// We get our P's</span></span><br><span class="line">    <span class="keyword">let</span> result = p.<span class="built_in">map</span>&#123;$<span class="number">0</span>.name&#125;.joinWithSeparator(<span class="string">""</span>)</span><br><span class="line">   <span class="comment">// XCTAssertEqual(result, "ABC")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testUnbridgableArrayOfPs()</span><br><span class="line">testArrayOfPs()</span><br></pre></td></tr></table></figure>
<p>楼主还用了<code>XCTAssertEqual</code>来进行测试，但是 Playground不支持<code>XCTest</code>测试框架，所以代码我就现注释掉了。<br>楼主吐槽，定义了变量，使用了类型推断，就会报错。直接返回就不会。。</p>
<h3 id="问题解答">问题解答</h3><p>不使用类型推断，定义时候，直接指定类型，就没有问题了：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">let pees: [P] = [<span class="function"><span class="title">PImpl</span><span class="params">(name: <span class="string">"A"</span>)</span></span>, <span class="function"><span class="title">PImpl</span><span class="params">(name: <span class="string">"B"</span>)</span></span>, <span class="function"><span class="title">PImpl</span><span class="params">(name: <span class="string">"C"</span>)</span></span>]</span><br></pre></td></tr></table></figure>
<p>类型推断会把<code>pees</code> 推断为<code>PImpl</code>类型，虽然<code>PImpl</code>遵从协议<code>P</code>，目前还是需要显式做一下声明或者转换。<code>OOPer</code> 还提供了以下 2 种转换方式：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pees = [PImpl(name: <span class="string">"A"</span>), PImpl(name: <span class="string">"B"</span>), PImpl(name: <span class="string">"C"</span>)] <span class="keyword">as</span> [P] </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pees = [PImpl(name: <span class="string">"A"</span>), PImpl(name: <span class="string">"B"</span>), PImpl(name: <span class="string">"C"</span>)]  </span><br><span class="line"><span class="keyword">let</span> peesAsArrayP: [P] = pees.<span class="keyword">map</span>&#123;<span class="variable">$0</span> as P&#125;  </span><br><span class="line"><span class="keyword">return</span> peesAsArrayP</span><br></pre></td></tr></table></figure>
<p><a name="Q3"></a></p>
<h2 id="Question3:_Why_do_we_need_the_keywords_“let”_and_“var”_at_all_?">Question3: Why do we need the keywords “let” and “var” at all ?</h2><p><a href="https://forums.developer.apple.com/thread/28673" target="_blank" rel="external">Q3链接地址</a></p>
<h3 id="问题描述-2">问题描述</h3><p>这个问题没有涉及到代码，提问者写了几段文字，为了表达自己的观点：为神马会有<code>var</code>关键字的存在，完全可以去掉：</p>
<ul>
<li>定义局部变量时，如果要定义一个常量，可以直接使用<code>let</code>,然后其他非常量的情况下，完全可以省略掉<code>var</code>, 因为可以直接推断出来啊</li>
<li>类中变量定义也是可以类似的来做，<code>let</code> 定义常量，没有<code>let</code>就是变量</li>
</ul>
<p>回想一下好像是这么一回事。。。</p>
<h3 id="问题解答-1">问题解答</h3><p>这个问题引来了 Chris Lattner 的回复。。。，所以得好好说说， Chris 回复的大概意思如下：<br>首先，Chris 认为这个问题很有意思，说明 Swift 作者也应该思考过这个问题的。的确， Swift 编译器是可以基于提问者的思考，去推断出变量的可变修饰符，加<code>var</code> 和没加<code>var</code>对于编译器来讲没啥区别。主要基于2个目的来设计的<code>var</code>关键字：</p>
<ul>
<li>human factors：主要是从可读性来讲，显式的声明<code>var</code>能够让代码更加可读，有点类似于 Swift 中目前饱受诟病的类型推断一样，目前大部分指南，都推荐你显式定义类型，可读性很高，且编译器不会出错。</li>
<li>hard cases：在一些复杂的情况下，没有使用<code>var</code>和<code>let</code>，编译器会很难推断出来是变量还是常量（公共全局变量，公共实例变量等）。所以人为使用<code>var</code>和<code>let</code>表明你的态度很重要。</li>
</ul>
<p><a name="Q4"></a></p>
<h2 id="Question4:_“If”_statement_with_an_optional_value_not_working">Question4: “If” statement with an optional value not working</h2><h3 id="问题链接">问题链接</h3><p><a href="http://stackoverflow.com/questions/34389158/if-statement-with-an-optional-value-not-working" target="_blank" rel="external">Q4链接地址</a></p>
<h3 id="问题描述-3">问题描述</h3><p>此贴问题比较初级，楼主问的问题也是错误的，但是对于初学者来讲，值得一看。主要是对 Optional 类型的使用和理解。首先我们看看问题：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = Optional(<span class="string">"6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is 6"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is not 6"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>楼主说定义了一个值为 Optional(“6”) 的变量 x， 然后去和数字 6 比较，这段代码在 Playground 运行，因为 Optional(“6”) 是 Optional<string> 类型的，不能和 Int 进行比较。</string></p>
<h3 id="问题解答-2">问题解答</h3><p>上述代码改为：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = Optional(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is 6"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is not 6"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： x is 6</span></span><br></pre></td></tr></table></figure>
<p>x 的类型是一个可选类型，直接使用 if 去和固定值进行比较，编译器会拆包出来真正的值去比较。不过更推荐的做法是，使用 if let 去显式拆包：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x1 = <span class="type">Optional</span>(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> y = x1 <span class="keyword">where</span> y == <span class="number">6</span>  &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is 6"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x is not 6"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="Q5"></a></p>
<h2 id="Question5:_Generic_Random_Function_in_Swift">Question5: Generic Random Function in Swift</h2><h3 id="问题链接-1">问题链接</h3><p><a href="http://stackoverflow.com/questions/34387250/generic-random-function-in-swift" target="_blank" rel="external">Q5链接地址</a></p>
<h3 id="问题描述-4">问题描述</h3><p>问题很简单，如何实现随机数生成的泛型表达，支持 Int， Float，Double 和 CGFloat？</p>
<h3 id="问题解答-3">问题解答</h3><p>首先，可以分部对这几种类型做扩展，来生成随机数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: Int = <span class="number">0</span>, <span class="number">_</span> upper: Int = <span class="number">100</span>)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lower + <span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>(upper - lower + <span class="number">1</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Double</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: Double = <span class="number">0</span>, <span class="number">_</span> upper: Double = <span class="number">100</span>)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">Double</span>(arc4random()) / <span class="number">0xFFFFFFFF</span>) * (upper - lower) + lower</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Float</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: Float = <span class="number">0</span>, <span class="number">_</span> upper: Float = <span class="number">100</span>)</span></span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">Float</span>(arc4random()) / <span class="number">0xFFFFFFFF</span>) * (upper - lower) + lower</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">CGFloat</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// SwiftRandom extension</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(lower: CGFloat = <span class="number">0</span>, <span class="number">_</span> upper: CGFloat = <span class="number">1</span>)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGFloat</span>(<span class="type">Float</span>(arc4random()) / <span class="type">Float</span>(<span class="type">UINT32_MAX</span>)) * (upper - lower) + lower</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Int</span>.random()</span><br></pre></td></tr></table></figure>
<p>也可以使用扩展协议来实现，不过 Int 和 Float，Double，CGFloat的协议不太一样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FloatingPointArithmeticType</span>: <span class="title">FloatingPointType</span> </span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> /<span class="params">(lhs: <span class="keyword">Self</span>, rhs: <span class="keyword">Self</span>)</span></span> -&gt; <span class="type">Self</span></span><br><span class="line">    <span class="comment">// etc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Double</span>: <span class="title">FloatingPointArithmeticType</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Float</span>: <span class="title">FloatingPointArithmeticType</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CGFloat</span>: <span class="title">FloatingPointArithmeticType</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FloatingPointArithmeticType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">rand</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="type">Self</span>(arc4random())</span><br><span class="line">        <span class="keyword">let</span> denom = <span class="type">Self</span>(<span class="type">UInt32</span>.<span class="built_in">max</span>)</span><br><span class="line">        <span class="comment">// this line won’t compile:</span></span><br><span class="line">        <span class="keyword">return</span> num / denom</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// so these now work</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="type">Double</span>.rand()  <span class="comment">// etc</span></span><br></pre></td></tr></table></figure>
<p>而 Int 的随机数，直接通过<code>arc4random()</code>生成来转换，因为<code>arc4random()</code>结果是<code>UInt32</code>的,代码在第一段已经有了，直接基于 Int 去扩展。</p>
<p><a name="Q6"></a></p>
<h2 id="Question6:_Setting_a_variable_to_an_operator_function">Question6: Setting a variable to an operator function</h2><h3 id="问题链接-2">问题链接</h3><p><a href="http://stackoverflow.com/questions/34386306/setting-a-variable-to-an-operator-function" target="_blank" rel="external">Q6链接地址</a></p>
<h3 id="问题描述-5">问题描述</h3><p>楼主的问题是，既然函数可以是第一公民，那么运算符也能够是第一公民，可以当成右值赋值给一个变量。代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> +<span class="params">(lhs: Int, rhs: Int)</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> op = + <span class="comment">// results in an error</span></span><br></pre></td></tr></table></figure>
<p>但是，这段代码会报错，这是为什么呢？</p>
<h3 id="问题解答-4">问题解答</h3><p>在 Swift 中，函数是第一公民，运算符也是第一公民，但是在作为右键赋值时，需要加括号包住操作符，并且要求显式定义操作符变量的类型，或者做显式转换：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">func +<span class="function"><span class="params">(lhs: Int, rhs: Int)</span> -&gt;</span> Int &#123; <span class="keyword">return</span> <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="function"><span class="title">v</span> = <span class="params">(+)</span> <span class="title">as</span> <span class="params">(Int,Int)</span> -&gt;</span> Int</span><br><span class="line"><span class="keyword">let</span> out = v(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attribute">op</span>: <span class="function"><span class="params">(Int, Int)</span> -&gt;</span> Int = (+)</span><br><span class="line">op(<span class="number">3</span>, <span class="number">4</span>) <span class="pi">//输出1，如果去掉自定义+操作符，输出7</span></span><br></pre></td></tr></table></figure>
<p>在另外一篇post中，也是类似的提问：<br><a href="http://stackoverflow.com/questions/30017400/set-a-variable-to-the-less-than-operator-as-a-function-in-swift" target="_blank" rel="external">set-a-variable-to-the-less-than-operator-as-a-function-in-swift</a></p>
<p><a name="Q7"></a></p>
<h2 id="Question7:_Why_I_can’t_use_let_in_protocol_in_Swift?">Question7: Why I can’t use let in protocol in Swift?</h2><h3 id="问题链接-3">问题链接</h3><p><a href="http://stackoverflow.com/questions/34385897/why-i-cant-use-let-in-protocol-in-swift" target="_blank" rel="external">Q7链接地址</a></p>
<h3 id="问题描述-6">问题描述</h3><p>楼主问，为啥以下协议定义中的只读存储变量，不能使用<code>let</code>定义的常量替代？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">someProtocol</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> someProperty: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">someProtocol1</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">let</span> someProperty: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题解答-5">问题解答</h3><p><code>let</code> 修饰的是常量，而协议里面是不能指定变量的存储方式的，也就是说，如果要在协议里面，要求遵从只读属性，只能使用var和get，也就是<code>var someProperty: String { get }</code>这种写法。<br>在具体定义的类或者结构体中，如果协议是要求只读计算属性，那么具体的实现可以使用<code>let</code>修饰，也可以实现<code>set</code>操作，也可以是一个存储属性。<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someProperty: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;  <span class="comment">// abstract interface</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> someProperty: <span class="type">String</span>  <span class="comment">// concrete implementation: stored property</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OtherStruct</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> someProperty: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(str)</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">            str = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="comment">// concrete implementation: computed property</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="type">MyStruct</span>(someProperty: <span class="string">""</span>)</span><br><span class="line"><span class="comment">//a.someProperty = "est" --错误，常量不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">OtherStruct</span>(str: <span class="string">"test"</span>)</span><br><span class="line">b.someProperty</span><br><span class="line">b.someProperty = <span class="string">"other test"</span></span><br><span class="line">b.str</span><br></pre></td></tr></table></figure></p>
<p>也就是说，协议要求只是一个最小化要求。如果协议是定义的<code>get</code>和<code>set</code>，那么具体实现就不能定义为只读的了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someProperty: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;  <span class="comment">// abstract interface</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OtherStruct1</span>: <span class="title">MyProtocol1</span> </span>&#123; <span class="comment">//错误：candidate is not settable, but protocol requires it</span></span><br><span class="line">    <span class="keyword">var</span> str: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> someProperty: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(str)</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;  <span class="comment">// concrete implementation: computed property</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>作者：<a href="http://codebuild.me">shanks</a></p>
<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Code doesn’t work on Playground</a></li>
<li><a href="#Q2">Array cannot be bridged from Objective-C</a></li>
<li><a href="#Q3">Why do we need the keywords “let” and “var” at all ?</a></li>
<li><a href="#Q4">“If” statement with an optional value not working</a></li>
<li><a href="#Q5">Generic Random Function in Swift</a></li>
<li><a href="#Q6">Setting a variable to an operator function</a></li>
<li><a href="#Q7">Why I can’t use let in protocol in Swift?</a> </li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151223/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151223.playground">点击下载</a></p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://swiftggteam.github.io/tags/Swift/"/>
    
      <category term="原创" scheme="http://swiftggteam.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="社区问答" scheme="http://swiftggteam.github.io/tags/%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%94/"/>
    
      <category term="Swift" scheme="http://swiftggteam.github.io/categories/Swift/"/>
    
      <category term="iOS开发" scheme="http://swiftggteam.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Swift 中使用 Alamofire 进行网络编程]]></title>
    <link href="http://swiftggteam.github.io/2015/12/22/alamofire-beginner-guide/"/>
    <id>http://swiftggteam.github.io/2015/12/22/alamofire-beginner-guide/</id>
    <published>2015-12-21T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：gregg mojica，<a href="http://www.appcoda.com/alamofire-beginner-guide/" target="_blank" rel="external">原文链接</a>，原文日期：2015/11/30<br>译者：<a href="http://weibo.com/linusling" target="_blank" rel="external">小铁匠Linus</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>2014 年 6 月 Apple 发布 Swift 以来，如何在 Swift 中进行网络编程一直成为程序猿们关注的焦点。甚至就连 Swift 的作者之一 Chris Lattner 也发推说过，在 Swift 中解析 JSON 还有很长的路要走。因此，许多人开始寻求替代方案。在 Swift 中虽然有处理 JSON 解析的内建类，但是对开发者来说并不是很友好。幸运的是，Alamofire 出现了。Alamofire 是一个可以帮助我们解析 JSON 的强力网络库，它由 Objective-C 中同类网络库 AFNetworking 的作者编写。</p>
<p>在这个又臭又长、近乎 3500 多词（译者注：in English；定稿注：这是作者原话，不是译者观点）的教程中，我们将探讨一系列广泛的网络基本话题，并建立一个假日待办应用。</p>
<p>同时，你会从本教程中学到：如何使用和解析 JSON、如何自定义服务器端、如何使用 <a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a> 和 <a href="https://mongolab.com/" target="_blank" rel="external">MongoLab</a> 等工具、HTTP 的工作原理（包括 GET，POST 和 DELETE 请求）、如何使用 git 和终端（terminal）以及如何使用 Cocoapods。如果你觉得上面提到的内容太多了，那就对了，拿一杯咖啡，就让我们开始吧。</p>
<a id="more"></a>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/thangiving-app-coda-20151-1024x768.png" alt=""></p>
<p>哦，AppCoda 的所有作者祝大家节日开心！😊</p>
<p>注意：本教程是一个进阶教程，涵盖了很多东西。而且，我假设你已经对 iOS 和 Swift 有了很坚实的了解。文章中诸如 tableviews， autolayout，delegate 等话题都不会深入的解释原理。你如果不熟悉这些内容，可以先去学习我们推出的<a href="http://www.appcoda.com/ios-programming-course/" target="_blank" rel="external">优秀课程</a>，然后再回来看本教程。</p>
<h2 id="开始">开始</h2><p>为了实现本教程要实现的功能，我已用 Node.js 写了一个服务器后端。这里需要给那些对它不熟悉的人解释一下，Node.js 是一个基于 Javascript、运行在 Google Chrome 的 V8 引擎中的运行时环境。长话短说，总之它是一个特别可靠、速度特别快、特别厉害的东西，哈哈。</p>
<p>为了搞定这个后端，我同时也使用了 Restify 和 MongoDB。MongoDB 是在 Web 开发人员中很流行的一个 no-SQL 数据库。我们可以使用 MongoDB 存储所有数据。</p>
<p>我刚开始使用 Node 时，完全不知道这些东西是怎么运行的，我看到的其他博客也没有解释 Node 到底是怎么工作的。因此，尽管这是个 iOS 的博客，但我还是要介绍一下 Javascript 和 Node 服务器的工作原理。</p>
<p>我搜遍了网络，都没有一个详细的教程引导你创建一个 API 与 iOS 应用程序交互的步骤，直到本文出现。</p>
<h2 id="遇见_Node-js">遇见 Node.js</h2><p>像我之前说的那样，Node.js 是一个很强大的服务器端开发技术，它建立在 Chrome 的运行时环境上。因此，它是高度异步和非阻塞的（如果你不知道我说的是什么意思，其实很简单，大概就是：使用主线程或者应用的主要部分不会被阻塞）。多线程是一种可以防止延迟且能提高项目效率的编程技术。你可以把应用想象成一条高速公路，如果只有一条通道，却有 20 辆车要通过，那么他们就很有可能会堵车。如果一条高速公路有三条包含出入口的通道，那么堵车的可能性就很小。多线程就可以这样来理解。在一个多线程的环境里，代码执行在不同的线程就可以避免应用阻塞，从而防止程序崩溃。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/1436439824nodejs-logo.png" alt=""></p>
<p>Node 是由 Joyent 开发并维持的，Joyent 是一家位于旧金山的云计算公司。</p>
<p>如果你仍然不清楚所有这些是怎么运行的，想想后端具体干了些什么吧。下面是后端完成的工作：</p>
<ol>
<li>后端提供了 API 路由（我们现在正在为当前的应用构建 API，就和网络上其他的 API 一样，其中包括了我们在之前的 <a href="http://www.appcoda.com/tvos-introduction/" target="_blank" rel="external">tvOS 教程</a>中使用的 <a href="http://forecast.io/" target="_blank" rel="external">forecast.io</a> API）。</li>
<li>MongoDB 用来保存所有数据。当你想要 POST 一条新消息时，我们需要找个地方来存储这条消息。在本教程中，我们把这些数据存储到 MongoDB 数据库中。</li>
<li>创建一个功能完整的 REST API，它遵循 REST 协议。</li>
</ol>
<p>我们的 MongoDB 放在 MongoLab 的主机上，Node 服务器放在 Heroku 上。Heroku 由 Salesforce 提供支持，可以作为 Node、Rails、Python 等应用的主机服务商。MongoLab 也是一家可以当 MongoDB 主机的服务商。</p>
<h2 id="HTTP_请求介绍">HTTP 请求介绍</h2><p>在我们开始写代码之前，你应该了解 HTTP 请求以及如何在我们的应用里使用。</p>
<ul>
<li><p>GET 请求 - GET 请求会查询我们的数据库，然后获取内容。GET 请求可以获取一个、多个或全部的内容。事实上，每次你访问 <a href="http://google.com/" target="_blank" rel="external">google.com</a> 或浏览你的 Facebook/Twitter 主页，你都会发起 GET 请求（可能你之前都不知道这个东西）！</p>
</li>
<li><p>POST 请求 - POST 请求会发送数据到服务器，然后保存这个数据。举个例子，当你在 Facebook 或 Twitter 上写好文字，然后按 Post/Tweet 按钮的时候，你就发起了 POST 请求。</p>
</li>
<li><p>UPDATE 请求 - UPDATE 请求可以让你修改已经存在的内容。当你编辑一条 Facebook 消息时，其实使用到了 UPDATE 请求。</p>
</li>
<li><p>DELETE 请求 - DELETE 请求会删除对应的内容。当你按了删除按钮删除 Facebook 或 Twitter 消息的时候，其实是调用了 DELETE 请求。</p>
</li>
</ul>
<p>以上这四个请求类型是基于 REST 协议的。Internet 能运行就是由这些请求组成的。你可能也听说过 CRUD 这个缩写词，CRUD 是由 <strong>C</strong>reate，<strong>R</strong>ead，<strong>U</strong>pdate 和 <strong>D</strong>elete 的首字母组成的。很显然，这些单词就和 POST，GET，UPDATE 和 DELETE 是一一对应的。</p>
<p>帅气！现在我们已经对 HTTP 协议有一定的理解了，我们可以进入到这次教程的核心部分了。</p>
<h2 id="配置必要的工具">配置必要的工具</h2><p>在我们使用 MongoLab 或 Heroku 之前，我们应该要确保 Node.js 能正常使用。</p>
<p>打开 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a>，按照教程下载 Node 到你的电脑上。</p>
<p>然后，到 <a href="https://docs.npmjs.com/getting-started/installing-node" target="_blank" rel="external">npm 官网</a>下载 npm。</p>
<p>为了正确配置我们的后端，需要分别在 Heroku 和 MongoLab 上注册帐号。我们先从 MongoLab 开始吧，去 <a href="https://mongolab.com/home" target="_blank" rel="external">MongoLab 官网</a>注册帐号。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Untitled-1024x640.png" alt=""></p>
<p>确保选择的是 single-node（免费），填上你数据库的名字。我这边取名为 <em>alamofire-db</em>（以 db 为后缀表示是一个数据库，这是比较普遍的命名规范）。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Untitled2-1024x640.png" alt=""></p>
<p>接下来，登录你的数据库，定位好 MongoDB 数据库的 URI。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-2.35.58-PM-1024x328.png" alt=""></p>
<p>然后添加一个新的数据库帐号，输入用户名和密码。不要忘记密码。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-2.38.15-PM-1024x478.png" alt=""></p>
<p>现在返回到你设置 URI 的页面，修改成新的地址。比如：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mongodb://<span class="variable">&lt;dbuser&gt;</span>:<span class="variable">&lt;dbpassword&gt;</span><span class="comment">@ds057954.mongolab.com:57954/alamofire-db</span></span><br></pre></td></tr></table></figure>
<p>替换成：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">mongodb:</span><span class="comment">//gregg:test@ds057954.mongolab.com:57954/alamofire-db</span></span><br></pre></td></tr></table></figure>
<p>MongoLab 搞定！</p>
<p>现在去 <a href="http://heroku.com/" target="_blank" rel="external">Heroku.com</a>，免费注册后，打开 <a href="https://toolbelt.heroku.com/" target="_blank" rel="external">heroku toolbelt 页面</a>。</p>
<p>按照教程成功安装后，打开终端并登录 heroku。如果你之前从未使用过终端，不用担心。本教程会多次使用终端，这样你最终就会对终端的使用有一个清晰的认识。</p>
<p>一旦你在终端上登录 heroku，就可以使用 cd 命令（cd 代表改变目录）进到对应目录，将之前从 dropbox 下载的工程文件夹移动进去。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-3.03.13-PM-2.png" alt=""></p>
<p>按下回车键就可以执行这行命令了。干的不错，现在我们可以用 <strong>git</strong> <strong>提交（Push）</strong>东西到 heroku 了。</p>
<p>在终端中键入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"First Commit"</span></span><br></pre></td></tr></table></figure>
<p>这三行命令，初始化了一个仓库（repository，简写为 repo），并添加了当前目录下的所有文件到这个仓库，最终提交并保存。</p>
<p>git 是一款很流行的版本控制软件。</p>
<p>现在你可以看到，终端里应该和下图的内容差不多：</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-3.09.42-PM-2.png" alt=""></p>
<p>因为你之前已经成功安装了 heroku toolbelt，所以你现在可以在终端里键入 <em>heroku login</em>，并输入帐号密码。敲回车后继续，如果帐号密码没问题的话，你的 Email 会以蓝绿色高亮显示。</p>
<p>现在，键入 <strong>heroku create</strong> 来创建一个新的 heroku 应用。Heroku 会创建一个新的带有域名的应用给你。比如，我的就是 <a href="https://whispering-plains-1537.herokuapp.com/。" target="_blank" rel="external">https://whispering-plains-1537.herokuapp.com/。</a></p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-3.50.39-PM-2.png" alt=""></p>
<p>现在，键入 <strong>git push heroku master</strong> 来把你新建的应用发送到 heroku。</p>
<p>如果一切顺利的话，会显示如下图（其中的某一些设置可能会不同）。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-5.06.08-PM-2.png" alt=""></p>
<h2 id="使用_Node-js,_Express,_MongoLab_&amp;_Mongoose">使用 Node.js, Express, MongoLab &amp; Mongoose</h2><p>让我们从下载示例工程开始，<a href="https://www.dropbox.com/sh/hvvneknq4hh7ntw/AAARljJGt3OLLjQRmIMxDsIHa?dl=0" target="_blank" rel="external">链接在这里</a>。打开你最喜欢的文本编辑器（我这边用的是 Sublime Text 2；可以在<a href="http://sublimetext.com/" target="_blank" rel="external">这里</a>下载免费版，如果你支持的话也可以购买），然后继续。</p>
<p>Javascript 在很大程度上是和 Swift 很相似的。我们之后会使用 express 和 mongoose 两个著名 node 包。请确保你已经在系统上安装 npm 和 node 包管理器。</p>
<p>Express 是 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a> 中的一个「快速、强大而又轻量级」的网络框架，它可以轻松解决路由（Route）问题。你问什么是路由？路由就是你与网络交互的方式。每次你打开 google.com 的时候，其实你访问的是根主页，即 google.com/。假如你访问 google.com/hello，那就是另外一个路由了。我们接下来将要定义一个能访问我们数据库的路由。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-5.11.44-PM-2-1024x576.png" alt=""></p>
<p>你可以从 expressjs.org 官网上学习更多关于 express 的知识。</p>
<p>下面是示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> app = express(); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 当一个 GET 请求访问主页的时候，会返回 hello world</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">// 3</span></span><br><span class="line">  res.send(<span class="string">'hello world'</span>); <span class="comment">// 4</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第一行代码设置了一个叫 express 的变量。第二行代码，把 express 初始化后赋值给一个叫 app 的变量。在第三行代码，app 这个变量代表了 express 环境，调用它的 get() 方法（形式类似 Swift）。当一个用户访问 / 根主页的时候，就会显示「hello world」。这是 express 作为路由的一个例子。如果需要更多信息，可以访问 <a href="http://expressjs.com/guide/routing.html" target="_blank" rel="external">express 官网</a>查看。</p>
<p>现在，我们已经配置好了 mongo 数据库的环境，接下来让我们来使用 cURL 请求测试一下功能。cURL 是一款命令行程序，它可以发送 HTTP 请求。我们将会先使用 cURL 做一下实验，然后再迁移到 Alamofire 去。</p>
<h2 id="JavaScript_介绍">JavaScript 介绍</h2><h3 id="模型">模型</h3><p>打开你的文本编辑器（再说一下，我用的是 Sublime），同时打开 app.js 文件。正如你看到的，应用被分割成了一个 model 和路由文件（就是你刚打开的 app.js 文件）。model 文件可以建立模式（schema）或数据库结构。让我们先来简单看看这个文件吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>),</span><br><span class="line">    Schema = mongoose.Schema;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> TodoSchema  = <span class="keyword">new</span> Schema(</span><br><span class="line">    &#123;</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">mongoose.model(<span class="string">'employees'</span>, TodoSchema);</span><br></pre></td></tr></table></figure>
<p>我们可以使用 mongoose，它是一个用在应用与 mongo 之间作为接口的 npm 包。我起初在构建一个雇工跟踪应用，并把 model 命名为 employee，但是可能会随时修改这个 model。我保留着它，是因为这个教程的接下来部分可能会用到。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-27-at-12.48.53-AM-1024x640.png" alt=""></p>
<p>Mongoose 能很方便的提供与 mongoLab 的 heroku node 应用连接并提供相应的接口。这的确非常方便。</p>
<h3 id="路由">路由</h3><p>路由文件里存的是我们将会<em>输出</em>到 app.js 文件的内容。不用太担心这个输出——它是 node 中一个比较先进的特性，也超出了本教程的范围。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-27-at-12.53.18-AM-1024x640.png" alt=""></p>
<p>注意第 26 行的 <em>newTodo</em>。正如你可能猜到的，这行代码创建了一个新的 todo。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emp = <span class="keyword">new</span> Todo(req.body);</span><br><span class="line"> </span><br><span class="line">    emp.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.send(<span class="string">'Error occurred'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(emp);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们把 Todo 对象（在第四行定义了一个与 mongoose 连接的对象）赋值给一个叫 emp 的变量，并设置 req.body（req 代表请求，它会发送给我们数据，同时，res 代表回复，它会返回我们的要返回的东西）。</p>
<p>随意浏览一下文件中剩下的方法。</p>
<h3 id="就像粘稠的胶水——App-js">就像粘稠的胶水——App.js</h3><p>现在回到 app.js 文件，这里是整个应用的主要部分。接下来列出来一些这个文件里的重点部分（译者注：对照下图看）：</p>
<ul>
<li>第 13 行代码建立 express 应用</li>
<li>第 15 - 22 行代码配置该应用</li>
<li>第 33 行代码使用 mongoose 将应用连接到 mongoLab 数据库</li>
<li>第 35 行代码建立连接</li>
<li>第 41 - 45 行代码建立应用的路由文件并连接到 /routes/todo.js 文件</li>
<li>第 48 行代码创建服务器</li>
</ul>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-27-at-12.59.54-AM-1024x640.png" alt=""></p>
<p>以上这些，能让你了解到一些 Javascript 应用的基本运作知识。但是，毕竟这篇教程不是主讲 Javascript 的，我不会继续深究。当然，我还是鼓励你们去研究一下 express 和 mongoose。</p>
<h2 id="使用_cURL">使用 cURL</h2><p>在我们的 node 应用开启状态下，我们可以执行一些 cURL 请求来做测试。一旦我们做完测试，就可以迁移到 Alamofire 上去了。</p>
<h3 id="GET_请求">GET 请求</h3><p>在终端里执行下面的代码（记得将 url 修改成你自己对应的 heroku url）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i -H <span class="string">"Accept: application/json"</span> <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span></span><br></pre></td></tr></table></figure>
<p>命令行中的 -i 和 -H 参数表示我们将要接收什么东西。我们会接收 JSON 并将 JSON url 追加到请求的末尾。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-6.00.45-PM-2.png" alt=""></p>
<p>你应该能看到有数据返回了。和下图差不多。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-6.00.49-PM-2.png" alt=""></p>
<p>正如你看到的，返回的数据就是我们想要得到的。如果你已经将 url 替换成你自己的，你可能什么也看不到，因为你的 mongodb 里现在还没数据。</p>
<h3 id="POST_请求">POST 请求</h3><p>加入你想要加一些数据到数据库里，你需要的就是下面的 POST 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type: application/json"</span> -X POST <span class="operator">-d</span> <span class="string">'&#123;"name":"Buy Presents"&#125;'</span> https://rocky-meadow-<span class="number">1164</span>.herokuapp.com/todo</span><br></pre></td></tr></table></figure>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-6.05.01-PM-2.png" alt=""></p>
<p>然后，你使用之前讲过的 GET 请求，就可以看到你刚才添加的「Buy Presents」的内容了。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/s.png" alt=""></p>
<h3 id="DELETE_请求">DELETE 请求</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X DELETE <span class="string">'https://rocky-meadow-1164.herokuapp.com/todo/5657901fee93910900cc54ed'</span></span><br></pre></td></tr></table></figure>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-8.21.40-PM-2.png" alt=""></p>
<p>很棒！这里我们不会讲 PUT 请求，因为在这个应用里暂时还用不上。但是它和其他的请求使用起来差不多。</p>
<h2 id="使用_Alamofire_设置_iOS_应用">使用 Alamofire 设置 iOS 应用</h2><p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/alamofire.png" alt=""></p>
<p>让我们从新建一个名叫 TodoApp 的 Xcode 工程开始吧。因为假期就要到来，我们应该有一种方式来跟踪这件事情。幸运的是，我们有 node 应用来帮忙。</p>
<p>你可以手动安装 Alamofire（通过拖拽源文件到对应工程的方法），但是我们选择使用 Cocoapods。Cocoapods 是一款为 iOS 工程提供依赖管理的工具。在使用 Cocoapods 的时候，开发者可以轻松的添加框架或第三方类库。如果你之前没有使用 Cocoapods，强烈推荐你去使用。</p>
<p>接下来，在终端里运行以下命令可以确保你在接下来的步骤后成功安装 Cocoapods。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>然后，通过 cd 命令进入你工程所在的目录，键入以下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim Podfile</span><br></pre></td></tr></table></figure>
<p>Vim 是一款系统自带的命令行编辑器，与 Sublime Text 或 TextMate 类似。我们现在要新建一个 Podfile 的文件，Cocoapods 每次都会去这个文件里查询是否需要更新工程的 pod（包括各种的依赖）。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-8.32.03-PM-2.png" alt=""></p>
<p>在 Podfile 这个文件里键入如下内容：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line"> </span><br><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line"> </span><br><span class="line">use_frameworks!</span><br><span class="line"> </span><br><span class="line">pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 3.0'</span></span><br></pre></td></tr></table></figure>
<p>然后，按 ESC 键，并输入 <code>:wq</code>，再敲回车。其中，wq 表示保存并退出。</p>
<p>我们现在已经成功创建 Podfile 并且保存了，为了安装 CocoaPods，在终端里输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>
<p>敲了回车后，如果一切都设置好的话，大概会呈现下图显示的内容。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-8.38.01-PM-2.png" alt=""></p>
<p>这时候，你可以看到命令行里要求你关闭当前打开的 Xcode 并且以后都用 .xcworkspace 为后缀的文件来打开工程。</p>
<p>下面这个命令能够非常方便地打开当前目录的 finder 界面。到此为止我们在 Terminal 中的操作就那么多，看上去一天之内有那么多就够了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure>
<p>打开 ViewController.swift，让我们继续吧。</p>
<h3 id="Alamofire_GET_请求">Alamofire GET 请求</h3><p>在打开的 ViewController.swift 里，输入以下代码来导入 Alamofire：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Alamofire</span><br></pre></td></tr></table></figure>
<p>在 viewDidLoad() 方法里键入以下代码来使用 Alamofire。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span>) .responseJSON &#123; response <span class="keyword">in</span> <span class="comment">// 1</span></span><br><span class="line">      <span class="built_in">print</span>(response.request)  <span class="comment">// original URL request</span></span><br><span class="line">      <span class="built_in">print</span>(response.response) <span class="comment">// URL response</span></span><br><span class="line">      <span class="built_in">print</span>(response.data)     <span class="comment">// server data</span></span><br><span class="line">      <span class="built_in">print</span>(response.result)   <span class="comment">// result of response serialization</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">JSON</span> = response.result.value &#123;</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">"JSON: <span class="subst">\(JSON)</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第一行代码中，我们声明了一个 GET 请求，并且传入了一个我们需要的 URL。运行当前的应用，看看返回的是什么。如果一切都设置正确的话，你会看到返回的是 JSON 数据。</p>
<p>现在，打开 Main.storyboard，添加一个 tableview 到 view controller，并将视图控制器嵌入到 navigation controller。你的 storyboard 现在看起来应该跟我的一样，如下图（值得注意的是，现在返回的 JSON 数据还只是显示在控制台上，我们要将其显示出来。）。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-9.38.31-PM-2-1024x576.png" alt=""></p>
<p>将以下代码复制并粘帖到你的 ViewController.swift 文件里。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Alamofire</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="preprocessor">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span>!</span><br><span class="line">    <span class="keyword">var</span> jsonArray:<span class="type">NSMutableArray</span>?</span><br><span class="line">    <span class="keyword">var</span> newArray: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span>) .responseJSON &#123; response <span class="keyword">in</span></span><br><span class="line">                <span class="built_in">print</span>(response.request)  <span class="comment">// original URL request</span></span><br><span class="line">                <span class="built_in">print</span>(response.response) <span class="comment">// URL response</span></span><br><span class="line">                <span class="built_in">print</span>(response.data)     <span class="comment">// server data</span></span><br><span class="line">                <span class="built_in">print</span>(response.result)   <span class="comment">// result of response serialization</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">JSON</span> = response.result.value &#123;</span><br><span class="line">                    <span class="keyword">self</span>.jsonArray = <span class="type">JSON</span> <span class="keyword">as</span>? <span class="type">NSMutableArray</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>.jsonArray! &#123;</span><br><span class="line">                        <span class="built_in">print</span>(item[<span class="string">"name"</span>]!)</span><br><span class="line">                        <span class="keyword">let</span> string = item[<span class="string">"name"</span>]!</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">"String is <span class="subst">\(string!)</span>"</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">self</span>.newArray.append(string! <span class="keyword">as</span>! <span class="type">String</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"New array is <span class="subst">\(<span class="keyword">self</span>.newArray)</span>"</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我初始化了两个数组 jsonArray 和 newArray，用 for 循环遍历了返回数据的那个 jsonArray，将其中的每个数据保存到 newArray 中。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-10.08.34-PM-2.png" alt=""></p>
<p>我使用 POST cURL 请求在数据库里多添加了一些数据。用法类似，不再赘述。</p>
<p>你可以试试下面代码演示的 GET 请求的极致精简写法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span>).responseJSON &#123; response <span class="keyword">in</span> <span class="built_in">debugPrint</span>(response) &#125;</span><br></pre></td></tr></table></figure>
<p>接下来，在文件顶部的 UIViewController 定义后面添加 UITableViewDelegate 和 UITableViewDataSource，并在 viewDidLoad() 方法里键入如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.dataSource = <span class="keyword">self</span></span><br><span class="line"><span class="keyword">self</span>.tableView.delegate = <span class="keyword">self</span></span><br></pre></td></tr></table></figure>
<p>最后，添加 UITableView 的 delegate 方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.newArray.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"Cell"</span>, forIndexPath: indexPath) <span class="keyword">as</span> <span class="type">UITableViewCell</span></span><br><span class="line"></span><br><span class="line">    cell.textLabel?.text = <span class="keyword">self</span>.newArray[indexPath.row]</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-10.16.39-PM-2-1024x576.png" alt=""></p>
<p>正如你看到的，我们的 tableview 已经成功显示数据了。</p>
<p>现在我们来添加一个按钮，用来添加数据到列表中。首先，先在 storyboard 里添加一个叫 AddViewController 的类，并用 segue 的方式连接起来。你的 storyboard 应该和下图差不多。</p>
<p><img src="http://www.appcoda.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-26-at-11.34.59-PM-2-1024x576.png" alt=""></p>
<h3 id="Alamofire_POST_请求">Alamofire POST 请求</h3><p>在你的 AddViewController.swift 文件里，为 textfield 建立一个 IBOutlet（命名为 textView），为 Save 按钮建立一个 IBAction。在 Save 按钮代码中键入如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">POST</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span>, parameters: [<span class="string">"name"</span>: <span class="keyword">self</span>.textView.text!])</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationController!.popViewControllerAnimated(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>如你所见，Alamofire 大大简化了发送 POST 请求的过程。</p>
<p>接下来，我们来对 ViewController.swift 文件进行重构，确保我们在保存数据后能及时更新列表。删除 viewDidLoad() 方法里 GET Alamofire 的代码，用以下的 downloadAndUpdate 方法代替。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">downloadAndUpdate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span>) .responseJSON &#123; response <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(response.request)  <span class="comment">// original URL request</span></span><br><span class="line">            <span class="built_in">print</span>(response.response) <span class="comment">// URL response</span></span><br><span class="line">            <span class="built_in">print</span>(response.data)     <span class="comment">// server data</span></span><br><span class="line">            <span class="built_in">print</span>(response.result)   <span class="comment">// result of response serialization</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">JSON</span> = response.result.value &#123;</span><br><span class="line">                <span class="keyword">self</span>.jsonArray = <span class="type">JSON</span> <span class="keyword">as</span>? <span class="type">NSMutableArray</span></span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>.jsonArray! &#123;</span><br><span class="line">                    <span class="built_in">print</span>(item[<span class="string">"name"</span>]!)</span><br><span class="line">                    <span class="keyword">let</span> string = item[<span class="string">"name"</span>]!</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"String is <span class="subst">\(string!)</span>"</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">self</span>.newArray.append(string! <span class="keyword">as</span>! <span class="type">String</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"New array is <span class="subst">\(<span class="keyword">self</span>.newArray)</span>"</span>)</span><br><span class="line">                <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>现在，在 viewWillAppear() 方法里调用这个方法，如下。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</span><br><span class="line">   <span class="keyword">self</span>.downloadAndUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你再次编译并运行这个应用，就会发现每次添加新的 todo 后都会重新加载。这是为什么呢？</p>
<p>这就关系到 view controller 的生命周期，这里我简单介绍一下。viewDidLoad() 会在 view 初始化后并且所有控件都结束加载后被调用。问题出现了，当你从已经加载的 ViewController 上加载另外一个 view（比如 AppViewController）时，viewDidLoad 方法不会被调用（之前已经初始化过）。viewWillAppear 方法会在每次 view 在屏幕上显示时调用。因为我们需要在再次显示 ViewController.swift 时候显示，所以这个方法刚好可用。</p>
<h3 id="Alamofire_DELETE_请求">Alamofire DELETE 请求</h3><p>现在在刚才的 newArray 下面添加一个 IDArray。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">IDArray</span>: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = []</span><br></pre></td></tr></table></figure>
<p>接下来，更新 downloadAndUpdate 方法的相应部分，代码如下。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.newArray.removeAll() <span class="comment">// NEW</span></span><br><span class="line"><span class="keyword">self</span>.<span class="type">IDArray</span>.removeAll() <span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line"><span class="type">Alamofire</span>.request(.<span class="type">GET</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo"</span>) .responseJSON &#123; response <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(response.request)  <span class="comment">// original URL request</span></span><br><span class="line">            <span class="built_in">print</span>(response.response) <span class="comment">// URL response</span></span><br><span class="line">            <span class="built_in">print</span>(response.data)     <span class="comment">// server data</span></span><br><span class="line">            <span class="built_in">print</span>(response.result)   <span class="comment">// result of response serialization</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="type">JSON</span> = response.result.value &#123;</span><br><span class="line">                <span class="keyword">self</span>.jsonArray = <span class="type">JSON</span> <span class="keyword">as</span>? <span class="type">NSMutableArray</span></span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> <span class="keyword">self</span>.jsonArray! &#123;</span><br><span class="line">                    <span class="built_in">print</span>(item[<span class="string">"name"</span>]!)</span><br><span class="line">                    <span class="keyword">let</span> string = item[<span class="string">"name"</span>]!</span><br><span class="line">                    <span class="keyword">let</span> <span class="type">ID</span> = item[<span class="string">"_id"</span>]! <span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">self</span>.newArray.append(string! <span class="keyword">as</span>! <span class="type">String</span>)</span><br><span class="line">                    <span class="keyword">self</span>.<span class="type">IDArray</span>.append(<span class="type">ID</span>! <span class="keyword">as</span>! <span class="type">String</span>) <span class="comment">// NEW</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"New array is <span class="subst">\(<span class="keyword">self</span>.newArray)</span>"</span>)</span><br><span class="line">                <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>两行带有 NEW 注释的代码是新添加的。从代码的本质上来说，我们在循环中获得对应的 ID 并保存到数组 IDArray 中。同样，我们也需要将不需要的数据从列表中删除并重置。</p>
<p>添加 commitEditingStyle 方法，以调用 DELETE 请求来删除对应的不需要数据。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> editingStyle == .<span class="type">Delete</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"ID is <span class="subst">\(<span class="keyword">self</span>.IDArray[indexPath.row])</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Alamofire</span>.request(.<span class="type">DELETE</span>, <span class="string">"https://rocky-meadow-1164.herokuapp.com/todo/<span class="subst">\(<span class="keyword">self</span>.IDArray[indexPath.row])</span>"</span>)</span><br><span class="line">            <span class="keyword">self</span>.downloadAndUpdate()</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle == .<span class="type">Insert</span> &#123;</span><br><span class="line">            <span class="comment">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>正如你看到的，以上代码遵循了我们应用的 API，即通过传入 /todo/ID 来调用 DELETE 请求删除对应的数据。</p>
<p>同时，我们用比较简单的 Alamofire 方法来调用 DELETE 请求并删除了对应的数据。</p>
<p>至此，你现在已经拥有了一个功能完备的 todo 应用了。因此，让我们来总结一下本次教程吧。</p>
<h2 id="小结">小结</h2><p>本教程探索了很多东西。从 Javascript 的 node 到 express，从 MongoDB 到 cURL，从终端到 Cocoapods，以及最后的 Alamofire，我们深入了解了 REST API 的创建过程和网络的工作流程。你通过本次教程应该已经坚实的掌握了以下内容：</p>
<ul>
<li>构建 API</li>
<li>部署 API</li>
<li>写客户端应用</li>
<li>使用 HTTP 请求</li>
<li>使用 Cocoapods</li>
<li>使用 cURL</li>
<li>使用 node 和 MongoDB/Express</li>
<li>使用 Express 做路由</li>
<li>使用 Alamofire</li>
</ul>
<p>这真是一个大教程，我感谢你坚持和我走到这里。所有的源代码可以在<a href="https://www.dropbox.com/sh/axho3cgfvinz9lc/AADXjhAPwATsbZBA-z9mVLn4a?dl=0" target="_blank" rel="external">这里</a>下载，其中包含了 node 应用和 iOS 应用。</p>
<p>有任何问题和想法都可以在教程下面留言评论。下次见！</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：gregg mojica，<a href="http://www.appcoda.com/alamofire-beginner-guide/">原文链接</a>，原文日期：2015/11/30<br>译者：<a href="http://weibo.com/linusling">小铁匠Linus</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>2014 年 6 月 Apple 发布 Swift 以来，如何在 Swift 中进行网络编程一直成为程序猿们关注的焦点。甚至就连 Swift 的作者之一 Chris Lattner 也发推说过，在 Swift 中解析 JSON 还有很长的路要走。因此，许多人开始寻求替代方案。在 Swift 中虽然有处理 JSON 解析的内建类，但是对开发者来说并不是很友好。幸运的是，Alamofire 出现了。Alamofire 是一个可以帮助我们解析 JSON 的强力网络库，它由 Objective-C 中同类网络库 AFNetworking 的作者编写。</p>
<p>在这个又臭又长、近乎 3500 多词（译者注：in English；定稿注：这是作者原话，不是译者观点）的教程中，我们将探讨一系列广泛的网络基本话题，并建立一个假日待办应用。</p>
<p>同时，你会从本教程中学到：如何使用和解析 JSON、如何自定义服务器端、如何使用 <a href="https://www.heroku.com/">Heroku</a> 和 <a href="https://mongolab.com/">MongoLab</a> 等工具、HTTP 的工作原理（包括 GET，POST 和 DELETE 请求）、如何使用 git 和终端（terminal）以及如何使用 Cocoapods。如果你觉得上面提到的内容太多了，那就对了，拿一杯咖啡，就让我们开始吧。</p>]]>
    
    </summary>
    
      <category term="AppCoda" scheme="http://swiftggteam.github.io/tags/AppCoda/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 3.0 和 Foundation]]></title>
    <link href="http://swiftggteam.github.io/2015/12/21/swift-3-0-and-foundation/"/>
    <id>http://swiftggteam.github.io/2015/12/21/swift-3-0-and-foundation/</id>
    <published>2015-12-20T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/03/swift-3-0-and-foundation/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-03<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles" target="_blank" rel="external">pmst</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>我将尽量避免那些看上去很尴尬的笑话，直接介绍 <a href="https://github.com/apple/swift-corelibs-foundation" target="_blank" rel="external">Swift CoreLibs Foundation</a>。</p>
<p>以下引自 Apple：</p>
<blockquote>
<p>本项目提供了各个平台下 Foundation API 的具体实现，但并未使用 Objective-C runtime 机制。在 OS X、iOS 以及其他 Apple 平台下，应用程序都应该使用指定操作系统下的 Foundation 进行开发。我们希望尽可能地抽象出具体的底层平台…<br>我们最主要的目标是在 Apple 平台下使用 Foundation implementation parity。这将有助于整个 Swift 3 完成<strong>可移植性</strong>的目标。</p>
</blockquote>
<a id="more"></a>
<p>正如在上篇更新的文章所述，Foundation 将使用新的 API 指导方针、摒弃 NS 前缀、精简文本并避免整体过度冗余。</p>
<p>具体实现文章在<a href="https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Status.md" target="_blank" rel="external">这里</a>。显然<em>有很多</em>要做的事。苹果的主要目标是使用一套标准工具类来实现跨平台开发，能够在各个平台之间保持相对高的独立性和可移植性。</p>
<p>开发者们更关注核心语言功能（比如 Swift 中的数组和字典）在标准库、功能（比如正则表达式中）以及 Foundation 基础库中有哪些不同。NSArray/NSDictionary/NSSet/NSString 的更新版本将成为 Foundation 的一部分，与标准库中对应的类稍有不同。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/03/swift-3-0-and-foundation/">原文链接</a>，原文日期：2015-12-03<br>译者：<a href="http://www.jianshu.com/users/596f2ba91ce9/latest_articles">pmst</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<!--此处开始正文-->
<p>我将尽量避免那些看上去很尴尬的笑话，直接介绍 <a href="https://github.com/apple/swift-corelibs-foundation">Swift CoreLibs Foundation</a>。</p>
<p>以下引自 Apple：</p>
<blockquote>
<p>本项目提供了各个平台下 Foundation API 的具体实现，但并未使用 Objective-C runtime 机制。在 OS X、iOS 以及其他 Apple 平台下，应用程序都应该使用指定操作系统下的 Foundation 进行开发。我们希望尽可能地抽象出具体的底层平台…<br>我们最主要的目标是在 Apple 平台下使用 Foundation implementation parity。这将有助于整个 Swift 3 完成<strong>可移植性</strong>的目标。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift 的变化：从 2.2 到 3.0 会带来什么]]></title>
    <link href="http://swiftggteam.github.io/2015/12/18/changing-swift-whats-coming-up-in-2-2-and-3-0/"/>
    <id>http://swiftggteam.github.io/2015/12/18/changing-swift-whats-coming-up-in-2-2-and-3-0/</id>
    <published>2015-12-17T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/03/changing-swift-whats-coming-up-in-2-2-and-3-0/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-03<br>译者：<a href="undefined">Channe</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>如果你还没看过 <a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">Swift 发展路线图</a>，我建议你要好好看一看。目前为止，有四个针对 <code>Swift 3</code> 和一个针对 <code>Swift 2.2</code> 的提议已经被接受，也许其中的某些能让你会心一笑。</p>
<p>显然，这些提议中最令人振奋的是 API 翻译的改进，旨在<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md" target="_blank" rel="external">废除冗长的 <code>Objective-C</code> 式的风格</a>，形成调用简洁且易读的 <code>Swift</code> 风格。</p>
<a id="more"></a>
<p>看上去显而易见我们将要和<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md" target="_blank" rel="external">函数柯里化声明</a>说再见了，虽然这是没有语法糖语言共有的特性。这是我能忍受的东西，但是这点改变并不会让我开心起来 — 除此之外似乎有迫切的原因去降低语言的复杂度。</p>
<p><code>++</code> 和 <code>--</code>（<strong>这是两个减号，不是破折号</strong>）运算符也在<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="external">移除的部分</a>中。它们最初是为了和 C 语言一致而引入的，但它们的结果值通常不会被检查。对大部分开发者来说，很容易可以用 <code>+=</code> 和 <code>-=</code> 替代它们。</p>
<p>最后，<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md" target="_blank" rel="external">var 形式的函数参数</a>将会被移除，因为它们现在的实现是从复制和修改步骤中抽象出来，而这造成了困惑。我觉得这不是一个大损失，只是需要你声明一个函数内 var 变量赋值来替代它。</p>
<p>十分有趣是，除了 <code>++</code> 和 <code>--</code> 的改变，几乎所有的变更点我都在<a href="http://ericasadun.com/2015/11/19/swift-developers-cookbook-status-update-mark-december-17-on-your-calendars/" target="_blank" rel="external">新书</a>中提到了。</p>
<p>已经被接受的 <code>Swift 2.2</code> 提案允许你<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0001-keywords-as-argument-labels.md" target="_blank" rel="external">用关键字作为参数标签</a>，这使得现在可以这样声明：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">touchesMatching</span><span class="params">(phase: NSTouchPhase, <span class="keyword">in</span> view: NSView?)</span></span> -&gt; <span class="type">Set</span>&lt;<span class="type">NSTouch</span>&gt;</span><br></pre></td></tr></table></figure>
<p><code>Swift 3.0</code> 承诺会保持 <code>ABI（Application Binary Interface）</code>的稳定性：「成功保持 ABI 稳定性意味着，即便源代码语言发生了变化，用以后版本的 Swift 开发的应用程序和编译库能在二进制层次上和 Swift 3.0 版本的应用程序和编译库相互调用。」</p>
<p>开发团队利用这个机会做个类型系统清理，包括所有语言的小改良，同时「完整完成」基类系统。代码迁移者将把项目从 2.x 版迁到 3.x 版。基础代码或多或少能保证与这次大更新没关系。</p>
<p>最终的 API 设计指导原则发布在<a href="https://swift.org/documentation/api-design-guidelines.html" target="_blank" rel="external">这个网址</a>。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/12/03/changing-swift-whats-coming-up-in-2-2-and-3-0/">原文链接</a>，原文日期：2015-12-03<br>译者：<a href="undefined">Channe</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>如果你还没看过 <a href="https://github.com/apple/swift-evolution">Swift 发展路线图</a>，我建议你要好好看一看。目前为止，有四个针对 <code>Swift 3</code> 和一个针对 <code>Swift 2.2</code> 的提议已经被接受，也许其中的某些能让你会心一笑。</p>
<p>显然，这些提议中最令人振奋的是 API 翻译的改进，旨在<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md">废除冗长的 <code>Objective-C</code> 式的风格</a>，形成调用简洁且易读的 <code>Swift</code> 风格。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 iOS8 和 iOS9 中锁定视图自动旋转]]></title>
    <link href="http://swiftggteam.github.io/2015/12/17/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/"/>
    <id>http://swiftggteam.github.io/2015/12/17/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/</id>
    <published>2015-12-16T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Weston Hanners，<a href="http://www.alloc-init.com/2015/11/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-18<br>译者：<a href="undefined">littledogboy</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>这周我在开发一个 App，客户想要此 App 在某些情况下锁定竖屏，某些情况下锁定横屏。幸运的是，我已经在自动布局下创建了所有的视图，因此它们已经支持所需的约束，我仅需要锁定视图旋转。<br><a id="more"></a></p>
<p>旋转 API 属于 UIKit 中经常被弃用的内容，因此当我开始旋转工作时，不得不查一下。我还想说，弃用和替换相关的 API 太麻烦了。经过一个小时左右的研究和两个小时的实践，我终于整出了两部分。（译者注：=W=，我当时也搞了好久）</p>
<ul>
<li>选中 <code>Info.plist</code> 文件中所有你想要支持的旋转方向。</li>
</ul>
<p><img src="/img/articles/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/InterfaceOrientation.png1450312516.562497" alt=""></p>
<ul>
<li>然后我们仅需要实现一个方法。</li>
</ul>
<p>Swift 1.2</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Int</span>(<span class="type">UIInterfaceOrientationMask</span>.<span class="type">Portrait</span>.rawValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swift 2.0</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">UIInterfaceOrientationMask</span>.<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确保选中你想要锁定的方向是横屏还是竖屏。</p>
<p>这可能是我最近看到过的最乱的接口改动，并且我花了好长时间才意识到我在 Swift 1.2 中犯下的错误。（那个 Int cast 太丑了）</p>
<p><a href="http://www.alloc-init.com/wp-content/uploads/2015/11/RotationTest.zip" target="_blank" rel="external">Sample Code</a> (Swift 1.2 Project)</p>
<p><strong>Update 11/18/2015:</strong></p>
<p>我刚刚意识到,我标题有点词不达意。</p>
<p><strong>“使用一个小技巧锁定视图控制器”</strong></p>
<p>好吧，下不为例。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Weston Hanners，<a href="http://www.alloc-init.com/2015/11/per-view-auto-rotation-locking-made-easy-for-ios-8-and-9/">原文链接</a>，原文日期：2015-11-18<br>译者：<a href="undefined">littledogboy</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>这周我在开发一个 App，客户想要此 App 在某些情况下锁定竖屏，某些情况下锁定横屏。幸运的是，我已经在自动布局下创建了所有的视图，因此它们已经支持所需的约束，我仅需要锁定视图旋转。<br>]]>
    
    </summary>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/tags/Swift-%E5%85%A5%E9%97%A8/"/>
    
      <category term="alloc-init" scheme="http://swiftggteam.github.io/categories/alloc-init/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[原创] 每周 Swift 社区问答 2015-12-16]]></title>
    <link href="http://swiftggteam.github.io/2015/12/16/swift-qa-2015-12-16/"/>
    <id>http://swiftggteam.github.io/2015/12/16/swift-qa-2015-12-16/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2015-12-23T09:10:13.904Z</updated>
    <content type="html"><![CDATA[<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Unwrapping NSNumber works fine in iOS Simulator but unexpectedly found nil on iPhone</a></li>
<li><a href="#Q2">Why my code is working in playground but not in my project?</a></li>
<li><a href="#Q3">Failable initialisers and unbound instance vars</a></li>
<li><a href="#Q4">Read-only property</a></li>
<li><a href="#Q5">Why? insert a new element into array and it always crash!</a></li>
<li><a href="#Q6">binary operator ‘??’ cannot be applied to functions?</a></li>
<li><a href="#Q7">Filter array on type</a> </li>
<li><a href="#Q8">Numbers in swift</a></li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151216/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151216.playground" target="_blank" rel="external">点击下载</a></p>
<a id="more"></a>
<p><a name="Q1"></a></p>
<h2 id="Q1:_Unwrapping_NSNumber_works_fine_in_iOS_Simulator_but_unexpectedly_found_nil_on_iPhone">Q1: Unwrapping NSNumber works fine in iOS Simulator but unexpectedly found nil on iPhone</h2><p><a href="https://forums.developer.apple.com/thread/27726" target="_blank" rel="external">Q1链接地址</a></p>
<h3 id="问题描述">问题描述</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = <span class="type">Array</span>&lt;<span class="type">String</span>&gt;()  </span><br><span class="line">stack.append(<span class="string">"2.3"</span>)  </span><br><span class="line"><span class="keyword">let</span> lastElement = stack.popLast()!  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Popped last element: <span class="subst">\(lastElement)</span>"</span>)  </span><br><span class="line"><span class="keyword">let</span> number = <span class="type">NSNumberFormatter</span>().numberFromString(lastElement)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"NSNumber gives us: <span class="subst">\(lastElement)</span>"</span>)  </span><br><span class="line"><span class="keyword">let</span> doubleValue = number!.doubleValue  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Double value of this element is: <span class="subst">\(doubleValue)</span>"</span>)</span><br></pre></td></tr></table></figure>
<p>上述代码在Playground 以及iOS 模拟器中执行结果如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Popped</span> last element: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">NSNumber</span> gives us: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">Double</span> value of this element <span class="keyword">is</span>: <span class="number">2.3</span></span><br></pre></td></tr></table></figure>
<p>但是在真机里是这样的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Popped</span> last element: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">NSNumber</span> gives us: <span class="number">2.3</span>  </span><br><span class="line">fatal error: unexpectedly found <span class="literal">nil</span> <span class="keyword">while</span> unwrapping an <span class="type">Optional</span> value  </span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure>
<p>所以提问者修改了一行代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> doubleValue = number?.doubleValue</span><br></pre></td></tr></table></figure>
<p>再次执行：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Popped</span> last element: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">NSNumber</span> gives us: <span class="number">2.3</span>  </span><br><span class="line"><span class="type">Double</span> value of this element <span class="keyword">is</span>: <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>发现解包失败，值为 nil，那么问题出在那里呢？</p>
<h3 id="解答">解答</h3><p>由<a href="https://forums.developer.apple.com/people/junkpile" target="_blank" rel="external">junkpile</a>解答：</p>
<p>你的手机所处国家可能对小数分隔符的定义是一个逗号‘,’，而不是句号‘.’ 看到这个回答我也是醉了，最后提问者现身说法，确实他设置的德国是使用逗号作为小数分隔符的，所以解包失败。</p>
<p>junkpile 还给出了一个小建议：</p>
<p>在需要对数字字符串进行格式化的地方，比如输入数字的用户控件，你就需要显式的指定数字格式的本地化属性。反之在接收用户输入的数字时，你应该判断本地化属性，让一切尽在掌握中。</p>
<p><a name="Q2"></a></p>
<h2 id="Q2:Why_my_code_is_working_in_playground_but_not_in_my_project?">Q2:Why my code is working in playground but not in my project?</h2><p><a href="https://forums.developer.apple.com/thread/27764" target="_blank" rel="external">Q2链接地址</a></p>
<h3 id="问题描述-1">问题描述</h3><p>使用 NSDateFormater 解析一个字符串日期，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit  </span><br><span class="line"><span class="keyword">let</span> lTs = <span class="type">String</span>(<span class="string">"Mon, 07 Dec 2015 3:58 pm EST"</span>)  </span><br><span class="line"><span class="keyword">let</span> dateFormatter = <span class="type">NSDateFormatter</span>()  </span><br><span class="line">dateFormatter.dateFormat = <span class="string">"EEE, dd MMM yyyy h:mm a zzz"</span>  </span><br><span class="line"><span class="keyword">let</span> lDate = dateFormatter.dateFromString(lTs)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(lDate!)</span>"</span>)</span><br><span class="line"><span class="comment">// 输出The result is "2015-12-07 20:58:00 +0000\n"</span></span><br></pre></td></tr></table></figure>
<p>不过当提问者复制这段代码到项目中时（原来在playground）,居然crash掉了，问题出在对<code>lDate!</code>解包过程。</p>
<h3 id="问题解答">问题解答</h3><p>由苹果员工<a href="https://forums.developer.apple.com/people/eskimo" target="_blank" rel="external">eskimo</a>解答：</p>
<p>如果是对固定格式的字符串日期解析，你需要确定用户所在地域的local。</p>
<p>增加一行代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">dateFormatter.locale = <span class="type">NSLocale</span>(localeIdentifier: <span class="string">"en_US_POSIX"</span>)</span><br></pre></td></tr></table></figure>
<p>最近 swift.gg 也有一篇文章详解了 NSDate 的正确使用姿势，包含了日期格式的一些知识点，有兴趣的同学可以看看：<a href="http://swift.gg/2015/12/14/a-beginners-guide-to-nsdate-in-swift/" target="_blank" rel="external">Swift 的 NSDate 初学者指南</a></p>
<p><a name="Q3"></a></p>
<h2 id="Q3:Failable_initialisers_and_unbound_instance_vars">Q3:Failable initialisers and unbound instance vars</h2><p><a href="https://forums.developer.apple.com/thread/27743" target="_blank" rel="external">Q3链接地址</a></p>
<h3 id="问题描述-2">问题描述</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">let</span> a :<span class="type">Int</span>  </span><br><span class="line">    <span class="keyword">let</span> b : <span class="type">Int</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(name: <span class="type">String</span>, m: <span class="type">Int</span>, n: <span class="type">Int</span>)&#123;  </span><br><span class="line">        <span class="keyword">if</span> name != <span class="string">"fistro"</span> &#123;  </span><br><span class="line">            a = m  </span><br><span class="line">            b = n  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译器报错在 else{} 内并未对 a,b 进行变量初始化，但是其实提问者是想说，既然是一个可失败的构造器，为什么一定要对 a,b进行赋值才能返回 nil 呢？</p>
<h3 id="问题解答-1">问题解答</h3><p><a href="https://forums.developer.apple.com/people/Jessy" target="_blank" rel="external">Jessy</a>提供了这么一个方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> a :<span class="type">Int</span></span><br><span class="line">	<span class="keyword">let</span> b : <span class="type">Int</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">init</span>?(name: <span class="type">String</span>, m: <span class="type">Int</span>, n: <span class="type">Int</span>)&#123;</span><br><span class="line">		a = m</span><br><span class="line">		b = n</span><br><span class="line">		<span class="keyword">guard</span> name == <span class="string">"fistro"</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后<a href="https://forums.developer.apple.com/people/ChrisLattner" target="_blank" rel="external">ChrisLattner</a>大神(swift之父)站出来了，明确说了：</p>
<p>这是 Swift 2.1 版本的限制，在即将发布的 Swift 2.2 中已经修复啦。</p>
<p>这里给个stackoverflow类似的问题链接：<a href="http://stackoverflow.com/questions/26495586/best-practice-to-implement-a-failable-initializer-in-swift" target="_blank" rel="external">http://stackoverflow.com/questions/26495586/best-practice-to-implement-a-failable-initializer-in-swift</a></p>
<p><a name="Q4"></a></p>
<h2 id="Q4:Read-only_property">Q4:Read-only property</h2><h3 id="问题链接">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/27892" target="_blank" rel="external">Q4链接地址</a></p>
<h3 id="问题描述-3">问题描述</h3><p>日常项目开发中，我们会遇到一些 Access Control 的问题。譬如，我想要在类中实现一个属性对外是readonly(可读)，对内是write and read(可读写)。那么如何实现是最好的呢？下面提供一个简单的思路。</p>
<h3 id="代码实现">代码实现</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="comment">// 对内可修改属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> gip: <span class="type">Bool</span> = <span class="literal">false</span>  </span><br><span class="line"><span class="comment">// 这是一个对外的可读属性</span></span><br><span class="line"><span class="keyword">var</span> gameInProgress: <span class="type">Bool</span> &#123;  </span><br><span class="line">     <span class="keyword">return</span> gip  </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过这并不是一个最佳的选择，希望有知道的小伙伴可以私信咱们。</p>
<p><a name="Q5"></a></p>
<h2 id="Q5:_Why?_insert_a_new_element_into_array_and_it_always_crash!">Q5: Why? insert a new element into array and it always crash!</h2><h3 id="问题链接-1">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/27803" target="_blank" rel="external">Q5链接地址</a></p>
<h3 id="问题描述-4">问题描述</h3><p>以下代码会在第三行崩溃：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldNums: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span> , <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> newArray = oldNums[<span class="number">1</span>..&lt;<span class="number">4</span>]</span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">0</span>) <span class="comment">// &lt;-- crash here</span></span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">1</span>) <span class="comment">// &lt;-- work very well</span></span><br></pre></td></tr></table></figure>
<h3 id="问题解答-2">问题解答</h3><p>先看下 newArray 的类型以及其他一些属性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>) <span class="comment">//-&gt;ArraySlice&lt;Int&gt;  </span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>) <span class="comment">//-&gt;1..&lt;4</span></span><br></pre></td></tr></table></figure>
<p>显然 newArray 并不是一个数组，而是一个SliceArray，它的 StartIndex 是从 1 开始的，也就是通过 [1..&lt;4] 截取的下标开始的，所以插入下标为 0 的位置，就会报错。</p>
<p>修改如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">newArray.insert(<span class="number">99</span>, atIndex: newArray.startIndex)</span><br></pre></td></tr></table></figure>
<p>当然如果你还是偏执地想要从0开始 那么不妨重新搞一个数组喽，要知道 Array 有个sliceArray 的构造方法。所以改动如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldNums: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span> , <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">var</span> sliceArray = oldNums[<span class="number">1</span>..&lt;<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> newArray = <span class="type">Array</span>(oldNums[<span class="number">1</span>..&lt;<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>)	<span class="comment">//array</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>)			<span class="comment">//0..&lt;3 数组下标为0 1 2</span></span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">0</span>) <span class="comment">//在0位置插入一个元素</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>)          <span class="comment">//array</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>)                  <span class="comment">//0..&lt;4 数组下标为0 1 2 3</span></span><br><span class="line">newArray.insert(<span class="number">99</span>, atIndex: <span class="number">1</span>) <span class="comment">//在1位置插入一个元素</span></span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="keyword">dynamicType</span>)</span><br><span class="line"><span class="built_in">print</span>(newArray.<span class="built_in">indices</span>)                  <span class="comment">//0..&lt;5 数组下标为0 1 2 3 4</span></span><br></pre></td></tr></table></figure>
<p><a name="Q6"></a></p>
<h2 id="Q6:binary_operator_‘??’_cannot_be_applied_to_functions?">Q6:binary operator ‘??’ cannot be applied to functions?</h2><h3 id="问题链接-2">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/28099" target="_blank" rel="external">Q6链接地址</a></p>
<h3 id="问题描述-5">问题描述</h3><p>在 Playground 中运行以下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">return</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">var</span> f2:(()-&gt;())?  </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f3 = f2 ?? f1</span><br></pre></td></tr></table></figure>
<p>直接报错：binary operator ‘??’ cannot be applied to operands of type ‘(() -&gt; ())?’ and ‘() -&gt; ()’</p>
<h3 id="问题解答-3">问题解答</h3><p>其实Chris Lattner 大神说了：这就是个已知的 BUG ! 处理 autoclosure 和 function 时已经有人 report 过了。</p>
<p>不过呢<a href="https://forums.developer.apple.com/people/OOPer" target="_blank" rel="external">OOPer</a>还是提供了他自己的解决方式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = f1  </span><br><span class="line"><span class="keyword">let</span> f3 = f2 ?? f  <span class="comment">//不再报错</span></span><br></pre></td></tr></table></figure>
<p>注意倘若把 var 变成 let 常量定义的话就报错了!</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = f1  </span><br><span class="line"><span class="keyword">let</span> f3 = f2 ?? f  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<p>亲测在 swift2 中依然存在这个BUG！希望大家引起注意。</p>
<p><a name="Q7"></a></p>
<h2 id="Q7:_Filter_array_on_type">Q7: Filter array on type</h2><h3 id="问题链接-3">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/28185" target="_blank" rel="external">Q7链接地址</a></p>
<h3 id="问题描述-6">问题描述</h3><p>请看下面问题：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明了一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span>:<span class="title">X</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:<span class="title">X</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a :[<span class="type">X</span>]</span><br><span class="line"><span class="keyword">var</span> a1:[<span class="type">X1</span>]</span><br><span class="line"><span class="comment">// 注意这里有些是用X1初始化 有些是用X2初始化</span></span><br><span class="line"><span class="comment">// 但是a数组的类型切记是[X],之所以能这么干的原因在于</span></span><br><span class="line"><span class="comment">// X1 X2都是X的子类，严格意义上来说，说X1 X2是X也是OK的</span></span><br><span class="line">a=[<span class="type">X1</span>(<span class="number">1</span>),<span class="type">X1</span>(<span class="number">2</span>),<span class="type">X2</span>(<span class="number">3</span>),<span class="type">X2</span>(<span class="number">4</span>),<span class="type">X1</span>(<span class="number">5</span>)]</span><br><span class="line">a[<span class="number">0</span>].v  <span class="comment">//输出1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误来了</span></span><br><span class="line">a1 = a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span> &#125; <span class="comment">// ERROR</span></span><br><span class="line">a1[<span class="number">2</span>].v</span><br></pre></td></tr></table></figure>
<blockquote>
<p>is 关键字就是用来判断某个实例的所属类，注意说的是实例。</p>
</blockquote>
<p>报错：    </p>
<p><code>Playground execution failed: playground78.swift:15:8: error: cannot invoke &#39;filter&#39; with an argument list of type &#39;(@noescape (X) throws -&gt; Bool)&#39;</code></p>
<p>然后提问者就想可能是自己闭包格式没写全，于是又这么改：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.<span class="built_in">filter</span> &#123; (p:<span class="type">X</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> p <span class="keyword">is</span> <span class="type">X1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>不出意外，还是挂了。</p>
<h3 id="问题解答-4">问题解答</h3><p>首先我们要明白 <code>filter</code> 方法的用法，filter 函数接收一个闭包作为筛选数组元素的过滤器，闭包一次处理一个元素，符合返回<code>true</code>，反之<code>false</code>。只有那些<code>true</code>的元素才会被<code>append</code>到结果数组中返回。更多filter函数请点击<a href="http://www.jianshu.com/notebooks/1752038/latest" target="_blank" rel="external">这里</a>。</p>
<p>现在来看看问题代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>先看式子右边<code>a.filter { $0 is X1 }</code>传入了一个简化版闭包<code>$0 is X1</code>，其实就是作为筛选条件，一旦a中元素的类型为<code>X1</code>，即我们想要的元素，不过这里的元素类型依旧是<code>X</code>，而非<code>X1</code>，不难得出最后返回的是<code>[X]</code>结果数组； 在看式子左边<code>a1</code>，这货的类型是<code>[X1]</code>。原因找到了！就是因为<code>[X1]≠[X]</code>造成的，修改方式嘛，自然就是<code>as</code>喽。所以最后修改代码如下</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.<span class="built_in">filter</span>&#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span>&#125; <span class="keyword">as</span>! [<span class="type">X1</span>]</span><br><span class="line">a1.<span class="built_in">map</span>&#123;<span class="built_in">print</span>(<span class="string">"<span class="subst">\($<span class="number">0</span>.v)</span>"</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>其实吧，我更推荐第二种方式，使用 flatMap 实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a1 = a.flatMap&#123;$<span class="number">0</span> <span class="keyword">as</span>? <span class="type">X1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>我们对a数组中的元素进行遍历，每个都执行<code>$0 as? X1</code>类型转换，倘若成功就将元素转换为<code>X1</code>类型，失败则返回<code>nil</code>，最后<code>flapMap</code>会为我们剔除<code>nil</code>值。</p>
<h3 id="思考">思考</h3><p>现在有个问题:倘若我们使用面向对象编程呢？上述两种方法还适用吗？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a :[<span class="type">X</span>]</span><br><span class="line"><span class="keyword">var</span> a1:[<span class="type">X1</span>]</span><br><span class="line"><span class="comment">// 注意这里有些是用X1初始化 有些是用X2初始化</span></span><br><span class="line">a=[<span class="type">X1</span>(<span class="number">1</span>),<span class="type">X1</span>(<span class="number">2</span>),<span class="type">X2</span>(<span class="number">3</span>),<span class="type">X2</span>(<span class="number">4</span>),<span class="type">X1</span>(<span class="number">5</span>)]</span><br><span class="line">a[<span class="number">0</span>].v</span><br><span class="line">a1 = a.<span class="built_in">filter</span>&#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span>&#125; <span class="keyword">as</span>! [<span class="type">X1</span>] <span class="comment">//报错：fatal error: array element cannot be bridged to Objective-C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = a.flatMap&#123; $<span class="number">0</span> <span class="keyword">as</span>? <span class="type">X1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>看来只有<code>flatMap</code>依旧坚挺！如果想要使用<code>filter</code>的话，可以这么实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(a.<span class="built_in">filter</span> &#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">XValue</span> &#125;).<span class="built_in">map</span> &#123; $<span class="number">0</span> <span class="keyword">as</span>! <span class="type">XValue</span> &#125;</span><br></pre></td></tr></table></figure>
<p>画蛇添足的赶脚。有木有更好的方法呢？报错说我们没有桥接到OC,让我想到了<code>@objc</code>，于是我尝试了下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> v:<span class="type">Int</span>&#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X1</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="preprocessor">@objc</span> <span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承自X</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X2</span>:<span class="title">X</span></span>&#123;</span><br><span class="line">	<span class="preprocessor">@objc</span> <span class="keyword">var</span> v:<span class="type">Int</span></span><br><span class="line">	<span class="keyword">init</span>(<span class="number">_</span> v:<span class="type">Int</span>)&#123;<span class="keyword">self</span>.v = v&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a :[<span class="type">X</span>]</span><br><span class="line"><span class="keyword">var</span> a1:[<span class="type">X1</span>]</span><br><span class="line"><span class="comment">// 注意这里有些是用X1初始化 有些是用X2初始化</span></span><br><span class="line">a=[<span class="type">X1</span>(<span class="number">1</span>),<span class="type">X1</span>(<span class="number">2</span>),<span class="type">X2</span>(<span class="number">3</span>),<span class="type">X2</span>(<span class="number">4</span>),<span class="type">X1</span>(<span class="number">5</span>)]</span><br><span class="line">a[<span class="number">0</span>].v</span><br><span class="line"><span class="keyword">var</span> a2 = a.<span class="built_in">filter</span>&#123; $<span class="number">0</span> <span class="keyword">is</span> <span class="type">X1</span>&#125; <span class="keyword">as</span>! [<span class="type">X1</span>]</span><br></pre></td></tr></table></figure>
<p>这样是ok的。</p>
<h2 id="Q8、Numbers_in_swift">Q8、Numbers in swift</h2><h3 id="问题链接-4">问题链接</h3><p><a href="https://forums.developer.apple.com/thread/28056" target="_blank" rel="external">Q8链接地址</a></p>
<h3 id="问题描述-7">问题描述</h3><p>提问者吐槽，以下代码会出现编译错误：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> x</span>: <span class="typename">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> y</span>: <span class="typename">Double</span> = <span class="number">2.0</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span>: <span class="typename">Double</span> = y / x</span><br></pre></td></tr></table></figure>
<p>然后又表示，下面代码也是错的，让人难以接受这是 Swift 干的事情：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="tag">var</span> k: Double</span><br><span class="line">k = <span class="function"><span class="title">Double</span><span class="params">(x)</span></span></span><br><span class="line">k = <span class="function"><span class="title">Double</span><span class="params">(x.value)</span></span></span><br><span class="line">k = (Double) x</span><br><span class="line">k = (Double) x.value</span><br></pre></td></tr></table></figure>
<h3 id="问题解答-5">问题解答</h3><p><a href="https://forums.developer.apple.com/people/OOPer" target="_blank" rel="external">OOPer</a> 大神在回帖中写到，其实<code>k = Double(x)</code> 是可以执行的， Swift 是强调强类型的语言，不过也提供了不同类型的转换方式。对不同类型进行运算, Swift 是不允许的。以下代码是可以运行的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> x</span>: <span class="typename">Int</span> = <span class="number">2</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> y</span>: <span class="typename">Double</span> = <span class="number">2.0</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span>: <span class="typename">Double</span> = y / <span class="typename">Double</span>(x)</span><br></pre></td></tr></table></figure>
<p>另外，回帖中还提供了一种使用协议和代码的方式来解决这个问题：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">protocol DoubleBOWEMOJI &#123;  </span><br><span class="line">  <span class="variable"><span class="keyword">var</span> Double</span>: Swift.<span class="typename">Double</span> &#123;<span class="keyword">get</span>&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">extension <span class="typename">Int</span>: DoubleBOWEMOJI &#123;  </span><br><span class="line">   <span class="variable"><span class="keyword">var</span> Double</span>: Swift.<span class="typename">Double</span> &#123;<span class="keyword">return</span> Swift.<span class="typename">Double</span>(self)&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> z</span> = y / x.<span class="typename">Double</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>本周整理问题如下：</p>
<ul>
<li><a href="#Q1">Unwrapping NSNumber works fine in iOS Simulator but unexpectedly found nil on iPhone</a></li>
<li><a href="#Q2">Why my code is working in playground but not in my project?</a></li>
<li><a href="#Q3">Failable initialisers and unbound instance vars</a></li>
<li><a href="#Q4">Read-only property</a></li>
<li><a href="#Q5">Why? insert a new element into array and it always crash!</a></li>
<li><a href="#Q6">binary operator ‘??’ cannot be applied to functions?</a></li>
<li><a href="#Q7">Filter array on type</a> </li>
<li><a href="#Q8">Numbers in swift</a></li>
</ul>
<p>对应的代码都放到了 github 上，有兴趣的同学可以下载下来研究：<a href="https://github.com/SwiftGGTeam/SwiftCommunityWeeklyQA/tree/master/20151216/%E6%AF%8F%E5%91%A8%20Swift%20%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%9420151216.playground">点击下载</a></p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://swiftggteam.github.io/tags/Swift/"/>
    
      <category term="原创" scheme="http://swiftggteam.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="社区问答" scheme="http://swiftggteam.github.io/tags/%E7%A4%BE%E5%8C%BA%E9%97%AE%E7%AD%94/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
      <category term="iOS开发" scheme="http://swiftggteam.github.io/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Beta 2 更新：Swift 2.1 Playground 使用值放置方法]]></title>
    <link href="http://swiftggteam.github.io/2015/12/16/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/"/>
    <id>http://swiftggteam.github.io/2015/12/16/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/09/23/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/" target="_blank" rel="external">原文链接</a>，原文日期：2015-09-23<br>译者：<a href="http://weibo.com/u/2916092907" target="_blank" rel="external">天才175</a>；校对：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb" target="_blank" rel="external">numbbbbb</a></p>
</blockquote>
<p><img src="/img/articles/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/Color-AppScreenSnapz001.png1450226715.996496" alt=""></p>
<p>Beta 2 的新特性允许你拖放颜色、图片以及文件。在截图中虽然看不到，但如果你打开文本赋值的历史记录，就会显示文件的文本内容（是我的购物清单，好奇的家伙们）。文本常量的类型为<code>NSURL</code>。颜色是<code>UIColor</code>，图片是<code>UIImage</code>。谢天谢地，希望你们对这些没有任何疑问。</p>
<a id="more"></a>
<ul>
<li>非常有趣的是，你可以在 playground 里拖动它们。所以如果你不小心把一张图片放在了颜色那一行，直接拖到 图片赋值那里就行。</li>
<li>你也可以选择将拖动的物品进行复制。</li>
<li>双击颜色可以打开颜色选择器（耶！），双击图片可以打开资源文件夹来选取其他资源。双击 URLS 我没发现可以干神马。</li>
<li>你不能调整代码中占位符的大小，但是你可以调整它们历史记录界面的大小，和其他值一样。</li>
<li>你还不能通过调用<code>UIColor</code>来生成颜色预览，比如，<code>UIColor.blueColor()</code>就不能生成预览。我发现最简单的方法就是从外部拖进来或者复制/拖另一个颜色，然后用色轮赋值。</li>
<li>如果代码中占位符是蓝色，别输入。单击关闭它或者直接用键盘输入内容替换它。蓝色意味着可以选取并且可以被改写。简单吧。</li>
</ul>
<p>聪明人的做法：<strong>不要把 playground 拖入它自身</strong>。我是认真的，我已经踩过坑了。</p>
<p><img src="/img/articles/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/Screen-Shot-2015-09-23-at-8.30.41-PM.png1450226717.1296368" alt=""></p>
<p>由于文件可以随意复制到资源文件夹。所以：</p>
<ul>
<li>不要通过拖动复制同样的文件两次。Xcode 不喜欢那样。</li>
<li>不要指望编辑源文件可以自动同步修改，你需要修改添加后的文件。</li>
<li>颜色不能复制到资源里，它们只能是值项。</li>
<li>目前有很多事情还不能做。比如，你不能从 Safari “复制” URLS 过来。它们需要进行转义，不然会被当作纯文本。虽然可以期待之后可以拖放的词汇会越来越多，但目前只有颜色、图片和本地文件的 NSURL。</li>
<li>如前所述，不要把 playground 拖入它自身。</li>
</ul>
<h2 id="其他新的东西">其他新的东西</h2><p>Swift 关于如何响应引入的 enums，unions, NSNumbers 等有很大的变化。如果你从事大量跨语言编码，值得认真读一读更新说明。</p>
<p>Swift 2.1 现在可以在字符串插值中使用双引号。</p>
<blockquote>
<p>表达式字符串插值现在可以包含字符串了。比如，“My name is \ (attributes[“name”]!)” 现在是有效的。（14050788）</p>
</blockquote>
<p>编译器性能有一些提升。没有任何依赖的项（即标记为私有的）不会再触发其他文件的重编译。</p>
<p>更加宽泛的函数类型。你可以这样赋值了，从<code>任何类型-&gt;Int 闭包</code>到<code>字符串-&gt;任何变量</code>。这种方式到底好还是不好，我仍在思考中。</p>
<blockquote>
<p>现在支持函数类型的转换，展现了函数结果类型的协变和函数参数类型的逆变。比如，现在这样的函数类型赋值方式是合法的，从<code>任何类型-&gt;Int 闭包</code>到<code>字符串-&gt;任何变量</code>。（19517003）</p>
</blockquote>
<p>下面，抛开 playground, 对于我来说，有一个最重大的改变。那就是 map 闭包（_-&gt;_ 是不是很眼熟？）的错误提示“更加有用了”。我都等不及要试一试了!</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Erica Sadun，<a href="http://ericasadun.com/2015/09/23/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/">原文链接</a>，原文日期：2015-09-23<br>译者：<a href="http://weibo.com/u/2916092907">天才175</a>；校对：<a href="https://github.com/numbbbbb">numbbbbb</a>；定稿：<a href="https://github.com/numbbbbb">numbbbbb</a></p>
</blockquote>
<p><img src="/img/articles/new-to-beta-2-swift-2-1-playground-value-drops-swiftlang/Color-AppScreenSnapz001.png1450226715.996496" alt=""></p>
<p>Beta 2 的新特性允许你拖放颜色、图片以及文件。在截图中虽然看不到，但如果你打开文本赋值的历史记录，就会显示文件的文本内容（是我的购物清单，好奇的家伙们）。文本常量的类型为<code>NSURL</code>。颜色是<code>UIColor</code>，图片是<code>UIImage</code>。谢天谢地，希望你们对这些没有任何疑问。</p>]]>
    
    </summary>
    
      <category term="Erica Sadun" scheme="http://swiftggteam.github.io/tags/Erica-Sadun/"/>
    
      <category term="Swift 入门" scheme="http://swiftggteam.github.io/categories/Swift-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mixins 比继承更好]]></title>
    <link href="http://swiftggteam.github.io/2015/12/15/mixins-over-inheritance/"/>
    <id>http://swiftggteam.github.io/2015/12/15/mixins-over-inheritance/</id>
    <published>2015-12-15T02:30:00.000Z</published>
    <updated>2016-01-06T03:05:17.016Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/" target="_blank" rel="external">原文链接</a>，原文日期：2015-11-08<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles" target="_blank" rel="external">ray16897188</a>；校对：<a href="https://github.com/Cee" target="_blank" rel="external">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao" target="_blank" rel="external">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>译者注：<a href="https://en.wikipedia.org/wiki/Mixin" target="_blank" rel="external">Mixin</a> 和 <a href="https://en.wikipedia.org/wiki/Trait_\(computer_programming\" target="_blank" rel="external">Trait</a> 是面向对象编程语言中的术语，本文中作者并未明确指出两者之间的区别。这两个单词在本译文中也不做翻译。</p>
<p>从面向对象的编程语言的角度来说，继承（Inheritence）总被用来在多个类之间共享代码。但这并不总是一个最佳的解决方案，而且它本身还有些问题。在今天写的这篇文章中，我们会看到 Swift 中的协议扩展（Protocol Extensions），并将其以「Mixins」的形式去使用是怎样解决这个问题的。<br><a id="more"></a></p>
<blockquote>
<p>你可以从这里下载<a href="http://alisoftware.github.io/assets/Mixins.playground.zip" target="_blank" rel="external">包含本篇文章所有代码的 Swift Playground</a>。</p>
</blockquote>
<h3 id="继承本身存在的问题">继承本身存在的问题</h3><p>假设你有个 app，里面有很多包含相同行为的 <code>UIViewController</code> 类，例如它们都有汉堡菜单。你当然不想在 app 中的每一个 View Controller 里都反复实现这个汉堡菜单的逻辑（例如设置 <code>leftBarButtonItem</code> 按钮，点击这个按钮时打开或者关闭这个菜单，等等）。</p>
<p>解决方案很简单，你只需要创建一个负责实现所有特定行为、而且是 <code>UIViewController</code> 的子类 <code>CommonViewController</code>。然后让你所有的 ViewController 都直接继承 <code>CommonViewController</code> 而不是 <code>UIViewController</code> 就可以了，没错吧？通过使用这种方式，这些类都继承了父类的方法，且具有了相同的行为，你也不用每次重复实现这些东西了。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="keyword">var</span> burgerMenuIsOpen: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123; … &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">CommonViewController</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但在随后的开发阶段，你会意识到自己需要一个 <code>UITableViewController</code> 或者一个 <code>UICollectionViewController</code>……晕死，<code>CommonViewController</code> 不能用了，因为它是继承自 <code>UIViewController</code> 而不是 <code>UITableViewController</code>！</p>
<p>你会怎么做，是实现和 <code>CommonViewController</code> 一样的事情却继承于 <code>UITableViewController</code> 的 <code>CommonTableViewController</code> 吗？这会产生很多重复的代码，而且是个十分糟糕的设计哦。</p>
<h3 id="组合（Composition）是救命稻草">组合（Composition）是救命稻草</h3><p>诚然，解决这个问题，有句具有代表性并且正确的话是这么说的：</p>
<blockquote>
<p>多用组合，少用继承。</p>
</blockquote>
<p>这意味着我们不使用继承的方式，而是让我们的 <code>UIViewController</code> 包含一些提供相应行为的内部类（Inner class）。</p>
<p>在这个例子中，我们可以假定 <code>BurgerMenuManager</code> 类能提供创建汉堡菜单图标、以及与这些图标交互逻辑的所有必要的方法。那些各式各样的 <code>UIViewController</code> 就会有一个 <code>BurgerMenuManager</code> 类型的<em>属性</em>，可以用来与汉堡餐单做交互。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurgerMenuManager</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">setupBurgerMenu</span><span class="params">()</span></span> &#123; … &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">onBurgerMenuTapped</span><span class="params">()</span></span> &#123; burgerMenuIsOpen = !burgerMenuisOpen &#125;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">burgerMenuIsOpen</span>: <span class="title">Bool</span> </span>&#123; <span class="keyword">didSet</span> &#123; … &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> menuManager: <span class="type">BurgerMenuManager</span>()</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    menuManager.setupBurgerMenu()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOtherViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> menuManager: <span class="type">BurgerMenuManager</span>()</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    menuManager.setupBurgerMenu()</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而你能看出来这种解决方案会变得很臃肿。每次你都得去明确引用那个中间对象 <code>menuManager</code>。</p>
<h3 id="多继承（Multiple_inheritance）">多继承（Multiple inheritance）</h3><p>继承的另一个问题就是很多面向对象的编程语言都不支持<em>多继承</em>（这儿有个很好的解释，是关于<a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem" target="_blank" rel="external">菱形缺陷（Diamond problem）</a>的）。</p>
<p>这就意味着一个类不能继承自多个父类。</p>
<p>假如说你要创建一些科幻小说中的人物的对象模型。显然，你得展现出 <code>DocEmmettBrown</code>，<code>DoctorWho</code>，<code>TimeLord</code>，<code>IronMan</code> 还有 <code>Superman</code> 的能力……这些角色的相互关系是什么？有些能时间旅行，有些能空间穿越，还有些两种能力都会；有些能飞，而有些不能飞；有些是人类，而有些不是……</p>
<p><code>IronMan</code> 和 <code>Superman</code> 这个两个类都能飞，于是我们就会设想有个 <code>Flyer</code> 类能提供一个实现 <code>fly()</code> 的方法。但是 <code>IronMan</code> 和 <code>DocEmmettBrown</code> 都是人类，我们还会设想要有个 <code>Human</code> 父类；而 <code>Superman</code> 和 <code>TimeLord</code> 又得是 <code>Alien</code> 的子类。哦，等会儿…… 那 <code>IronMan</code> 得同时继承 <code>Flyer</code> 和 <code>Human</code> 两个类吗？这在 Swift 中是不可能的实现的（在很多其他的面向对象的语言中也不能这么实现）。</p>
<p>我们应该从所有父类中选择出符合子类属性最好的一个么？但是假如我们让 <code>IronMan</code> 继承 <code>Human</code>，那么怎么去实现 <code>fly()</code> 这个方法？很显然我们不能在 <code>Human</code> 这个类中实现，因为并不是每个人都会飞，但是 <code>Superman</code> 却需要这个方法，然而我们并不想重复写两次。</p>
<p>所以，我们在这里会使用组合（Composition）方法，让 <code>var flyingEngine: Flyer</code> 成为 <code>Superman</code> 类中的一个属性。</p>
<p>但是调用时你必须写成 <code>superman.flyingEngine.fly()</code> 而不是优雅地写成 <code>superman.fly()</code>。</p>
<h3 id="Mixins_&amp;_Traits">Mixins &amp; Traits</h3><p><img src="/img/articles/mixins-over-inheritance/12401450145416.541825" alt="生生不息，Mixin 繁荣"></p>
<p>Mixins 和 Traits 的概念<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>由此引入。</p>
<ul>
<li>通过继承，你定义你的类是什么。例如每条 <code>Dog</code> 都<em>是</em>一个 <code>Animal</code>。</li>
<li>通过 Traits，你定义你的类<em>能做什么</em>。例如每个 <code>Animal</code> 都<em>能</em> <code>eat()</code>，但是人类也可以吃，而且<a href="https://www.youtube.com/watch?v=Oo2RKAHu-kI" target="_blank" rel="external">异世奇人（Doctor Who）也能吃鱼条和蛋挞</a>，甚至即使是位 Gallifreyan（既不是人类也不是动物）。</li>
</ul>
<p>使用 Traits，重要的不是「是什么」，而是能「做什么」。</p>
<blockquote>
<p>继承描述了一个对象是什么，而 Traits 描述了这个对象能做什么。</p>
</blockquote>
<p>最棒的事情就是一个类可以选用多个 <code>Traits</code> 来做多个事情，而这个类还只是一种事物（只从一个父类继承）。</p>
<p>那么如何应用到 Swift 中呢？</p>
<h3 id="有默认实现的协议">有默认实现的协议</h3><p>Swift 2.0 中定义一个<code>协议（Protocol）</code>的时候，还可以使用这个协议的<code>扩展（Extension）</code>给它的部分或是所有的方法做默认实现。看上去是这样的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I believe I can flyyyyy ♬"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了上面的代码，当你创建一个遵从 <code>Flyer</code> 协议的类或者是结构体时，就能很顺利地获得 <code>fly()</code> 方法！</p>
<p>这只是一个<em>默认的实现方式</em>。因此你可以在需要的时候不受约束地重新定义这个方法；如果不重新定义的话，会使用你默认的那个方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span>: <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里我们没有实现 fly() 方法，因此能够听到 Clark 唱歌</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span>: <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果需要我们也可以给出单独的实现</span></span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    thrusters.start()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于很多事情来说，协议的默认实现这个特性非常的有用。其中一种自然就是如你所想的那样，把「Traits」概念引入到了 Swift 中。</p>
<h3 id="一种身份，多种能力">一种身份，多种能力</h3><p>Traits 很赞的一点就是它们并不依赖于使用到它们的对象本身的身份。Traits 并不关心类是什么，亦或是类是从哪里继承的：Traits 仅仅在类上定义了一些函数。</p>
<p>这就解决了我们的问题：异世奇人（Doctor Who）可以既是一位时间旅行者，同时还是一个外星人；而爱默·布朗博士（Dr Emmett Brown）既是一位时间旅行者，同时还属于人类；钢铁侠（Iron Man）是一个能飞的人，而超人（Superman）是一个能飞的外星人。</p>
<blockquote>
<p>你是什么并不限制你能够做什么</p>
</blockquote>
<p>现在我们利用 Traits 的优点来实现一下我们的模板类。</p>
<p>首先定义不同的 Traits：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentDate: <span class="type">NSDate</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(date: NSDate)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随后给它们一些默认的实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I believe I can flyyyyy ♬"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">mutating</span> <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(date: NSDate)</span></span> &#123;</span><br><span class="line">    currentDate = date</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这点上，我们还是用继承去定义我们英雄角色的身份（他们是什么），先定义一些父类：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Character</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>: <span class="title">Character</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> countryOfOrigin: <span class="type">String</span>?</span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, countryOfOrigin: <span class="type">String</span>? = <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.countryOfOrigin = countryOfOrigin</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span>: <span class="title">Character</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> species: <span class="type">String</span></span><br><span class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>, species: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.species = species</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们就能通过他们的身份（通过继承）和能力（Traits/协议遵循）来定义英雄角色了：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeLord</span>: <span class="title">Alien</span>, <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentDate = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"I'm the Doctor"</span>, species: <span class="string">"Gallifreyan"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocEmmettBrown</span>: <span class="title">Human</span>, <span class="title">TimeTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentDate = <span class="type">NSDate</span>()</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Emmett Brown"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span>: <span class="title">Alien</span>, <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Clark Kent"</span>, species: <span class="string">"Kryptonian"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span>: <span class="title">Human</span>, <span class="title">Flyer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Tony Stark"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在 <code>Superman</code> 和 <code>IronMan</code> 都使用了相同的 <code>fly()</code> 实现，即使他们分别继承自不同的父类（一个继承自 <code>Alien</code>，另一个继承自 <code>Human</code>）。而且这两位博士都知道怎么做时间旅行了，即使一个是人类，另外一个来自 Gallifrey 星。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tony = <span class="type">IronMan</span>()</span><br><span class="line">tony.fly() <span class="comment">// 输出 "I believe I can flyyyyy ♬"</span></span><br><span class="line">tony.name  <span class="comment">// 返回 "Tony Stark"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clark = <span class="type">Superman</span>()</span><br><span class="line">clark.fly() <span class="comment">// 输出 "I believe I can flyyyyy ♬"</span></span><br><span class="line">clark.species  <span class="comment">// 返回 "Kryptonian"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> docBrown = <span class="type">DocEmmettBrown</span>()</span><br><span class="line">docBrown.travelTo(<span class="type">NSDate</span>(timeIntervalSince1970: <span class="number">499161600</span>))</span><br><span class="line">docBrown.name <span class="comment">// "Emmett Brown"</span></span><br><span class="line">docBrown.countryOfOrigin <span class="comment">// "USA"</span></span><br><span class="line">docBrown.currentDate <span class="comment">// Oct 26, 1985, 9:00 AM</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doctorWho = <span class="type">TimeLord</span>()</span><br><span class="line">doctorWho.travelTo(<span class="type">NSDate</span>(timeIntervalSince1970: <span class="number">1303484520</span>))</span><br><span class="line">doctorWho.species <span class="comment">// "Gallifreyan"</span></span><br><span class="line">doctorWho.currentDate <span class="comment">// Apr 22, 2011, 5:02 PM</span></span><br></pre></td></tr></table></figure>
<h3 id="时空大冒险">时空大冒险</h3><p>现在我们引入一个新的空间穿越的能力/trait：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SpaceTraveler</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(location: String)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并给它一个默认的实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SpaceTraveler</span> </span>&#123;</span><br><span class="line">  <span class="func"><span class="keyword">func</span> <span class="title">travelTo</span><span class="params">(location: String)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Let's go to <span class="subst">\(location)</span>!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用 Swift 的<code>扩展（Extension）</code>方式<strong>让现有的一个类遵循一个协议</strong>，把这些能力加到我们定义的角色身上去。如果忽略掉钢铁侠之前跑到纽约城上面随后短暂飞到太空中去的那次情景，那只有博士和超人是真正能做空间穿越的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TimeLord</span>: <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Superman</span>: <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/articles/mixins-over-inheritance/great-scott.gif1450145417.1893744" alt="天哪！"></p>
<p>没错，这就是给已有类添加能力/trait 仅需的步骤！就这样，他们可以 <code>travelTo()</code> 任何的地方了！很简洁，是吧？</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">doctorWho.travelTo(<span class="string">"Trenzalore"</span>) <span class="comment">// prints "Let's go to Trenzalore!"</span></span><br></pre></td></tr></table></figure>
<h3 id="邀请更多的人来参加这场聚会！">邀请更多的人来参加这场聚会！</h3><p>现在我们再让更多的人加入进来吧：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 来吧，Pond！</span></span><br><span class="line"><span class="keyword">let</span> amy = <span class="type">Human</span>(name: <span class="string">"Amelia Pond"</span>, countryOfOrigin: <span class="string">"UK"</span>)</span><br><span class="line"><span class="comment">// 该死，她是一个时间和空间旅行者，但是却不是 TimeLord！</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Astraunaut</span>: <span class="title">Human</span>, <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> neilArmstrong = <span class="type">Astraunaut</span>(name: <span class="string">"Neil Armstrong"</span>, countryOfOrigin: <span class="string">"USA"</span>)</span><br><span class="line"><span class="keyword">let</span> laika = <span class="type">Astraunaut</span>(name: <span class="string">"Laïka"</span>, countryOfOrigin: <span class="string">"Russia"</span>)</span><br><span class="line"><span class="comment">// 等等，Leïka 是一只狗，不是吗？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilleniumFalconPilot</span>: <span class="title">Human</span>, <span class="title">SpaceTraveler</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> hanSolo = <span class="type">MilleniumFalconPilot</span>(name: <span class="string">"Han Solo"</span>)</span><br><span class="line"><span class="keyword">let</span> chewbacca = <span class="type">MilleniumFalconPilot</span>(name: <span class="string">"Chewie"</span>)</span><br><span class="line"><span class="comment">// 等等，MilleniumFalconPilot 不该定义成「人类」吧！</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spock</span>: <span class="title">Alien</span>, <span class="title">SpaceTraveler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">"Spock"</span>, species: <span class="string">"Vulcan"</span>)</span><br><span class="line">    <span class="comment">// 并不是 100% 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Huston，我们有麻烦了（译注：原文 “Huston, we have a problem here”，是星际迷航中的梗）。Laika 不是一个人，Chewie 也不是，Spock 算半个人、半个瓦肯（Vulcan）人，所以上面的代码定义错的离谱！</p>
<p>你看出来什么问题了么？我们又一次被继承摆了一道，理所应当地认为 <code>Human</code> 和 <code>Alien</code>是身份。在这里一些类必须属于某种类型，或是必须继承自某个父类，而实际情况中不总是这样，尤其对科幻故事来说。</p>
<p>这也是为什么要在 Swift 中使用协议，以及协议的默认扩展。这能够帮助我们把因使用继承而强加到类上的这些限制移除。</p>
<p>如果 <code>Human</code> 和 <code>Alien</code> 不是<code>类</code>而是<code>协议</code>，那就会有很多的好处：</p>
<ul>
<li>我们可以定义一个 <code>MilleniumFalconPilot</code> 类型，不必让它是一个 <code>Human</code> ，这样就可以让 Chewie 驾驶它了；</li>
<li>我们可以把 Laïka 定义成一个 <code>Astronaut</code>，即使她不是人类；</li>
<li>我们可以将 <code>Spock</code> 定义成 <code>Human</code> 和 <code>Alien</code> 的结合体；</li>
<li>我们甚至可以在这个例子中完全摒弃继承，并将我们的类型从<code>类（Classes）</code>转换成<code>结构体（Structs）</code>。<code>结构体</code>不支持继承，但可以遵循你想要遵循的协议，想遵循多少协议就能遵循多少协议！</li>
</ul>
<h3 id="无处不在的协议！">无处不在的协议！</h3><p>因此，我们的一个解决方案是彻底弃用继承，将所有的东西都变成协议。毕竟我们不在乎我们的角色<em>是什么</em>，能够定义英雄本身的是他们拥有的<em>能力</em>！</p>
<p><img src="/img/articles/mixins-over-inheritance/12401450145417.8855546" alt="终结掉继承！"></p>
<p>我在这里附上了一个<a href="http://alisoftware.github.io/assets/Mixins.playground.zip" target="_blank" rel="external">可下载的 Swift Playground 文件</a>，包含这篇文章里的所有代码，并在 Playground 的第二页放上了一个全部用协议和结构体的解决方案，完全不用继承。快去看看吧！</p>
<p>这当然并不意味着你必须不惜一切代价放弃对继承的使用（别听那个 Dalek 讲太多，机器人毕竟没感情的😉）。继承依然有用，而且依然有意义——很符合逻辑的一个说法就是 <code>UILabel</code> 是 <code>UIView</code> 的一个<em>子类</em>。但我们提供的方法能让你能感受到 Mixins 和协议带给你的不同体验。</p>
<h3 id="小结">小结</h3><p>实践 Swift 的时候，你会意识到它实质上是一个面向协议的语言（Protocols-Oriented language），而且在 Swift 中使用协议和在 Objective-C 中使用相比更加常见和有效。毕竟，那些类似于 <code>Equatable</code>，<code>CustomStringConvertible</code> 的协议以及 Swift 标准库中其它所有以 <code>-able</code> 结尾的协议都可以被看做是 Mixins！</p>
<p>有了 Swift 的协议和协议的默认实现，你就能实现 Mixins 和 Traits，而且你还可以实现类似于抽象类<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup>以及更多的一些东西，这让你的代码变得更加灵活。</p>
<p>Mixins 和 Traits 的方式可以让你描述你的类型<strong>能够做什么</strong>，而不是描述<strong>它们是什么</strong>。更重要的是，它们能够为你的类型增加各种能力。这就像购物那样，<strong>无论你的类是从哪个父类继承的（如果有），你都能为它们选择你想要它们具有的那些能力</strong>。</p>
<p>回到第一个例子，你可以创建一个 <code>BurgerMenuManager 协议</code>且该协议有一个默认实现，然后可以简单地将 View Controllers（不论是 <code>UIViewController</code>，<code>UITableViewController</code> 还是其他的类）都遵循这个协议，它们都能自动获得 <code>BurgerMenuManager</code> 所具有的能力和特性，你也根本不用去为父类 <code>UIViewController</code> 操心！</p>
<p><img src="/img/articles/mixins-over-inheritance/i-dont-wanna-go.gif1450145418.0677123" alt="我不想离开"></p>
<p>关于协议扩展还有很多要说的，我还想在文章中继续告诉你关于它更多的事情，因为它能够通过很多方式提高你的代码质量。嘿，但是，这篇文章已经挺长的了，同时也为以后的博客文章留一些空间吧，希望你到时还会再来看！</p>
<p>与此同时，生生不息，繁荣昌盛，杰罗尼莫（译注：跳伞时老兵鼓励新兵的一句话）！</p>
<hr>
<p><a id="fn1" href="#fnref1" rev="footnote">1.我不会深入去讲 Mixin 和 Traits 这两个概念之间的区别。由于这两个词的意思很接近，为简单起见，在本篇文章中它俩可以互相替换使用。</a><br><a id="fn2" href="#fnref2" rev="footnote">2.在以后的博文中会作为一个专题去讲解。</a></p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：Olivier Halligon，<a href="http://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/">原文链接</a>，原文日期：2015-11-08<br>译者：<a href="http://www.jianshu.com/users/97c49dfd1f9f/latest_articles">ray16897188</a>；校对：<a href="https://github.com/Cee">Cee</a>；定稿：<a href="http://weibo.com/xiaoxxiao">千叶知风</a></p>
</blockquote>
<!--此处开始正文-->
<p>译者注：<a href="https://en.wikipedia.org/wiki/Mixin">Mixin</a> 和 <a href="https://en.wikipedia.org/wiki/Trait_\(computer_programming\">Trait</a> 是面向对象编程语言中的术语，本文中作者并未明确指出两者之间的区别。这两个单词在本译文中也不做翻译。</p>
<p>从面向对象的编程语言的角度来说，继承（Inheritence）总被用来在多个类之间共享代码。但这并不总是一个最佳的解决方案，而且它本身还有些问题。在今天写的这篇文章中，我们会看到 Swift 中的协议扩展（Protocol Extensions），并将其以「Mixins」的形式去使用是怎样解决这个问题的。<br>]]>
    
    </summary>
    
      <category term="Crunchy Development" scheme="http://swiftggteam.github.io/tags/Crunchy-Development/"/>
    
      <category term="Swift 进阶" scheme="http://swiftggteam.github.io/categories/Swift-%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
</feed>
